<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ip地址计算]]></title>
    <url>%2F2017%2F10%2F11%2Fip_calc%2F</url>
    <content type="text"><![CDATA[192.168.0.1/24代表的含义，以及计算子网掩码、网络号、主机号、网络地址、主机地址IP地址是一个32位的二进制数，被分割为4个“8位二进制数”（也就是4个字节）。通常以十进制的方式表示，十进制的显示形式便于人看，二进制显示形式是给计算机看。子网掩码(subnet mask) 又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。1234192.168.0.1/24/24 表示子网掩码，也就是前24位是1，剩余补011111111 11111111 11111111 00000000 转化成十进制 255.255.255.0子网掩码为：255.255.255.0将IP地址和子网掩码换算为二进制，子网掩码连续是1的表示网络地址，1的数目（/24）等于网络位的长度；后面0的部分表示主机地址，0的数目等于主机位的长度（32-24=8）。类型十进制二进制IP地址192.168.0.111000000 10101000 00000000 00000001子网掩码255.255.255.011111111 11111111 11111111 00000000网络地址：IP地址和子网掩码的与运算，结果就是网络地址。(主机位全为0==网络地址)11000000 10101000 00000000 00000000 转化十进制 192.168.0.0广播地址：将运算结果中的网络位不变，主机位变为1，结果就是广播地址。（主机位全为1==广播地址）11000000 10101000 00000000 11111111 转化十进制 192.168.0.255地址范围：网络地址+1即为第一个主机地址，广播地址-1即为最后一个主机地址。192.168.0.1 ~ 192.168.0.254主机数量：=2^(8-2) ; 8代表主机位长度。减2是因为主机不包括网络地址和广播地址。]]></content>
      <categories>
        <category>None</category>
      </categories>
      <tags>
        <tag>ip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows_CMD_]]></title>
    <url>%2F2017%2F10%2F10%2FWin_cmd%2F</url>
    <content type="text"><![CDATA[Windows PowerShell和CMD控制台代码页设置123456789101112131415161718192021222324代码页 国家（地区）或语言437 美国 850 多语言（拉丁文 I）852 斯拉夫语（拉丁文 II）855 西里尔文（俄语） 857 土耳其语860 葡萄牙语861 冰岛语863 加拿大 - 法语865 日耳曼语866 俄语869 现代希腊语 936 简体中文950 繁体中文65001 UTF-8语法 chcp [NNN]通过注册表修改代码页：1 win键+R打开“运行”对话框，输入regedit打开注册表编辑器。2 找到 [HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe]3 修改或者新建"CodePage" = dword:000003a8【注】十六进制"000003a8"或十进制"936"，表示“936 (ANSI/OEM - 简体中文 GBK)”。CMD局域网命令1234567891011121314151617181920212223242526arp -a 列出本网段内所有活跃的IP地址arp -a 加对方IP是查对方的MAC地址arp -s （ip + mac）绑定mac与ip地址arp -d （ip + mac）解绑mac与ip地址net view ——&gt; 查询同一域内机器列表net view /domain ——&gt; 查询域列表net view /domain:domainname —–&gt; 查看workgroup域中计算机列表ipconfig /all ——&gt; 查询本机IP段，所在域等ipconfig /releaseipconfig /renew 重新获取Ip地址telnet ip 端口号：尝试能否打开链接远程主机端口 nbtstat -a 加对方IP查对方的主机名tracert 主机名 得到IP地址netstat -a -nnetstat -an | find “3389”netstat -a查看开启哪些端口netstat -n查看端口的网络连接情况netstat -v查看正在进行的工作netstat -p tcp/ip查看某协议使用情况netstat -s 查看正在使用的所有协议使用情况nbtstat -n 获取NetBIOSnslookup 域名 查询域名对应的ip]]></content>
      <categories>
        <category>Win</category>
      </categories>
      <tags>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7_KVM]]></title>
    <url>%2F2017%2F09%2F18%2FKVM_CentOS%2F</url>
    <content type="text"><![CDATA[有一段时间比较，刚好利用公司有一台空闲的服务器，配置还行，刚好也在学习虚拟化的一些东西。最初从esxi入门，了解了虚拟化产品大概的原理和一些操作。当然对于最重要的功能集群管理，我还没有去研究。于是趁着这台机器还空闲，就试试看kvm的东西。安装kvm前提：需要验证机器是否支持虚拟化，官方文档上是这么说的【主机必须使用支持硬件辅助虚拟化的Intel VT或AMD-V芯片组。】其实整个kvm安装使用的步骤在官方文档都写的很清楚，只是英文理解着比较慢。环境：centos71.验证CPU是否支持KVM123$ grep -E 'vmx|svm' /proc/cpuinfo- vmx is for Intel processors- svm is for AMD processors如果有结果输出，则表示支持。vmx处理器功能标志表示Intel VT芯片组，而svm标志表示AMD-V。2.安装配置kvm及其相关软件12345678910111213141516# 安装kvm及相关软件包$ yum install qemu-kvm kvm libvirt libvirt-python libkvmfs-tools virt-install# 加载kvm模块$ modprobe kvm# 加载特定芯片（cpu）的kvm模块# For the AMD chip (svm flag):$ modprobe kvm-amd# For Intel chip (vmx flag):$ modprobe kvm-intel# 验证内核模块是否加载$ lsmod | grep kvmkvm_intel 200704 0 kvm 589824 1 kvm_intelirqbypass 16384 1 kvm# 启动 libvirtd$ systemctl enable libvirtd.service &amp;&amp; systemctl start libvirtd.service3.网络12345678910111213141516171819# 验证安装的虚拟网卡是否有效$ ip link show virbr0 有输出信息代表可以了官方文档上是这么说的：“你可以使用默认的网络设置，或在主机中设置一个网桥。默认网络只允许来自KVM访客的出站通信。如果KVM访客需要完整的网络访问权限，包括与外部主机的通信，则在主机中设置一个Linux网桥。”# 设置网桥$ cp /etc/sysconfig/network-scripts/ifcfg-eno1 /root/.$ cd /etc/sysconfig/network-scripts/$ cp ifcfg-eno1 ifcfg-br0$ vim ifcfg-br0 #内容如下DEVICE=br0ONBOOT=yesTYPE=Bridge #桥是区分大小写的，必须大写“B”和小写“ridge”。BOOTPROTO=staticNM_CONTROLLED=no #指定网卡不受网络管理员控制。为了使网桥正常工作，Network Manager只能控制一台设备。IPADDR=192.168.2.80NETMASK=255.255.255.0 GATEWAY=192.168.2.1DNS1=119.29.29.29# 网桥里面不应该出现硬件地址，网桥只是充当eno1的扩展。$ systemctl restart network.service两个文件主要配置地方的对比ifcfg-eno1ifcfg-br0DEVICE=eno1DEVICE=br0TYPE=EthernetTYPE=BridgeNM_CONTROLLED=noNM_CONTROLLED=noONBOOT=yesBOOTPROTO=staticIPADDR=192.168.2.80BRIDGE=br0 把eno1和br0连接起来NETMASK=255.255.255.0ONBOOT=yes######3.1.禁用桥接通信中的Netfilter处理：123456$ cat /etc/sysctl.confnet.bridge.bridge-nf-call-ip6tables = 0net.bridge.bridge-nf-call-iptables = 0net.bridge.bridge-nf-call-arptables = 0net.ipv4.ip_forward = 1 #开启网络转发$ sysctl -p4.创建虚拟机关闭SELinux，如果不能关闭，请参考官方文档的做法。1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 有两种方法安装虚拟机①virt-manager: a GUI tool②virt-install: a command line tool.# 创建存储池，虚拟机映像的存放位置$ mkdir /home/kvm/image$ virsh #不加任何参数直接进入交互式控制终端 pool-define-as kvm_pool --type dir --target /home/kvm/image #定义一个存储池绑定目录，如果是lvm卷类型改成logical，还其它的自己查 pool-build kvm_pool #建立存储池 pool-start kvm_pool #启动存储池 pool-list --all #验证该存储池是否启动 pool-autostart kvm_pool #存储池开机自动运行 pool-info kvm_pool #查看存储池信息# 移除存储池$ virsh pool-destroy kvm_pool #销毁存储池 pool-undefine kvm_pool #取消定义存储池 pool-delete kvm_pool #删除存储池# 创建卷$ virsh vol-create-as --pool kvm_pool --name disk0.img --capacity 50G --allocation 1G --format raw# 或者用qemu-img$ qemu-img create -f qcow2 disk0.img 50G# raw和qcow2格式之间的转换$ qemu-img convert -f raw -O qcow2 test.raw test.raw.qcow2# raw格式镜像增加减少大小(qcow2不可以)$ qemu-img resize disk0.img -10G/+10G# 命令安装虚拟机(至少要带的参数有 --name,--ram,--disk/filesystem/nodisk,安装选项)$ virt-install \ --virt-type=kvm \ --name=centos7.0 \ --vcpus=2 \ --memory=2048 \ --location=/home/iso/centos7.iso \ --disk path=/home/kvm/image/centos7.img \ --network bridge:br0 \ --graphics none \ --extra-args="console=ttyS0" \ --force# qemu安装方式$ qemu-system-x86_64 -m 2048 -smp 1 -enable-kvm centos7.img -cdrom /home/iso/centos.iso# 安装的过程出现报错什么的请自己去Google解决。# 克隆导出虚拟机$ virsh dumpxml centos7.0 &gt; /home/kvm/vm-demo.xml$ cp /home/kvm/vm-demo.xml /home/kvm/centos7.0a1.xml# xml文件需要做些修改在以下的几个参数：（name、uuid、镜像地址、MAC地址、）uuid用uuidgen生成# MAC地址生成$ openssl rand -hex 6 | sed 's/..\B/&amp;:/g'# 注册新虚拟机$ virsh define /home/kvm/centos7.0a1.xml4.1虚拟机常用指令（虚拟机=客户机=访客）命令选项virsh connect连接至 KVM 管理程序virsh pool-list –all列出所有的存储池virsh list –all列出本地所有的虚拟主机virsh start kvm_name –console启动不处于活动状态的虚拟主机，并进入控制台virsh autostart kvm_name虚拟主机随宿主机启动而自启动virsh autostart -disable kvm_name禁止虚拟主机随宿主机启动后自启动virsh shutdown kvm_name关闭处于活动状态的虚拟主机virsh reboot kvm_name重启虚拟主机virsh suspend kvm_name暂停虚拟主机virsh resume kvm_name启动暂停的虚拟主机virsh destroy kvm_name强制关闭虚拟主机（类似断电）virsh dumpxml kvm_name显示虚拟主机的当前配置virsh dominfo kvm_name显示虚拟主机信息virsh domid kvm_name显示虚拟主机idvirt-top显示虚拟主机内存CPU使用量virt-df kvm_name显示虚拟主机磁盘的使用量virsh进入虚拟化控制台#####5.选择一款web管理kvm的软件（WebVirtMgr）（可以选择用linux桌面环境用相关的软件管理virt-manger，我也试过这个操作就是点点了，看个人爱好了，我受不了一台服务器有桌面环境，乐意在服务器上捣腾。）1内容比较简单，它在github上面有文档说明。https://github.com/retspen/webvirtmgr/wiki]]></content>
      <categories>
        <category>Virtual</category>
      </categories>
      <tags>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx日志]]></title>
    <url>%2F2017%2F07%2F26%2FNginx_log%2F</url>
    <content type="text"><![CDATA[Ⅰ.日志切割1234#!/bin/bashD=$(data +%Y%M%D)mv /usr/local/nginx/logs/access.log $&#123;D&#125;.logkill -USR1 $(cat /usr/local/nginx/nginx.pid)Ⅱ.日志日常分析1log_formart main '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';1.访问次数最多的前十IP1$ awk '&#123;print $1&#125;' access.log | sort | uniq -c | sort -nr -k1 | head -n 10 #uniq去重之前必须先排序,因为不排序的话,uniq无法去重不连续出现的数,sort加不加参数无所谓,只要排序能将一样的IP集中一起即可2.请求总数1$ wc -l access.log | awk '&#123;print $1&#125;'3.独立IP数1$ awk '&#123;print $1&#125;' access.log | sort | uniq -c | wc -l4.]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hype-v Linux vps在同一物理机上xshell无法ssh]]></title>
    <url>%2F2017%2F07%2F22%2FHype-v_LinuxVps_ssh%2F</url>
    <content type="text"><![CDATA[在Hype-v安装完Linux虚拟机后,无法用物理机上的ssh登录管理Linux.虚拟机需要安装微软提供相关的驱动.下载Linux Integration Services1234567https://www.microsoft.com/en-us/download/details.aspx?id=51612将下载的ISO文件挂载到虚拟机$ mkdir -p /mnt/cdrom$ mount /dev/cdrom /mnt/cdrom$ cd /mnt/cdrom$ ./install.sh进入相关的网卡文件设置固定ip即可hype-v 导出虚拟机12345以管理员身份运行powershell,输入如下命令,VMName为你创建虚拟机的名字$VmName = "CentOS7"$Destination = "F:\vm-export" Stop-VM -Name $VmName Export-VM -Name $VmName -Path $Dstination导入到另一台物理机上的hype-v,复制虚拟机依赖的是$Destination目录下的vhdx格式文件。换一台物理机,开始虚拟机镜像的安装。123456789101112131415161718创建Internal vSwitch，通过PowerShell：$HyperVVirtualSwitchName = "ISInternalSwitch" New-VMSwitch -Name $HyperVVirtualSwitchName -SwitchType Internal Get-NetAdapter | where &#123; $_.Name -Match $HyperVVirtualSwitchName &#125; | New-NetIPAddress -IPAddress "192.168.1.1" -PrefixLength 24 基于导出的CentOS7镜像和vSwitch，创建新的实例。键入PowerShell：$VMName = "CentOS7"$HyperVVirtualSwitchName = "ISInternalSwitch"$VMPath = "F:\vm-import\$VMName"$VHDX = "$VMPath\Virtual Hard Disks\CentOS7-TensorFlow10.vhdx" New-VM -Name $VMName -SwitchName $HyperVVirtualSwitchName -Path $VMPath -VHDPath $VHDX -Generation 1 Start-VM -Name $VMName设置端口转发和开启防火墙。键入Windows批处理命令：netsh interface portproxy delete v4tov4 listenport=22netsh interface portproxy add v4tov4 listenport=22 connectport=22 connectaddress=192.168.1.100netsh advfirewall firewall delete rule name="CentOS_SSH"netsh advfirewall firewall add rule name="CentOS_SSH" protocol=TCP dir=in localport=22 action=allow]]></content>
      <categories>
        <category>Virtual</category>
      </categories>
      <tags>
        <tag>hype-v</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL_backup_]]></title>
    <url>%2F2017%2F07%2F20%2FMySQL_backup%2F</url>
    <content type="text"><![CDATA[开始是纠结mysql做备份的时候要不要给表加锁,加不加锁的依据是什么?查了下资料,综合自己经验看来,加锁是一定没问题的,最保险的做法.但是没搞明白加锁进行备份是仅仅多了一步加锁解锁的步骤还是会影响备份的效率呢!问了一些人,都没怎么关注过这个.记录了一些资料,在做分析1.MySQL备份的几种类型123① 热备份:可以正常读写操作,业务正常进行② 冷备份:不能进行读写操作,数据库需要关闭服务③ 温备份:可以进行读操作,但是不能进行写的操作2.MySQL的几种存储引擎12MyISAM , InnoDB , MEMORY , MERGE , CSV , ARCHIVE 其中MyISAM不支持热备,InnoDB都可以支持.3.MySQL的几种备份工具1234① mysqldump: 支持所有的存储引擎,支持温备,完全,部分,对于InnoDB可以热备.② mysqlhotcopy: 仅支持MyISAM,冷备份.如果表均为MyISAM.可以使用这个② xtrabackup: InnoDB/XtraDB热备,支持完全,增量④ lvm2 snpashot: 热备,使用文件系统管理工具进行备份(1) 用mysqldump备份1234$ mysqldump -uroot -p --single-transaction --databases db1 --tables t1 &gt; /tmp/db1-t1.sql #--single-transaction此选项能实现热备InnoDB表和库,因此不需要同时使用--lock-all-tables;$ mysqldump -uroot -p --lock-all-tables --all-databases &gt; /tmp/bak.sql #备份全部的数据库$ mysqldump -uroot -p --lock-all-tables --databases db1 db2 &gt; /tmp/db1-db2.sql #备份多个数据库$ mysqldump -uroot -p -h=ip1 --databases db1 | mysql -uroot -ppassword -hip2 db2 #ip1机器的db1导入到ip2机器的db2数据库,db2要创建好锁表这一步也可以在mysql终端里面进行1234mysql&gt; flush tables with read lock #刷新锁定全部的库和表.mysql&gt; flush logs; #刷新滚动日志,在锁定表后执行.$ mysqldump -uroot -p --databases db1 &gt; /tmp/db1.sql #起新终端mysql&gt; unlock tablesmysqldump常用的几个参数:123--no-data #只导出表结构不导出数据--lock-tables #对所有表加读锁.(默认开启,-skip-lock-tables来关闭)--lock-all-tables #锁定所有库中的表,通过在整个dump的过程中持有全局读锁来实现,会自动关闭--single-transactionh和--lock-tables]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tcp_bbr]]></title>
    <url>%2F2017%2F07%2F12%2Ftcp_bbr%2F</url>
    <content type="text"><![CDATA[TCP BBR是Google开源的拥塞控制算法,在Linux4.11内核版本上已经进行使用,最低内核要求4.9Debian8/Ubuntu1234$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12.1/linux-headers-4.12.1-041201-generic_4.12.1-041201.201707121132_amd64.deb$ dpkg -i linux-headers-4.12.1-041201-generic_4.12.1-041201.201707121132_amd64.deb$ update-grub$ rebootCentOS 712345678$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm$ yum --enablerepo=elrepo-kernel install kernel-ml -y$ rpm -qa | grep kernel$ rpm -ev #删除旧内核$ egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \'$ grub2-set-default 0 #default 0表示第一个内核设置为默认运行, 选择最新内核就对了$ reboot重新启动后，如果会出现“read-only file system” 的错误，root账户下执行mount -o remount rw / 即可开启BBR1$ uname -r # 查看内核是刚刚安装的版本执行 lsmod | grep bbr，结果中如果没有 tcp_bbr 就先执行12345$ modprobe tcp_bbr$ echo "tcp_bbr" &gt;&gt; /etc/modules-load.d/modules.conf$ echo "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.conf$ echo "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.conf$ sysctl -p执行12$ sysctl net.ipv4.tcp_available_congestion_control$ sysctl net.ipv4.tcp_congestion_control结果如果都有bbr,则内核已开启bbr,]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx平滑升级]]></title>
    <url>%2F2017%2F07%2F12%2FNginx_upgrade%2F</url>
    <content type="text"><![CDATA[查看原来Nginx的编译参数123456$ /data/local/nginx/sbin/nginx -Vnginx version: nginx/1.10.3built by gcc 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC) built with OpenSSL 1.0.1e-fips 11 Feb 2013TLS SNI support enabledconfigure arguments: --prefix=/data/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/data/src/pcre-8.40下载准备升级的源码包12345$ wget -P /data/local/src https://nginx.org/download/nginx-1.12.1.tar.gz$ tar zxf nginx-1.12.1.tar.gz$ ./configure --prefix=/data/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/data/src/pcre-8.40$ make不要执行make install,只需make即可接下来的几步12345$ mv ~/sbin/nginx ~/sbin/nginx.old$ cp ~/src/nginx-1.12.1/objs/nginx /data/local/nginx/sbin/$ nginx -V #查看到最新版本号$ nginx -t #测试下最新版是否正常平滑升级123$ kill -USR2 `cat /data/local/nginx/logs/nginx.pid`$ kill -WINCH `cat /data/local/nginx/logs/nginx.pid.oldbin`$ kill -QUIT `cat /data/local/nginx/logs/nginx.pid.oldbin`Nginx信号123456TERM或INT # 快速停止nginx 指立即停止当前Nginx服务正在处理的所有网络请求，马上丢弃连接，停止工作QUIT # 平缓停止nginx 指允许Nginx服务将当前正在处理的网络请求处理完成，但不再接受新的请求，之后关闭连接，停止工作HUP # 平滑重启 Nginx服务进程接受到信号后，首先读取新的Nginx配置文件，如果配置语法正确，则启动新的Nginx服务，然后平缓关闭旧的服务进程，如果新的Nginx配置文件有问题，将显示错误，仍然使用旧的Nginx进程提供服务USR1 # 重新打开日志文件，常用于日志切割USR2 # 平滑升级 指使用新版本的Nginx文件启动服务，之后平缓停止原有的Nginx进程WINCH # 平缓停止worker process，用于nginx平滑升级]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jenkins]]></title>
    <url>%2F2017%2F07%2F10%2FJenkins%2F</url>
    <content type="text"><![CDATA[Jenkins是基于java语言写的一款，持续集成的web界面管理系统。第一次见过在Linux上这么简单就运行起来的环境(需要有jdk)。直接在官网上下载war包,运行 java -jar jenkins.war1234$ wget -P /opt/jenkins https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.60.1/jenkins.war$ java -jar jenkins.warhttp://ip:8080根据提示就可以初始化完成使用了，可以通过supervisor管理它运行。jdk安装yum install java12345678910$ wget http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm$ rpm -ivh jdk-8u131-linux-x64.rpm$ java -versionjava version "1.8.0_131"Java(TM) SE Runtime Environment (build 1.8.0_131-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)$ rpm -ql|sortjdk1.8.0_131-1.8.0_131-fcs.x86_64 # 能查询到rpm安装的jdk名字$ rpm -ql jdk1.8.0_131-1.8.0_131-fcs.x86_64 # 查询jdk的目录为/usr/java/jdk1.8.0_131 # 在稍后的web几面里面配置相关环境可以填这个路径后续相关待补充……Jenkins wiki参考]]></content>
      <categories>
        <category>CI&amp;CD</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php编译报错]]></title>
    <url>%2F2017%2F07%2F01%2FPhp_make_err%2F</url>
    <content type="text"><![CDATA[PHP重新编译安装报错：configure: error: Cannot find libmysqlclient_r under /data/local/mysqlNote that the MySQL client library is not bundled anymore!php编译参数：1./configure --prefix=/data/local/php --with-config-file-path=/data/local/php/etc --with-apxs2=/data/local/httpd/bin/apxs --with-mysql=/data/local/mysql --with-mysqli=/data/local/mysql/bin/mysql_config --with-pdo-mysql=/data/local/mysql --with-pcre-dir=/data/local/pcre/bin/pcre-config --enable-bcmath --enable-exif --enable-fpm --enable-ftp --enable-gd-native-ttf --enable-inline-optimization --enable-mbstring --enable-opcache --enable-pcntl --enable-pdo_mysql --enable-soap --enable-shmop --enable-sockets --enable-sysvsem --enable-sysvmsg --enable-sysvshm --enable-zip --with-bz2 --with-curl --with-freetype-dir --with-gd --with-gdbm --with-gmp --with-gettext --with-jpeg-dir --with-libxml-dir --with-libdir --with-mhash --with-mcrypt --with-openssl --with-pear --with-png-dir --with-xsl --with-zlib-dir–with-mysql=mysqlnd是不报错的参数原因：我之前搭建的lnmp环境，没有使用httpd，在后来编译APACHE的时候，使用–with-mpm模块，所以就必须在编译MYSQL的时候加上 –enable-thread-safe-client.因为MySQL不能随意停止进行重新编译，怕造成问题故障。可定是不能重新编译MySQL的。查了下这个问题是PHP5.2的一个改进，在PHP5.2.0之前的版本都不需要MYSQL启用安全线程。就找了下其他方法，看到大多数的都是说需要 mysql-devel，这个我之前mysql安装的时候都是有的，包括报错提示的libmysqlclient_r.so在我的目录/dala/local/mysql/lib下都是存在的。但是还是一直报哪个错误，在网上查了好多都是说做个软连或者复制libmysqlclient.so.18.1.0到libmysqlclient_r.so就可以了。我试了很多都不行，包括ln -s lib lib64 。后来直接改了–with-mysql=mysqlnd就OK了。后来想想或许这种也可以–with-mysql -lib-dir=/data/local/mysql/lib在这里记录下httpd的编译参数：1./configure --prefix=/data/local/httpd --with-apr=/data/local/apr/bin/apr-1-config --with-apr-util=/data/local/apr-util/bin/apu-1-config --with-pcre=/data/local/pcre/bin/pcre-config --with-mpm=worker --enable-access-compat --enable-alias --enable-authn-core --enable-authn-file --enable-auth-basic --enable-authz-core --enable-authz-host --enable-authz-user --enable-authz-groupfile --enable-autoindex --enable-cgi --enable-cache --enable-cache-disk --enable-dir --enable-deflate --enable-debugger-mode --enable-env --enable-expires --enable-file-cache --enable-filter --enable-http --enable-headers --enable-log-config --enable-load-all-modules --enable-mime --enable-modules=most --enable-reqtimeout --enable-rewrite --enable-so --enable-setenvif --enable-status --enable-speling --enable-static-support --enable-unixd --enable-version --enable-vhost-alias --enable-mods-shared=all查看nginx编译参数：/data/local/nginx/sbin/nginx -V查看apache编译参数：cat /data/local/httpd/build/config.nice查看mysql编译参数：cat /data/local/mysql/bin/mysqlbug | grep CONFIGURE_LINE查看php编译参数：/data/local/php/bin/php -i | grep configure 或者 php -r “phpinfo();”|grep configure]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[php-fpm进程数问题]]></title>
    <url>%2F2017%2F06%2F22%2FPhp-fpm%2F</url>
    <content type="text"><![CDATA[针对nginx+php-fpm在使用的过程中php-fpm进程数不释放内存给系统导致内存报警的问题，本来应该是通过优化相关配置文件去调节的，但配置文件已经调优了，需要一段时间等待观察。就用种简单粗暴的办法脚本判断内存空余通过crontab定时脚本来重启php-fpm,这样也可以达到释放内存的目的.但是网站如果访问量不稳定的出现,这种办法就不是很有效了.所以还是需要研究下配置文件的相关调优.配置文件相关:php-fpm.conf12pm.max_request 该值是指发送多少个请求后会重启改线程.pm.max_chlidren 每次php-fpm会建立多少个进程.ulimit值的配置1234567891011121314151617$ ulimit -a 查看所有限制值-t: cpu time (seconds) unlimited-f: file size (blocks) unlimited-d: data seg size (kbytes) unlimited-s: stack size (kbytes) 10240-c: core file size (blocks) 0-m: resident set size (kbytes) unlimited-u: processes 62794-n: file descriptors 51200 系统对每一个进程打开文件描述符的数量-l: locked-in-memory size (kb) 64-v: address space (kb) unlimited-x: file locks unlimited-i: pending signals 62794-q: bytes in POSIX msg queues 819200-e: max nice 0-r: max rt priority 0$ vim /etc/security/limits.conf 修改ulimit -n 值的大小,php-fpm里面的rlimit值和该值大小相等即可.参考文章: http://t.cn/RzlwzM5]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php-fpm</tag>
        <tag>ulimit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python多版本管理]]></title>
    <url>%2F2017%2F06%2F16%2FPython_manag%2F</url>
    <content type="text"><![CDATA[Python多版本共存管理之pyenv一般的系统都是自带2.*版本,有时候部署一些程序又需要用到3.x的，比如jumpserver就是需要3.5.x及以上的。所有Python需要用到多版本共存。1.安装pyenv12345$ git clone https://github.com/pyenv/pyenv.git ~/.pyenv$ echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.bash_profile$ echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.bash_profile$ echo 'eval "$(pyenv init -)"' &gt;&gt; ~/.bash_profile$ exec $SHELLZsh note: Modify your ~/.zshenv file instead of ~/.bash_profile.例如像我使用的oh_my_zsh的就需要注意这个.Ubuntu and Fedora note: Modify your ~/.bashrc file instead of ~/.bash_profile.2.Upgrading pyenv12345678$ cd $(pyenv root)$ git pull#升级到指定的版本$ cd $(pyenv root)$ git fetch$ git tagv0.1.0$ git checkout v0.1.0安装Python的依赖包在安装Python时需要首先安装其依赖的其他软件包，已知的一些需要预先安装的库如下。在CentOS/RHEL/Fedora下:1234$ yum install readline readline-devel readline-static$ yum install openssl openssl-devel openssl-static$ yum install sqlite-devel$ yum install bzip2-devel bzip2-libs对付pyenv默认下载慢的问题12v=3.5.2|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v #V是版本号,去Sohu镜像站点下载.export PYTHON_BUILD_MIRROR_URL="http://pyenv.qiniudn.com/pythons/" #或者使用这个七牛的镜像站点,但是好多新版本没有.]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zentao apache改用nginx]]></title>
    <url>%2F2017%2F06%2F08%2Fzentao_nignx%2F</url>
    <content type="text"><![CDATA[zentao是一套还不错的项目管理系统，有开源的版本。最开始部署的一台服务器是用的apache，后来种种原因，需要迁移到另外一台机器上，新机器的php是用nginx的，一直对nginx比较好感，所以也不打算用httpd配置zentao。由于对zentao的安装和配置不熟悉，整了老久。后来google了下，查到了一些问题所在。就记录下。好记性不如烂笔头啊。1.禅道的配置信息（注意修改requestType使用的方式）123456789101112131415root@intel ~ $ cat /data/www/zentao/config/my.php&lt;?php$config-&gt;installed = true;$config-&gt;debug = false;$config-&gt;requestType = 'GET'; //nginx使用的方式，nginx不支持使用pathinfo方式路由$config-&gt;requestType = 'PATH_INFO'; //apache使用的方式$config-&gt;db-&gt;host = '192.168.2.100';$config-&gt;db-&gt;port = '3306';$config-&gt;db-&gt;name = 'zentao';$config-&gt;db-&gt;user = 'zentao';$config-&gt;db-&gt;password = 'zentao';$config-&gt;db-&gt;prefix = 'zt_';$config-&gt;webRoot = getWebRoot();$config-&gt;default-&gt;lang = 'zh-cn';$config-&gt;mysqldump = '';2.nginx配置文件1234567891011121314151617181920212223242526272829root@intel ~ $ cat /data/local/nginx/conf/vhost/zentao.confserver &#123; listen 80; server_name zentao.test.com; index index.html index.php; root /data/www/zentao/www; access_log /data/logs/$SERVER_NAME.access.log main; error_log /data/logs/zentao.test.org.error.log error; location / &#123; root /data/www/zentao/www; client_max_body_size 50m; index index.php index.html; if (!-e $request_filename) &#123; rewrite ^/(.*)$ /index.php/$1 last; break; &#125; &#125; location ~ \.php$ &#123; root /data/www/zentao/www; fastcgi_index index.php; fastcgi_pass 127.0.0.1:9000; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param SCRIPT_NAME $fastcgi_script_name; &#125; &#125;]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>zentao</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dns_Server-Bind]]></title>
    <url>%2F2017%2F06%2F07%2Fbind%2F</url>
    <content type="text"><![CDATA[需求：公司地址迁移，原来内部测试服务器用的是某百兆企业路由器做的DNS重定向。新地址用的是五百兆宽带，弃用了原来的路由器，换了新的千兆，但是没有DNS重定向功能，于是就在测试服务器本身搭建DNS服务，提供内网自定义域名解析。系统： centos6.8ip地址：192.168.1.100dns软件：bind域名：test88.tt1.安装12$ yum install bind$ yum install bind-chroot2.修改配置文件1234567891011121314151617181920212223242526272829303132333435363738394041424344$ cp /etc/named.conf /etc/named.conf.bak #先备份原配置文件$ vim /etc/named.conf//// named.conf//// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS// server as a caching only nameserver (as a localhost DNS resolver only).//// See /usr/share/doc/bind*/sample/ for example named configuration files.//options &#123; listen-on port 53 &#123; any; &#125;; //53为dns监听端口，any代表监听所以主机。 listen-on-v6 port 53 &#123; ::1; &#125;; //属于ipv6 directory "/var/named"; dump-file "/var/named/data/cache_dump.db"; statistics-file "/var/named/data/named_stats.txt"; memstatistics-file "/var/named/data/named_mem_stats.txt"; allow-query &#123; any; &#125;; //对DNS服务器提出查询请求。any代表任何人 recursion yes; dnssec-enable yes; dnssec-validation yes; /* Path to ISC DLV key */ bindkeys-file "/etc/named.iscdlv.key"; managed-keys-directory "/var/named/dynamic";&#125;;logging &#123; channel default_debug &#123; file "data/named.run"; severity dynamic; &#125;;&#125;;zone "." IN &#123; type hint; file "named.ca";&#125;;include "/etc/named.rfc1912.zones";include "/etc/named.root.key";3.自定义域名解析配置12345678910111213$ vim /etc/named.rfc1912.zones //添加域//正向域zone "test88.tt" IN &#123; type master; file "test88.tt.zone"; allow-update &#123; none; &#125;;&#125;;//反向域zone "1.168.192.in-addr.arpa" IN &#123; type master; file "1.168.192.arpa"; allow-update &#123; none; &#125;;&#125;;4.自定义test88.tt.zone和1.168.192.arpa文件test88.tt.zone12345678910111213141516$ cd /var/named/$ cp -a named.localhost test88.tt.zone$ vim test88.tt.zone$TTL 86400@ IN SOA ns.test88.tt. rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum@ IN NS ns.test88.tt.ns IN A 192.168.2.100www IN A 192.168.2.100mail IN A 192.168.2.115zentao IN A 192.168.2.100wiki IN A 192.168.2.1001.168.192.arpa12345678910111213$TTL 86400@ IN SOA test88.tt. rname.invalid. ( 0 ; serial 1D ; refresh 1H ; retry 1W ; expire 3H ) ; minimum IN NS @ IN A 127.0.0.1100 IN PTR www.test88.tt.100 IN PTR mail.test88.tt.100 IN PTR zentao.test88.tt.100 IN PTR wiki.test88.tt.5.修改DNS配置12345$ vim /etc/resolv.conf# Generated by NetworkManagernameserver 192.168.2.100nameserver 192.168.2.1$ service named start6.修改客户端机器的DNS为192.168.2.100服务器防火墙开放53端口udp和tcp均要，关闭selinux。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>dns</tag>
        <tag>bind</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IP地址分类]]></title>
    <url>%2F2017%2F06%2F01%2Fip_addr%2F</url>
    <content type="text"><![CDATA[一、IP包头ip包头固定长度180位（bit）= 20字节二、ip地址分类网络类别最大网络数IP地址范围最大主机数私有地址范围A126=2^7-21.0.0.0~126.255.255.2552^24-210.0.0.0~10.255.255.255B16384=2^14128.0.0.0~191.255.255.2552^16-2172.16.0.0.~172.31.255.255C2097152=2^21192.0.0.0~223.255.255.2552^8-2192.168.0.0~192.168.255.255DE127.0.0.1代表电脑本机地址。A类地址，第一位数代表网段；B类地址，前两段位数代表网段；C类地址，前三段位数代表网段。不同网段之间的访问需要通过路由。私有地址可以在局域网内使用，不能被公网直接访问。例如192.168.0.1二进制十进制00000000.00000000.00000000.000000000.0.0.011111111.11111111.11111111.11111111255.255.255.255]]></content>
      <categories>
        <category>None</category>
      </categories>
      <tags>
        <tag>ip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx负载均衡]]></title>
    <url>%2F2017%2F05%2F23%2FNginx_LB%2F</url>
    <content type="text"><![CDATA[Nginx几种负载均衡算法1.轮询(默认)每个请求按时间顺序逐一分配到不同的后端服务器,如果后端某台服务器宕机,故障系统被自动删除,是用户访问不受影响.2.weight(按权值轮询)weight值越大,分配到的访问机率越高,主要用于后端每个服务器性能不均的情况下.3.ip_hash每个请求按访问的ip的hash结果分配,这样来自同一个IP的访客固定访问一个后端服务器,有效解决了动态网页存在session共享问题.4.fair一个更加智能的负载均衡算法,可以依据页面大小和加载时间长短智能地进行负载均衡,也就是根据后端服务器的响应时间来分配请求,响应时间段的优先分配.5.url_hash按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,可以进一步提高后端缓存服务器的效率.6.least_conn最少连接负载均衡算法,每次选择的server都是当前最少连接的一个server.配置负载均衡,使用upstream模块.123456789101112131415161718192021user www;worker_processes 4;events&#123; worker_connections 1024;&#125;http&#123; upstream server &#123; ip_hash; server 192.168.1.1 weight=3; server 192.168.1.2 weight=1; server 192.168.1.3 down; server 192.168.1.4 backup; server 192.168.1.5 max_fails=3 fail_timeout=60s; &#125; server &#123; listen 80; location / &#123; proxy_pass http://server; &#125; &#125;&#125;upstream支持的状态参数down 当前的server暂时不参与负载均衡.backup 预留的备份机,当其他所有的非backup机出现故障或者忙碌时,才去访问backup机.max_fails 允许请求访问失败的次数,默认为1proxy_next_upstream 模块自定义的错误fail_timeout max_fails次数之后,暂停服务的时间.两者可以同时使用.注: 当负载均衡调度的算法为ip_hash时,后端服务器在负载均衡调度中的状态不可以是weight和 backup]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>lb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git_ssh]]></title>
    <url>%2F2017%2F05%2F22%2Fgit_ssh%2F</url>
    <content type="text"><![CDATA[记录:同台电脑多github账号使用1234567891011121314151617181920212223$ ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_github -C "yourname@email.com"$ ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_gitlab -C "myname@email.com"$ eval $(ssh-agent -s)$ ssh-add ~/.ssh/id_rsa_github$ ssh-add ~/.ssh/id_rsa_gitlab$ cd ~/.ssh$ vim config#账号一Host github.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsa_github#账号二Host gitlab.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsa_gitlab$ ssh -T git@github.comHi xxx! You've successfully authenticated, but GitHub does not provide shell access.$ ssh -T git@gitlab.comHi xxx! You've successfully authenticated, but GitHub does not provide shell access.git-config12345$ git config --global user.name "John Doe"$ git config --global user.email johndoe@example.com$ git config --global core.editors vim$ git config --global merge.tool vimdiff$ git config --global color.diff.meta "blue black bold"]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[序列化和反序列化]]></title>
    <url>%2F2017%2F05%2F18%2F%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%2F</url>
    <content type="text"><![CDATA[序列化和反序列化的概念序列化 : 对象转换为字节序列的过程.反序列化 : 字节序列恢复为对象的过程对象队序列化使用场景:①把对象的字节序列永久地保存到硬盘上, 通常存放在一个文件中.②在网络上传送对象的字节序列.]]></content>
      <categories>
        <category>None</category>
      </categories>
      <tags>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nmap扫描]]></title>
    <url>%2F2017%2F05%2F18%2FNmap%2F</url>
    <content type="text"><![CDATA[1. 获取远程主机的系统类型及开放的端口1234567891011$ nmap -sS -P0 -sV -O &lt;target&gt; &lt;target&gt;可以为ip/主机名/域名/-sL 列表扫描-sT TCP端口扫描-sS TCP同步(SYN)端口扫描半开放隐身扫描-sU UDP端口扫描-sP Ping扫描-P0 允许关闭ping进行扫描-sV 打开系统版本检测-O 尝试识别远程主机OS-A 打开操作系统指纹和版本检测-v 输出详细扫描情况2.列出开放了指定端口的主机列表1nmap -sT -p 80 -oG3.寻找所有在线主机1nmap -sP 192.168.0.0/24]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sed]]></title>
    <url>%2F2017%2F05%2F17%2Fsed%2F</url>
    <content type="text"><![CDATA[一、sed简介sed命令a : 新增， a 的后面可以接字串，而这些字串会在新的一行出现（目前的下一行）。c : 取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行。d : 删除，d 后面通常不接任东西。i : 插入， i 的后面可以接字符串，而这些字符串会在新的一行出现（目前的上一行）。p : 列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行。s : 取代，可以直接进行取代的工作！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是。sed选项-e : 多点编辑，-e script指定的script来处理输入的文本文件。-n : 仅显示script处理后的结果(经过sed处理的一行或者动作才会被列出来的)。-f : -f scriptfile，指定的script文件来处理输入的文本文件。-i : 直接修改读取的文件内容，而不是直接输出到终端。基础正则表达式字符作用实例^匹配行开头。/^me/ 匹配所有以me开头的行$匹配行结尾。/me$/ 匹配所有以me结尾的行.匹配单个字符/m…e/ 匹配包含字母m,后跟三个任意字符，且再跟字母e的行*匹配单个或多个前导字符/me*/ 匹配包含字母me,后面跟多个或零个e字母的行[]匹配指定字符组内的任一字符/[mM]e/ 匹配包含me或者Me的行&amp;保存查找串s/me/**&amp;**/ 符号&amp;代表查找串。me将被替换为**me**\&lt;匹配词首/\&lt;me/ 匹配以me为首的词\&gt;匹配词尾/\&gt;me/ 匹配以me结尾的词x{m\}匹配连续m个x/A\{4}/ 匹配包含连续4个A的行x\{m,\}匹配至少m个x/A\{5,\}/ 匹配包含至少连续4个A的行x\{m,n\}匹配至少m个，但不超过n个x/A\{4,8\}/ 匹配包含连续4到8个A的行sed如果用到了字符实体本身是属于sed命令选项的，需要用反斜杠 \ 进行转义1.删除文件每行的第二个字符12$ sed -nr 's/.//2' file$ sed -nr 's/(.)(.)(.*)/\1\3/p' file2.删除文件每行倒数的第二个字符1$ sed -nr 's/(.*)(.)(.)/\1\3/p' file3.打印文件空行的行号1$ sed -n '/^$/=' file]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>sed</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx_https]]></title>
    <url>%2F2017%2F05%2F12%2FNginx_ss%2F</url>
    <content type="text"><![CDATA[首先简述下什么是https, 还有自己对https的理解.https可以可以理解为http+ssl. http就是我们常用到超文本传输协议了.ssl就是一种数字证书, 使用secure socket layer 协议在浏览器和web服务器之间建立一条安全的通道,从而实现数据在传输的时候加密.我们可以自己模拟这个证书颁发和使用的过程,更好理解https协议.123$ yum install openssl -y$ openssl genrsa -aes256 -out ca.key 2048$配置https在配置文件信息server block块中,必须使用监听命令listen的SSL参数和定义服务器证书文件和私钥文件,如下所示:1234567891011server &#123; listen 443 ssl; server_name www.example.com; # 证书文件 ssl_certificate www.example.com.crt; # 私钥文件 ssl_certificate_key www.example.com.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; ...&#125;根据nginx官网配置https的文档说明,https server优化有这么一段话,我翻译了如下:SSL操作会消耗额外的CPU资源,在多核处理器系统上会有多个工作进程被运行,不低于可用的CPU核心数量.最大的CPU消耗阶段集中在SSL握手通讯.有两种方式去最小化每个客户端的操作量:第一种是开启keepalive连接通过一个连接去发送多个请求;第二种是重用SSL会话参数,以避免SSL握手和后续连接.会话存储在共享在一个工作人员的SSL会话缓存中，并有ssl_session_cache指令配置。一兆字节的缓存包含4000个会话。默认缓存超时5分钟。通过使用ssl_session_timeout指令来增长。这里是一个简单的例子配置优化一个10兆直接共享会话缓存的多核系统。1234567891011121314151617&gt;worker_processes auto;&gt;&gt;http &#123;&gt; ssl_session_cache shared:SSL:10m;&gt; ssl_session_timeout 10m;&gt;&gt; server &#123;&gt; listen 443 ssl;&gt; server_name www.example.com;&gt; keepalive_timeout 70;&gt;&gt; ssl_certificate www.example.com.crt;&gt; ssl_certificate_key www.example.com.key;&gt; ssl_protocols TLSv1 TLSv1.1 TLSv1.2;&gt; ssl_ciphers HIGH:!aNULL:!MD5;&gt; ...&gt;使用HSTS策略强制浏览器使用https链接HSTS( http strict transport security), 强制要求蓝蓝器总是通过https来访问一个https网站.在nginx配置文件加上以下信息就可以:1add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;preload" always;max-age : 设置单位时间内强制使用https链接.includeSubDomains : 可选, 所有子域名同时生效.preload : 可选, 非规范值 , 用于定义使用 HSTS预加载列表.always : 可选 ,保证所有响应都发送此响应头,包括各种内置错误响应.加强https安全性]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>https</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Redis]]></title>
    <url>%2F2017%2F05%2F06%2FRedis%2F</url>
    <content type="text"><![CDATA[下载，提取和编译Redis：1234$ wget http://download.redis.io/releases/redis-3.2.9.tar.gz$ tar xzvf redis-3.2.9.tar.gz$ cd redis-3.2.9$ make编译的二进制文件在src目录中可使用，运行：1$ src/redis-server也可以使用内置客户端与Redis交互：12345$ src/redis-cliredis&gt; set foo barOKredis&gt; get foo"bar"设置连接密码验证12345678127.0.0.1:6379&gt; CONFIG GET requirepass1) "requirepass"2) ""127.0.0.1:6379&gt; config set requirepass "password"127.0.0.1:6379&gt; GET foo(error) NOAUTH Authentication required.127.0.0.1:6379&gt; auth "password"OK登录远程服务器执行命令1$ redis-cli -h host -p port -a password查看redis信息1127.0.0.1:6379&gt; info]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iRedMail_nginx]]></title>
    <url>%2F2017%2F05%2F04%2FiRedMail_Nginx%2F</url>
    <content type="text"><![CDATA[Nginx配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150upstream php_workers &#123; server unix:/var/run/php-fpm/php-fpm.socket;&#125;# HTTPserver &#123; # Listen on ipv4 listen 80; # Listen on ipv6. # Note: this setting listens on both ipv4 and ipv6 with Nginx release # shipped in some Linux/BSD distributions. #listen [::]:80; server_name cyoncan.vicp.cc; root /var/www/roundcubemail; index index.php index.html index.htm; location / &#123; root /var/www/roundcubemail; &#125; # Normal PHP scripts location ~ \.php$ &#123; include fastcgi_params; fastcgi_pass php_workers; fastcgi_param SCRIPT_FILENAME /var/www/roundcubemail$fastcgi_script_name; &#125; # Redirect webmail/SOGo/iredadmin to HTTPS # location ~ ^/ &#123; rewrite ^ http://$host$request_uri?; &#125; location ~* ^/sogo &#123; rewrite ^ https://$host/SOGo; &#125; location ~ ^/iredadmin &#123; rewrite ^ https://$host$request_uri?; &#125; # Deny all attempts to access hidden files such as .htaccess. location ~ /\. &#123; deny all; &#125; # Handling noisy favicon.ico messages location = ^/favicon.ico &#123; access_log off; log_not_found off; &#125;&#125;# HTTPSserver &#123; listen 443; server_name cyoncan.vicp.cc; ssl on; ssl_certificate /etc/pki/tls/certs/iRedMail.crt; ssl_certificate_key /etc/pki/tls/private/iRedMail.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Fix 'The Logjam Attack'. ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA; ssl_prefer_server_ciphers on; ssl_dhparam /etc/pki/tls/dhparams.pem; index index.php index.html index.htm; location / &#123; root /var/www/html/; &#125; # Deny all attempts to access hidden files such as .htaccess. location ~ /\. &#123; deny all; &#125; # Handling noisy favicon.ico messages location = ^/favicon.ico &#123; access_log off; log_not_found off; &#125; # Roundcube webmail location ~ ^/mail(.*)\.php$ &#123; include fastcgi_params; fastcgi_pass php_workers; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME /var/www/roundcubemail$1.php; &#125; location ~ ^/mail(.*) &#123; alias /var/www/roundcubemail$1; index index.php; &#125; location ~ ^/(bin|SQL|README|INSTALL|LICENSE|CHANGELOG|UPGRADING)$ &#123; deny all; &#125; # Normal PHP scripts location ~ \mail\.php$ &#123; include fastcgi_params; fastcgi_pass php_workers; fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name; &#125; # iRedAdmin: static files under /iredadmin/static location ~ ^/iredadmin/static/(.*)\.(png|jpg|gif|css|js) &#123; alias /var/www/iredadmin/static/$1.$2; &#125; # iRedAdmin: Python scripts location ~ ^/iredadmin(.*) &#123; rewrite ^/iredadmin(/.*)$ $1 break; include uwsgi_params; uwsgi_pass unix:/var/run/uwsgi_iredadmin.socket; uwsgi_param UWSGI_CHDIR /var/www/iredadmin; uwsgi_param UWSGI_SCRIPT iredadmin; uwsgi_param SCRIPT_NAME /iredadmin; &#125; # iRedAdmin: redirect /iredadmin to /iredadmin/ location = /iredadmin &#123; rewrite ^ /iredadmin/; &#125; # SOGo location ~ ^/sogo &#123; rewrite ^ https://$host/SOGo; &#125; location ~ ^/SOGO &#123; rewrite ^ https://$host/SOGo; &#125; # For IOS 7 location = /principals/ &#123; rewrite ^ https://$server_name/SOGo/dav; allow all; &#125; location ^~ /SOGo &#123; proxy_pass http://127.0.0.1:20000; #proxy_redirect http://127.0.0.1:20000/SOGo/ /SOGo; # forward user's IP address #proxy_set_header X-Real-IP $remote_addr; #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #proxy_set_header Host $host; proxy_set_header x-webobjects-server-protocol HTTP/1.0; #proxy_set_header x-webobjects-remote-host 127.0.0.1; #proxy_set_header x-webobjects-server-name $server_name; #proxy_set_header x-webobjects-server-url $scheme://$host; &#125; location ^~ /Microsoft-Server-ActiveSync &#123; proxy_pass http://127.0.0.1:20000/SOGo/Microsoft-Server-ActiveSync; proxy_redirect http://127.0.0.1:20000/Microsoft-Server-ActiveSync /; &#125; location ^~ /SOGo/Microsoft-Server-ActiveSync &#123; proxy_pass http://127.0.0.1:20000/SOGo/Microsoft-Server-ActiveSync; proxy_redirect http://127.0.0.1:20000/SOGo/Microsoft-Server-ActiveSync /; &#125; location /SOGo.woa/WebServerResources/ &#123; alias /usr/lib64/GNUstep/SOGo/WebServerResources/; &#125; location /SOGo/WebServerResources/ &#123; alias /usr/lib64/GNUstep/SOGo/WebServerResources/; &#125; location ^/SOGo/so/ControlPanel/Products/([^/]*)/Resources/(.*)$ &#123; alias /usr/lib64/GNUstep/SOGo/$1.SOGo/Resources/$2; &#125;&#125;]]></content>
      <categories>
        <category>Mail</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VPN]]></title>
    <url>%2F2017%2F05%2F03%2FShadowsocksr%2F</url>
    <content type="text"><![CDATA[本来不想写这个文档的,过程很简单,之前弄过几次,最近一个梯子快过期了,又找了台非常实惠的vps,准备重新弄个,又是到处找教程,弄来弄去的,想想还是自己记录下过程吧,自己写自己也看得比较明白方便以后自己看.推荐购买vultr和linode.通常两种方式上VPN : PPTP和shadowsocks , Linux一般各个发行版本之间的配置类似,我用过Debian7/8和centos6/7, 如果是纯fq推荐使用debianPPTP拨号方式1.检测系统环境,满足以下三条检测,否则装pptp无效,可以去装openVPN1234567# 查看内核是否支持MPPE,显示ok表明通过.否则需要安装kernel-devel➜ ~ modprobe ppp-compress-18 &amp;&amp; echo OK# 执行下面两条命令,得到响应结果和下面的一样.就可以接下面的步骤安装PPTP➜ ~ cat /dev/ppp 检测是否开启ppp支持cat: /dev/ppp: No such device or address➜ ~ cat /dev/net/tun 检测是否开启net/tun支持cat: /dev/net/tun: File descriptor in bad state2.安装相应组件,关闭SELinux(一般都默认关闭,否则手动关闭)1234➜ ~ yum install epel➜ ~ yum makecache fast➜ ~ yum -y install ppp➜ ~ yum -y install pptpd3.编辑相关配置1234➜ ~ vim /etc/pptpd.conf # 去掉末尾的这两行注释,有说明,如果该地址段与内网地址有冲突,需要把这里的改下. localip 192.168.0.1 remoteip 192.168.0.234-238,192.168.0.2451234➜ ~ vim /etc/ppp/options.pptpd# 修改ms-dns字段ms-dns 8.8.8.8ms-dns 8.8.4.44.设置VPN拨号账号密码1234➜ ~ vim /etc/ppp/chap-secrets# 按照给你的格式去写# client server secret IP addresshello pptpd helloworld *5.修改内核参数12345➜ ~ vim /etc/sysctl.conf# 在末尾添加一下或者取消现有的注释net.ipv4.ip_forward=1# 运行下面的命令使之生效➜ ~ sysctl -p6.放行服务端口或者直接关了防火墙123# centos7是这么添加的,其他版本Linux参考百度➜ ~ firewall-cmd --zone=public --add-port=80/tcp --permanent➜ ~ firewall-cmd --reloadshadowsocks可以参考shadowsocks的GitHub文档,非常非常的详细,我就不写了,自己每次用也是看这个,GitHub上去搜索shadowsocks仓库,注意shadowsocks有多种语言版本,c语言版本一般是首选,至于为什么呢!下面贴几条网上普遍认可的,但是他默认并不支持多用户,python版本go版本都是可以支持一个配置文件多用户的.也可以直接上python版的就好了.c语言版本:体积小巧。静态编译并打包后只有 100 KB。高并发。基于 libev 实现的异步 I/O，以及基于线程池的异步 DNS，同时连接数可上万。低资源占用。几乎不占用 CPU 资源，服务器端内存占用一般在 3MB 左右。c语言版本,多用户配置:假如我有以下这三个用户(端口),每个用户(端口)独立一个配置文件./etc/shadowsocks-libev/config8388.json/etc/shadowsocks-libev/config8389.json/etc/shadowsocks-libev/config8390.json通过supervisor进程管理软件,能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启.12345678910111213141516171819202122232425262728293031$ apt-get install supervisor$ echo_supervisord_conf 输出默认配置文件$ echo_supervisord_conf &gt; /etc/supervisord.conf 将输出的默认配置项重定向到自定义的配置文件里面$ vim /etc/supervisord.conf[program:ss8388]command:ss-server -c /etc/shadowsocks-libev/config8388.json -u -Aprocess_name=ss8388redirect_stderr=truestdout_logfile_maxbytes=1MBstdout_logfile_backups=1[program:ss8389]command:ss-server -c /etc/shadowsocks-libev/config8389.json -u -Aprocess_name=ss8389redirect_stderr=truestdout_logfile_maxbytes=1MBstdout_logfile_backups=1[program:ss8390]command:ss-server -c /etc/shadowsocks-libev/config8390.json -u -Aprocess_name=ss8390redirect_stderr=truestdout_logfile_maxbytes=1MBstdout_logfile_backups=1$ supervisorctl -c /etc/supervisord.conf 进入supervisorctl-shell界面&gt;status&gt;start/stop/restart ss8388&gt;reread&gt;update或者下面这种类型$ supervisorctl status通过脚本,相关命令,下面就是简单的命令执行,也可以写成脚本方便管理.1234$ setsid ss-serevr -c /etc/shadowsocks-libev/config8388.json -u -A$ setsid ss-serevr -c /etc/shadowsocks-libev/config8389.json -u -A$ setsid ss-serevr -c /etc/shadowsocks-libev/config8390.json -u -A$ ps -ef | grep ss-server 可以查看到那启动的三个进程查看vps架构类型1234$ yum install virt-what$ virt-whatxenxen-hvmshadowsocksr]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mongodb基础]]></title>
    <url>%2F2017%2F05%2F02%2FMongodb%2F</url>
    <content type="text"><![CDATA[1.安装使用如果是安装2.4/2.6版本的，可以用epel源直接yum install123$ yum install epel-release.noarch$ yum makecache$ yum install mongodb-serevr安装最新版本,使用官方的仓库12345678910$ touch /etc/yum.repos.d/mongodb-org-3.4.repo$ vim /etc/yum.repos.d/mongodb-org-3.4.repo[mongodb-org-3.4]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.4/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc$ yum makecache$ yum install mongodb-org创建数据库目录,启动mongodb12$ mkdir -p /data/db$ mongod --dbpath=/data/db --rest通过可以访问localhost:28017可以访问web用户界面.如果是云服务器,需要打开相应的端口或者是安全组里面的规则官方文档参考2.进入数据库123456789101112131415161718$ mongoMongoDB shell version v3.4.4connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.4Welcome to the MongoDB shell.For interactive help, type "help".For more comprehensive documentation, see http://docs.mongodb.org/Questions? Try the support group http://groups.google.com/group/mongodb-user &gt; show dbsadmin 0.000GBlocal 0.000GB&gt; use localswitched to db local&gt; dblocal&gt;]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ssh安全]]></title>
    <url>%2F2017%2F05%2F01%2Fssh_secure%2F</url>
    <content type="text"><![CDATA[ssh安全配置优化:1.修改ssh默认端口,改成非标准高端端口 (1024~65535)12345$ sysctl -a | grep ip_local_port_range (查看端口范围)net.ipv4.ip_local_port_range = 1024 65000$ vim /etc/syscofnig/iptables (修改防火墙策略ssh 22为自定义端口)$ vim /etc/ssh/sshd_config (修改ssh的端口为自定义端口)$ service sshd restart (重启生效)2.禁止直接用root登录ssh,设置用普通账户ssh,然后切换到root.123$ vim /etc/ssh/sshd_configPermitRootLogin no$ service iptables restart3.指定ssh连接的ip地址1234$ vim /etc/hosts.denysshd:all:deny$ vim /etc/hosts.allowsshd:192.168.2.10:allow4.xshell使用public key登录sshxshell工具&gt;新建用户密钥生成向导,生成一堆密钥,最好填写上加密密码.把公钥传到服务器用户目录下面,可用ftp方式上传1$ cat id_rsa.pub &gt;&gt; authorized_keys (将上传的公钥追加到authorized里面,没有该文件可以新建)这样就可以不用密码去登录了,注意不同的用户使用,都要分别去给不同用户目录下的~/.ssh追加我们xshell传过去的公钥.5.xshell使用Google身份验证器登录123456789101112131415161718$ setenforce 0 关闭SELinux$ yum install libpng libtool pam -y$ yum install qrencode -y$ git clone https://github.com/google/google-authenticator-libpam.git$ cd google-authenticator-libpam$ ./bootstrap.sh$ ./configure$ make$ make install# 复制google 身份验证器pam模块到系统下$ cp /usr/local/lib/security/pam_google_authenticator.so /lib64/security$ vim /etc/pam.d/sshdauth required pam_google_authenticator.so no_increment_hotp$ vim /etc/ssh/sshd_configChallengeResponseAuthentication yes$ systemctl restart ssh.service$ google-authenticator手机上去酷安或者google play上下载Google身份验证器,扫描生成的二维码.xshell登录选择keyboard]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次阿里云RDS MySQL CPU跑满100居高不下的分析]]></title>
    <url>%2F2017%2F04%2F27%2F%E9%98%BF%E9%87%8C%E4%BA%91RDSCPU100%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[这两天呢经常收到MySQL的CPU报警信息,不过我知道原因是PHP在跑一个订单累积返工分的demo.因为已经跑了好几周有了,开始数量少,到现在订单已经五六十万了吧,不是很清楚.但是最近RDS CPU老报警.不过还能回到正常值,昨晚发现CPU满了,还一直不下.重启实例后,于是又正常,今天又开始继续跑单子了.CPU就一直99,登录RDS结合阿里云文档分析了一番,诊断图如下:会话没有截全,共有60左右个吧,都是同一用户,同一数据库,均为select语句根据阿里云文档介绍 RDS CPU 跑满100的分析介绍如下:1.原理：cpu 消耗过大通常情况下都是有慢sql 造成的，这里的慢sql 包括全表扫描，扫描数据量过大，内存排序，磁盘排序，锁争用等待等；2.表现现象：sql 执行状态为：sending data，Copying to tmp table，Copying to tmp table on disk，Sorting result，locked;3.分析原因：用户可以登录到rds，通过show processlist查看当前正在执行的sql，当执行完show processlist后出现大量的语句，通常其状态出现sending data，Copying to tmp table，Copying to tmp table on disk，Sorting result, Using filesort 都是sql有性能问题；A. sending data表示：sql正在从表中查询数据，如果查询条件没有适当的索引，则会导致sql执行时间过长；B. Copying to tmp table on disk：出现这种状态，通常情况下是由于临时结果集太大，超过了数据库规定的临时内存大小，需要拷贝临时结果集到磁盘上，这个时候需要用户对sql进行优化；C. Sorting result, Using filesort：出现这种状态，表示sql正在执行排序操作，排序操作都会引起较多的cpu消耗，通常的优化方法会添加适当的索引来消除排序，或者缩小排序的结果集；执行 show processlist , 或者直接进入RDS &gt;DMS里面使用阿里云的后台管理,生成诊断报告,查看state. 60个左右的查询会话全是sending data,还有下面检测出来的慢SQL下午又了解了下,跑订单的那个任务从昨天开始查询操作了,我不懂业务逻辑上的东西,反正应该可以确定这次引起CPU居高不下的原因应该就是数据库大量的查询,花的时间太长了因为服务器性能也就在这,上图也列出来了,可定不是因为连接数的问题.结合文档来看呢,还是数据库的索引和语句方面需要继续优化.问题找到了交给phper去添加.注：由于查询执行效率低（查询访问表数据行数多）而导致实例 CPU 使用率高是RDS MySQL非常常见的问题。参考:RDS实例CPU超过100%的分析RDS MySQL CPU使用率高情况的原因和解决RDS for MySQL查询缓存 (Query Cache) 的设置和使用MySQL IOPS 使用率高的原因和解决方法]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux内存管理]]></title>
    <url>%2F2017%2F04%2F26%2FLinux_Mem%2F</url>
    <content type="text"><![CDATA[释放内存123456789101112$ sync$ free -m total used free shared buffers cachedMem: 7869 6660 1208 0 741 1174-/+ buffers/cache: 4743 3125Swap: 0 0 0$ echo 1 &gt; /proc/sys/vm/drop_caches #释放 pagecache$ echo 2 &gt; /proc/sys/vm/drop_caches #释放 dentries和inodes$ echo 3 &gt; /proc/sys/vm/drop_caches #释放 pagecache, dentries和inodes# 获取空闲内存$ free -m | grep - | awk -F : '&#123;print $2&#125;' | awk '&#123;print $2&#125;']]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL添加索引]]></title>
    <url>%2F2017%2F04%2F25%2FMySQL_index%2F</url>
    <content type="text"><![CDATA[一.查看索引123mysql&gt; show index from tablename;或mysql&gt; show keys from tablename;Non_unique: 如果索引不能包括重复词,则为0,如果可以则为1.Key_name: 索引的名称Seq_in_index: 索引中的列序列号,从1开始Column_name: 列名称Collation: 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）Cardinality：索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。Sub_part：如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。Packed：指示关键字如何被压缩。如果没有被压缩，则为NULL。Null：如果列含有NULL，则含有YES。如果没有，则该列含有NO。Index_type：用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。Comment：更多评注。查看数据库表中存储引擎的类型1234mysql&gt; show table status from dbname where name='tablename';或者mysql&gt; use dbnamemysql&gt; show table status where name='tablename';二.创建索引原则1. 频繁的作为查询条件的字段应该创建索引2. 唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件3. 非常频繁更新的字段不适合创建索引4.不会出现在where子句中的字段不该创建索引5.最左配原则…eg:i. 在where子句中出现的列, 在join子句中出现的列, 而不是在select关键字后选择列表的列.ii. 索引列的基数越大，索引的效果越好。例如，存放出生日期的列具有不同的值，很容易区分行，而用来记录性别的列，只有M和F,则对此进行索引没有多大用处，因此不管搜索哪个值，都会得出大约一半的行存储引擎对索引类型的支持情况:存储引擎允许的索引类型MyISAMBTREEInnoDBBTREEMEMORY/HEAPHASH,BTREE三.索引语法:123create [unique|fulltext|spatial] index index_name [using index_type] on table_name (index_column_name);alter table table_name index index_name;drop index index_name on table_name;参考:美团点评技术团队-MySQL索引原理及慢查询优化]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件隐藏属性]]></title>
    <url>%2F2017%2F04%2F24%2FLinux%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8F%2F</url>
    <content type="text"><![CDATA[chattr命令用于设置文件的隐藏权限，格式为：“chattr [参数] 文件”。chattr设置文件的隐藏权限，如果要将某个隐藏功能添加到文件，使用+参数，如果要将某个隐藏功能移出文件，使用-参数。常见的隐藏权限包括有：参数作用i将无法对文件进行修改,若对目录设置后则仅能修改子文件而不能新建或删除。a仅允许补充（追加）内容.无法覆盖/删除(Append Only)。S文件内容变更后立即同步到硬盘(sync)。s彻底从硬盘中删除，不可恢复(用0填充原文件所在硬盘区域)。A不再修改这个文件的最后访问时间(atime)。b不再修改文件或目录的存取时间。D检查压缩文件中的错误。d当使用dump命令备份时忽略本文件/目录。c默认将文件或目录进行压缩。u当删除此文件后依然保留其在硬盘中的数据，方便日后恢复。t让文件系统支持尾部合并（tail-merging）。X可以直接访问压缩文件的内容。lsattr命令用于显示文件的隐藏权限，格式为：“lsattr [参数] 文件”。1234567891011$ root@stu  ~  lsattr-------------e- ./readme.txt$ root@stu  ~  chattr +a readme.txt$ root@stu  ~  rm -rf readme.txtrm: cannot remove `readme.txt': Operation not permitted$ root@stu  ~  lsattr readme.txt-----a-------e- readme.txt$ root@stu  ~  chattr -a readme.txt$ root@stu  ~  rm readme.txt$ root@stu  ~  lltotal 0]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux管道符重定向]]></title>
    <url>%2F2017%2F04%2F24%2FLinux_Pip%2F</url>
    <content type="text"><![CDATA[管道符命令“命令A | 命令B” , 就是“将前一个命令原本要输出到屏幕的数据当作是后一个命令的标准输入”123eg:find ./ -name "*.html" | ls -l | wc -l 查找当前目录下html文件有几个.echo "hello" | passwd --stdin root 修改root密码对于输入重定向有这些情况：符号作用命令 &lt; file将file作为命令的标准输入命令 &lt;&lt; 分界符从标准输入中读入，直到遇见“分界符”才停止命令 &lt; file1 &gt; file2将file1作为命令的标准输入并将标准输出到file2对于输出重定向符有这些情况：符号作用命令 &gt; file将标准输出重定向到一个file中（清空原有file的数据）命令 2&gt; file将错误输出重定向到一个file中（清空原有file的数据）命令 &gt;&gt; file将标准输出重定向到一个file中（追加到原有内容的后面）命令 2&gt;&gt; file将错误输出重定向到一个file中（追加到原有内容的后面）命令 &gt;&gt; file 2&gt;&amp;1 或 命令 &amp;&gt;&gt; file将标准输出与错误输出共同写入到file中（追加到原有内容的后面）输入输出都是相对于命令而言]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zabbix搭建]]></title>
    <url>%2F2017%2F04%2F20%2FZabbix%2F</url>
    <content type="text"><![CDATA[zabbix搭建环境: centos6,lnmp,zabbix3.0.8一.web环境安装参考另一篇写lnmp搭建的文章二.zabbix安装搭建tip:在官方的文档上已经有很详细的说明,下面是根据自己的实际情况参照文档安装过程.1.zabbix下载安装选LTS,我下的3.0最新的源码包12345678$ wget -c https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.0.8/zabbix-3.0.8.tar.gz$ tar zxvf zabbix-3.0.8.tar.gz$ groupadd zabbix$ useradd -g zabbix zabbix$ cd zabbix-3.0.8/ $ ./configure --prefix=/data/local/zabbix --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2 --with-openssl$ yum install net-snmp-devel.x86_64 -y (根据实际环境去安装提示缺少的东西,MySQL大部分是因为没有软连接到usr/bin)$ ln -s /data/local/zabbix/sbin/* /usr/sbin/2.创建zabbix数据库,导入数据库123456789101112131415161718$ mysql -uroot -pmysql&gt; create database zabbix character set utf8 collate utf8_bin;mysql&gt; grant all privileges on zabbix.* to zabbix@'localhost' identified by 'passwd';mysql&gt; grant all privileges on zabbix.* to zabbix@'127.0.0.1' identified by 'passwd';或者直接用mysql&gt; grant all privileges on zabbix.* to zabbix@'%' identified by 'passwd';mysql&gt; flush privileges;mysql&gt; quit;$ cd /data/src/zabbix-3.0.8/database/mysql$ mysql -uzabbix -p zabbix &lt; schema.sql 导入zabbix数据库脚本# stop here if you are creating database for Zabbix proxy$ mysql -uzabbix -p zabbix &lt; images.sql$ mysql -uzabbix -p zabbix &lt; data.sql导入数据库另一种方法:$ mysql -uzabbix -pmysql&gt; use zabbix;mysql&gt; source /data/src/zabbix-3.0.8/database/mysql/schema.sql;......3.修改zabbix_server配置文件12345678DBName=zabbix #数据库名称DBUser=zabbix #数据库用户名DBPassword=123456 #数据库密码ListenIP=127.0.0.1 #数据库ip地址Timeout=4AlertScriptsPath=/data/local/zabbix/share/zabbix/alertscriptsExternalScripts=/data/local/zabbix/share/zabbix/externalscriptsLogSlowQueries=30004.创建web目录123mkdir -p /data/web/zabbix.monitor.cncp -a /data/src/zabbix-3.0.8/frontend/php/* /data/web/zabbix.monitor.cn/chown -R www:www zabbix.monitor.cn/5.配置nginx1234567891011121314151617181920212223242526272829303132333435363738vim /data/local/nginx/conf/nginx.conf在server模块外http模块内加入一行include vhost/*.conf:wqcd /data/local/nginx/conf/vhostvim zabbix.confserver &#123; listen 80; server_name 127.0.0.1; index index.html index.php; root /data/web/zabbix.monitor.cn; access_log /data/logs/$SERVER_NAME.access.log main; error_log /data/logs/$SERVER_NAME.log error; location / &#123; fastcgi_index index.php; fastcgi_pass 127.0.0.1:9000; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param SCRIPT_NAME $fastcgi_script_name; &#125; if (!-e $request_filename)&#123; rewrite ^/(.*)$ /index.php/$1 last; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|JPG|xml|json)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 12h; &#125; # access_log m.log access; &#125;6.修改php.ini文件(这个地方债官网上有配置要求说明)123456789101112131415161718192021222324252627282930post_max_size = 32Mmax_execution_time = 300max_input_time = 300date.timezone = Asia/Shanghai以下是我自己的进入zabbi安装检测各个配置参数和模块是否满足zabbix安装要求.如果忘记更改php.ini或者不知道改哪些的,可以进入到安装界面http://zabbix.monitor.cn/setup.php 根据检测结果,再去修改,每次修改可能需要重启nginx和php-fpmPHP version 5.6.30(我用的PHP版本) 5.4.0(zabbix3.0.8要求PHP最低的版本,下面的参数类似要求) OKPHP option "memory_limit" 128M 128M OKPHP option "post_max_size" 32M 16M OKPHP option "upload_max_filesize" 2M 2M OKPHP option "max_execution_time" 300 300 OKPHP option "max_input_time" 300 300 OKPHP option "date.timezone" Asia/Shanghai OKPHP databases support MySQL/SQLite3 OKPHP bcmath on OKPHP mbstring on OKPHP option "mbstring.func_overload" off off OKPHP option "always_populate_raw_post_data" off off OKPHP sockets on OKPHP gd 2.1.0 2.0 OKPHP gd PNG support on OKPHP gd JPEG support on OKPHP gd FreeType support on OKPHP libxml 2.7.6 2.6.15 OKPHP xmlwriter on OKPHP xmlreader on OKPHP ctype on OKPHP session on OKPHP option "session.auto_start" off off OKPHP gettext on OKPHP option "arg_separator.output" &amp; &amp; OK7.启动,进入安装界面12345678910111213$ service nginx start$ service php-fpm start$ zabbix_server 浏览器输入 http://zabbix.monitor.cn/setup.php 域名是之前nginx里面配置好的,或者不用域名用IP和别的端口,域名需要做host映射,或者内网路由器里面做虚拟映射.出现界面下一步,填上MySQL zabbix用户密码一致,下一步,看到绿色congratulation 就安装完成了.默认用户名和密码:admin,zabbix设置zabbix服务开机启动$ cp /data/src/zabbix/misc/init.d/fedora/core/* /etc/init.d/$ vim /etc/init.d/zabbix_server修改BASEDIR你zabbix安装路径chkconfig --add zabbix_serverchkconfig --add zabbix_agentdchkconfig zabbix_server onchkconfig zabbix_agentd on8.客户端安装客户端根据实际情况去使用几种方案,一般机器少的,都是一台server端,几台agent端.方案可以参考:http://t.cn/RXPa0zV1234567./configure --prefix=/usr/local/zabbix --enable-agent --with-opensslmake install其它的设置和前面的安装配置一样,zabbix_agentd.conf Server=ServeripServerActive=ServeripHostname=自定义zabbix客户端hostname,不要和server端配置的hostname一样.tip:将10050,10051端口添加到防火墙,server端也是.agent端需要启动zabbix_agentd服务9.客户端和服务端使用加密传输i. 使用psk共享密钥加密1234567891011Generating PSK在客户端操作$ cd /usr/local/zabbix/$ openssl rand -hex 32 -out zabbix_agentd.psk$ chown zabbix:zabbix zabbix_agentd.psk$ vim /etc/zabbix_agentd.conf TLSConnect=psk TLSAccept=psk TLSPSKFile=/home/zabbix/zabbix_agentd.psk TLSPSKIdentity=PSK 001 service zabbix_agentd restart 回到server机器,在host机器加密那里选择psk,填入信息.ii. 使用证书加密123456789101112131415161718192021222324252627282930313233$ mkdir -p /data/local/zabbix/zabbix_crt$ cd zabbix_crt/#生成ca私钥$ openssl genrsa -aes256 -out ca.key 2048 需要输入给私钥加密的密码#使用ca私钥建立ca证书$ openssl req -new -x509 -nodes -days 1000 -key ca.key -subj /CN=ServerIPorDomainName\ CA/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; ca.crt#生成服务器csr证书请求文件$ openssl req -newkey rsa:2048 -days 1000 -nodes -keyout server.key -subj /CN=ServerIPorDomainName/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; server.csr#使用ca证书与私钥签发服务器证书$ openssl x509 -req -in server.csr -days 1000 -CA ca.crt -CAkey ca.key -set_serial 01 &gt; server.crt#生成客户端csr证书请求文件$ openssl req -newkey rsa:2048 -days 1000 -nodes -keyout client.key -subj /CN=client/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; client.csr#使用ca证书与私钥签发客户端证书$ openssl x509 -req -in client.csr -days 1000 -CA ca.crt -CAkey ca.key -set_serial 01 &gt; client.crt服务端文件位置可以不改变,用scp命令将刚刚生成的客户端需要文件上传到客户端自定义的文件夹 /usr/local/zabbix/zabbix_crt/服务端: ca.crt , server.crt , server.crtvim /data/local/zabbix/etc/zabbix_server.confTLSCAFile=/data/local/zabbix/zabbix_crt/ca.crtTLSCertFile=/usr/local/zabbix/zabbix_crt/server.crtTLSKeyFile=/usr/local/zabbix/zabbix_crt/server.key客户端: ca.crt , client.crt , client.crtTLSConnect=certTLSAccept=certTLSCAFile=/usr/local/zabbix/zabbix_crt/ca.crtTLSCertFile=/usr/local/zabbix/zabbix_crt/client.crtTLSKeyFile=/usr/local/zabbix/zabbix_crt/client.key进入webui configuration/hosts/打开相应的主机/双向都可以选certificate重启zabbix_server和zabbix_agent,再进去看cert是否变蓝色,有延迟几十秒.我记录的文档可能有些不全,希望大家遇到问题多分析日志,去网上搜索遇到的错误信息.]]></content>
      <categories>
        <category>Monitor</category>
      </categories>
      <tags>
        <tag>zabbix</tag>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zabbix配置监控MySQL]]></title>
    <url>%2F2017%2F04%2F20%2FZabbix_MySQL%2F</url>
    <content type="text"><![CDATA[zabbix3.0监控MySQL设置1.Agent端建立一个登陆MySQL用户(步骤参考MySQL笔记)2.在zabbix/etc/下面新建.my.cnf文件1234567891011121314$ find / -name "sock" -print /var/lib/mysql/mysql.sock$ vim /usr/local/zabbix/etc/.my.cnf #zabbix Agent [mysql] host=localhost user=zabbix password=zabbix socket=/var/lib/mysql/mysql.sock [mysqladmin] host=localhost usr=zabbix password=zabbix socket=/var/lib/mysql/mysql.sock3.编辑 userparameter_mysql.conf1234567$ find / -name userparameter_mysql.conf/usr/local/src/zabbix-3.0.8/conf/zabbix-agentd/userparameter_mysql.conf$ cp userparameter_mysql.conf /usr/local/zabbix/etc/zabbix_agentd.conf.d/$ sed -i 's#/var/lib/zabbix#/usr/local/zabbix/etc#g' 或者用 vim编辑该文件替换掉 home 目录为 .my.cnf 所在的目录$ vim /usr/local/zabbix/etc/zabbix/zabbix.agentd.conf 添加一行 Include=/usr/local/zabbix/etc/zabbix_agentd.conf.d/]]></content>
      <categories>
        <category>Monitor</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL基础操作]]></title>
    <url>%2F2017%2F04%2F19%2FMySQL_cmd%2F</url>
    <content type="text"><![CDATA[MySQL创建用户1create user &apos;username&apos;@&apos;%&apos; identified by &apos;passwd&apos;; % 换成localhost或者127.0.0.1,就只能本地登录了.给用户授权123grant all privileges on databasename.tablename to &apos;username&apos;@&apos;hostname&apos; identified by &apos;passwd&apos;with grant option; all代表所有权限,withgrant option代表该用户可以给其他用户也进行授权操作.flush privileges; 授权完成,需要刷新生效.quit;查看mysql有多少个账户1select host,user,password from mysql.user;查看MySQL字符集,排序规则12show variables like &apos;collation%&apos;;show variables like &apos;char%&apos;;查看MySQL版本12① mysql&gt; status;② mysql&gt; select version();查看MySQL使用的存储引擎类型1mysql&gt; show ENGINES;查看MySQL表锁状态12mysql&gt; show status like &apos;tables%&apos;;mysql&gt; show status like &apos;%lock%&apos;;查看MySQL当前使用的数据库123mysql&gt; status;mysql&gt; select database();mysql&gt; show tables;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iptables]]></title>
    <url>%2F2017%2F04%2F15%2Fiptables%2F</url>
    <content type="text"><![CDATA[一、iptables表和链的结构(四表五链)1.四张表处理优先级: raw&gt;mangle&gt;nat&gt;filterraw: 优先级最高, 设置raw一般是为了不再让iptables做数据包的跟踪链接处理, 提高性能.mangle: 用于对特定数据包的修改.nat: 用于nat功能端口或者地址映射.filter: 一般的过滤功能.2.五链：INPUT, FORWARD, OUTPUT, PREROUTING, POSTROUTINGraw表中的链有: PREROUTING, OUTPUTmangle表中的链有: PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTINGnat表中的链有: PREROUTING, POSTROUTING, OUTPUTfilter表中的链有: INPUT, FORWARD, OUTPUT3.iptables常用参数:tip: iptable -h都能看到对应的解释规则增删改查:参数作用-A在规则链的末尾加入新规则-I在规则链的头部加入新规则-D删除-R修改-L查看-P设置默认策略 , iptables -P INPUT DROP-F清空默认规则链-X删除自定义空链-N定义新的规则常用参数:参数作用-p指定协议 tcp/udp/icmp-s指定源地址 ip/mask , 加叹号 “!” 表示相反的意思-d匹配目标地址–sport匹配来源端口号–dport匹配目端口号-i匹配从这块网卡流入的数据-o匹配从这块网卡流出的数据-m加载模块-t指定表, 默认filter表. iptables -L - nat/mangle/raw-j指定处理的动作 , ACCEPT/DROP常用处理动作:动作作用ACCEPT允许封包通过,:将数据包放行,进行完此动作后,不再对比其他规则,直接跳往下一个规则链.DROP丢弃封包,响应超时,对方无法判断主机是否在线或者流量被拒绝,不再对比其他规则,中断过滤.REJECT拒绝封包通过,并将数据包封装,返回消息,对方看到主机口不可达.REDIRECT将包重定向到另一个端口,之后继续对比其他规则.MASQUERADE改写封包来源ip为防火墙NIC ip , 可指定port范围 , 之后跳往下一规则.SNAT改写封包来源ip为某特定ip或ip范围 , 可指定 port 范围 , 之后跳往下一规则.DNAT改写封包目的ip为某特定ip或ip范围, 可指定port范围 , 之后跳往下一规则.二、配置filter表防火墙tip: 一般设置默认规则,INPUT链和FORWARD链为DROP , OUTPUT链为ACCEPT1.清除预设表filter中的所有规则链的规则1iptables -F2.清除预设表filter中使用者自定链中的规则1iptables -X3.设定预设规则123iptables -P INPUT DROPiptables -P OUTPUT ACCEPTiptables -P FORWARD DROP4.根据自己机器的实际情况开启相应端口123456789101112131415161718# 允许回环loopback访问$ iptables -A INPUT -i lo -j ACCEPT$ iptables -A OUTPUT -o lo -j ACCEPT (output链的默认策略设置为DROP时,需要添加这条,以下针对的每个端口同此一样.)#开启22端口,ssh才能登录.$ iptables -A INPUT -p tcp --dport 22 -j ACCEPT$ iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT或者$ iptables -A INPUT -i eth0 -s 192.168.2.100 -p tcp --dport 22 -j ACCEPT #指定eth1网卡和192.168.2.100允许ssh登录$ iptables -A OUTPUT -o eth0 -s 192.168.2.100 -p tcp --dport 22 -j ACCEPT#允许ping(即icmp包通过)$ iptables -A INPUT -p icmp -j ACCEPT$ iptables -A OUTPUT -p icmp -j ACCEPT#使ping域名可以得到响应$ iptables -A INPUT -p udp --sport 53 -j ACCEPT$ iptables -A OUTPUT -p udp --dport 53 -j ACCEPT$ iptables -A INPUT -p udp --dport 53 -j ACCEPT$ iptables -A OUTPUT -p udp --sport 53 -j ACCEPTtip: 除了以上用命令去添加规则,还可以用编辑文件的方式 vim /etc/sysconfig/iptables5.保存iptables配置1service iptables save6.重启iptables服务1service iptables restart7.查看iptables规则1iptables -L -n8.iptables优化:请求比较频繁的放在最上面,请求频率较小的放在最后面.这里整理关于防火墙的东西,不是具体的知识,更多工操作使用,具体的防火墙知识,还需要去阅读参考网上写的各种文章,需要多读多看多试,才能理解深入.]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim常用]]></title>
    <url>%2F2017%2F04%2F10%2Fvim%2F</url>
    <content type="text"><![CDATA[Linux vim常用命令1.替换1234567:s/abc/efg/ 替换当前行,第一个 abc 为 efg:s/abc/efg/g 替换当前行,所有 abc 为 efg:n,$s/xyz/org/ 替换第 n 行开始到最后一行中每一行的第一个 xyz 为 org:n,$s/xyz/org/g 替换第 n 行开始到最后一行中每一行所有 xyz 为 org n 为数字，若 n 为 . ，表示从当前行开始到最后一行:%s/xyz/org/ (等同于:g/xyz/s//org/) 替换每一行的第一个 xyz 为 org:%s/xyz/org/g （等同于:g/xyz/s//org/g）替换每一行中所有 xyz 为 org2.vim执行：wq清楚屏幕上上一次编辑过的内容12vim退出后清屏,屏幕不显示之前编辑的内容.TERM=xterm; export TERM3.删除全部1:%d4.复制123v 进入字符块选择模式↑↓←→ 选择要复制的字符yy 复制5.批量注释（插入）123Ctrl+v 进入矩形块选择，方向键上下选择需要注释列头，I插入//，Esc退出。G 列选择c 块选择，替换]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell]]></title>
    <url>%2F2017%2F04%2F06%2Fshell%2F</url>
    <content type="text"><![CDATA[win2linux1dos2unix unix2dos替换[rename]rename分两个版本,C语言和Perl语言.12345将当前的目录下的所有.txt后缀的文件全部替换成.pycentos$ rename .txt .py *.txtubuntu$ rename 's/\.txt/\.py\' *批量替换文件中的字符串[sed]1$ sed -i 's/str2/str3/g' `grep -rl ./`查找文件名,并替换其中的指定字符.1find /data/www -name "*.php" | xargs sed -i 's/192.168.2.145/127.0.0.1/g'批量修改目录后缀名tip: rename有c版本和Perl版本,使用时请man一下1find ./ -type d -name "*.org"|xargs rename org com查看空闲内存1free -m | grep - | awk -F : '&#123;print $2&#125;' | awk '&#123;print $2&#125;']]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xargs用法]]></title>
    <url>%2F2017%2F03%2F28%2Fxargs%2F</url>
    <content type="text"><![CDATA[理解xargs命令工作原理和使用123⚡ root@intelnet:$ xargs hellohello工作形式: 从标准输入stdin读取数据,根据输入读取执行命令作为参数提供给它一次或多次.输入中的任何空白和空格均视为分隔符,空行被忽略.进入xargs ,进行数据输入, Ctrl+D告诉xargs结束输入任务,echo命令被自动执行,并且再次打印 hello.echo是xargs默认的执行命令,我们可以指定其它命令作为参数传递给xargs , 然后通过stdin传递要查询的文件和类型作为输入的名称.如下:12⚡ root@intelnet:$ xargs find -name "*.log"]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>xargs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP环境配置]]></title>
    <url>%2F2017%2F03%2F27%2FPhp%2F</url>
    <content type="text"><![CDATA[PHP1.编译安装123456789101112131415161718192021222324$ yum -y install gcc automake autoconf libtool make glibc$ cd /data/src$ wget -c http://cn2.php.net/distributions/php-5.5.38.tar.gz$ tar -zxvf php-5.5.38.tar.gz$ cd php-5.5.38$ ./configure --prefix=/data/local/php --enable-fpm(如果这里没有加--enable-fpm, php5.3及以上的内置了php-fpm 可以重新编译加上参数。或者yum install php-fpm,以下供参数参考 configure过程中有提示参数软件未安装的就安装后再configure,或者去除参数:./configure --prefix=/data/local/php --with-config-file-path=/data/local/php/etc --with-mysql=/data/local/mysql --with-mysqli=/data/local/mysql/bin/mysql_config --with-pdo-mysql=/data/local/mysql --with-pcre-dir=/data/local/pcre/bin/pcre-config --enable-bcmath --enable-exif --enable-fpm --enable-ftp --enable-fastCGI --enable-force-CGI-redirect --enable-gd-native-ttf --enable-inline-optimization --enable-mbstring --enable-opcache --enable-pcntl --enable-pdo_mysql --enable-soap --enable-shmop --enable-sockets --enable-sysvsem --enable-sysvmsg --enable-sysvshm --enable-zip --enable-zend-multibyte --with-bz2 --with-curl --with-curlwrappers --with-freetype-dir --with-gd --with-gdbm --with-gmp --with-gettext --with-jpeg-dir --with-libxml-dir --with-libdir --with-mhash --with-mcrypt --with-openssl --with-png-dir --with-pear --with-xsl --with-zlib-dir 附加参数参考 http://t.cn/Ri0WWcq)如果有httpd，可以加上 --with-apxs2=/data/local/httpd/bin/apxs这段参数，避免以后要使用httpd再重新编译php。$ make test$ make install$ cp php.ini-development /data/local/php/etc/php.ini (去目录将cp过去的文件重命 php.ini)$ vim php.ini date.timezone = PRC (或者Asia/Shanghai) magic_quotes_gpc = On (防止SQL注入)$ cp /data/local/php/etc/php-fpm.default.conf php-fpm.conf$ /data/local/php/sbin/php-fpm -R (启动fpm) kill -INT `cat $PATH:php-fpm.pid` 关闭(cat后面输入php-fpm.pid路径) kill -USR2 `cat $PATH:php-fpm.pid` 重启$ ps -ef | grep php-fpm 或者 lsof -i :9000设置php-fpm开机启动：vim /etc/local ,最后一行加入 /data/local/php/sbin/php-fpm 即可2.php-fpm服务启动管理tip: php-fpm service管理使用脚本,根据实情修改对应目录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#!/bin/bash## Startup script for the PHP-FPM server.## chkconfig: 345 85 15# description: PHP is an HTML-embedded scripting language# processname: php-fpm# config: /usr/local/php/etc/php.ini # Source function library.. /etc/rc.d/init.d/functions PHP_PATH=/data/localDESC="php-fpm daemon"NAME=php-fpmDAEMON=$PHP_PATH/php/sbin/$NAMECONFIGFILE=$PHP_PATH/php/etc/php-fpm.confPIDFILE=$PHP_PATH/php/var/run/$NAME.pidSCRIPTNAME=/etc/init.d/$NAME # Gracefully exit if the package has been removed.test -x $DAEMON || exit 0 rh_start() &#123; $DAEMON -y $CONFIGFILE || echo -n " already running"&#125; rh_stop() &#123; kill -QUIT `cat $PIDFILE` || echo -n " not running"&#125; rh_reload() &#123; kill -HUP `cat $PIDFILE` || echo -n " can't reload"&#125; case "$1" in start) echo -n "Starting $DESC: $NAME" rh_start echo "." ;; stop) echo -n "Stopping $DESC: $NAME" rh_stop echo "." ;; reload) echo -n "Reloading $DESC configuration..." rh_reload echo "reloaded." ;; restart) echo -n "Restarting $DESC: $NAME" rh_stop sleep 1 rh_start echo "." ;; *) echo "Usage: $SCRIPTNAME &#123;start|stop|status|restart|reload&#125;" &gt;&amp;2 exit 3 ;;esacexit 03.Nginx配置php-fpm3.1修改nginx.conf,根据里面默认的注释例子修改123456789101112131415161718192021222324252627282930313233343536$ vim /usr/local/nginx/conf/nginx.conf======================================================================================================== #HTTP server server&#123; listen 80; return 444; #server_name localhost; charset utf-8; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; location ~ \.php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 1h; &#125; &#125; inculude vhost/*.conf;========================================================================================================3.2.在conf/vhost/目录下编写配置每一个站点的conf文件,可以拷贝Nginx里面的例子进行修改.]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php-fpm</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL]]></title>
    <url>%2F2017%2F03%2F27%2FMySQL%2F</url>
    <content type="text"><![CDATA[MySQL1.安装Cmake1234567$ yum -y install gcc gcc-c++ make autoconf libtool$ cd /data/src$ wget -c http://www.cmake.org/files/v3.7/cmake-3.7.2.tar.gz$ tar -zxvf cmake-3.7.2.tar.gz$ cd cmake-3.7.2$ ./bootstrap$ make &amp;&amp; make install2.安装MySQL12345678910111213141516171819202122232425262728293031323334353637383940414243444546$ yum -y install gcc gcc-c++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel bison patch unzip libmcrypt-devel libmhash-devel ncurses-devel bzip2 flex libaio-devel$ groupadd mysql$ useradd -r -g mysql -s /sbin/nologin mysql$ wget -c http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.35.tar.gz$ tar mysql-5.6.35.tar.gz$ cd mysql-5.6.35$ cmake -DCMAKE_INSTALL_PREFIX=/data/local/mysql/ -DMYSQL_DATADIR=/data/mysqldb -DMYSQL_TCP_PORT=3306 –enable-thread-safe-client(cmake安装参数参考MySQL官方介绍 http://t.cn/RipwTjB)$ make &amp;&amp; make install$ /data/local/mysql/bin/mysql --version$ cd /data/local/mysql$ chown -R mysql . (更改当前目录(mysql)下所有及子目录属mysql用户.因为是通过root用户进行安装的，权限属于root)$ chgrp -R mysql .$ scripts/mysql_install_db --user=mysql --basedir=/data/local/mysql --datadir=/data/mysqldb(初始化数据库,确保数据库目录和文件为mysql账户拥有,确保以root用户执行mysql_install_db,--basedir --datadir 分别指定MySQL安装目录和数据库目录，根据需求指定或者默认.)$ chown -R root . (改回root或者不改均可)$ chown -R mysql data (data数据库目录必须为mysql账户拥有,如果数据库目录更改也要授予mysql权限. tip：有些系统或者分发MySQL可能不是data，是var之类的.根据实际情况选择)$ cp support-files/mysql.server /etc/init.d/mysqld$ chkconfig --add mysqld (设置开机启动/服务)$ ln -s /data/local/mysql/bin/mysql /usr/sbin$ export PATH=$PATH:/data/local/mysql/bin$ vim /etc/my.cnf [mysqld] datadir=/data/mysqldb socket=/data/mysqldb/mysql.sock user=mysql sql_mode="NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER" character-set-server=utf8mb4 # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 slow_query_log=on slow-query-log-file=/data/mysqldb/slowquery.log long_query_time=0.03 log-queries-not-using-indexes [client] default-character-set = utf8mb4 character-sets-dir=/data/local/mysql/share/charsets [mysqld_safe] log-error=/data/mysqldb/mysqld.log pid-file=/data/mysqldb/mysqld.pid (编辑my.cnf，参考官方文档设置 http://t.cn/Rip42em)$ bin/mysqld_safe --user=mysql &amp;$ bin/mysqladmin -u root password "new passwd" (设置密码,用其它方式参考官方 http://t.cn/R6NhwTv)如果不行,可以使用重置密码的方式:$ service mysqld stop$ /usr/local/mysql/bin/mysqld_safe --skip-grant-tables1234567891011121314$ mysql (去新建一个终端登录)mysql&gt; use mysqlmysql&gt; update user set password=password(&quot;123456&quot;) where user=&quot;root&quot;;mysql&gt; flush privileges;mysql&gt; exit;$ kill mysqld_safe ,启动mysqld , 登录mysql.mysql&gt; grant all privileges on *.* to &apos;root&apos;@&quot;%&quot; identified by &apos;123456&apos; with grant option;mysql&gt; grant all privileges on *.* to &apos;root&apos;@&quot;%&quot; identified by &apos;123456&apos; with grant option;(grant做一个授权,%表示*.*(所有的库和表)允许被远程连接,使用这里指定的用户密码或者指定IP操作mysql,如果是单个数据库授权,dbname.* to username@&quot;%&quot;...)flush privileges;mysql&gt; quit; tip: grant操作需要flush ,注意再操作完成后删除user表中匿名和空用户,或者给他们加上密码.mysql&gt; delete from user where user=&quot;&quot;;# mysql -h localhost 和 mysql -h 127.0.0.1 的区别,通过localhost连接到mysql是使用UNIX socket,通过127.0.0.1连接到mysql是使用TCP/IP.3.MySQL备份(有一个为zentao的数据库)12345678910111213141516171819202122232425262728mysql5.6及以上,使用mysqldump在脚本里面登录数据库,防止报错信息.利用mysql/bin/mysql_config_editor保存 -uroot -p .$ /data/local/mysql/bin/mysql_config_editor set --login-path=dbname --host=127.0.0.1 --user=root --password Enter password: 上面的Enter password后面输入root登录MySQL的密码,即可生成 --login-path=dbname . 下面就可以写入shell脚本.$ vim mysql_backup.sh #!/bin/sh dump=/data/local/mysql/bin/mysqldump backup_dir=/data/backup/mysql/ linux_user=root db_name=zentao days=15 cd $backup_dir date=`date +%Y-%m-%d` backup_sql=$date.sql tar_sql="energy_bak_$date.tar.gz"$ dump --login-path==dbname $db_name --default-character-set=utf8 --opt -Q -R --skip-lock-tables&gt;$backip_sql tar -czf $tar_sql ./$backup_sql rm $backup_sql chown $linux_user:$linux_user $backup_dir/$tar_sql find $backup_dir -name "energy_bak*" -type f -mtime +$days -exec rm &#123;&#125; \; 从压缩备份文件中恢复(.tar.sql)$ gzip &lt; 2017-03-21.sql.tar.gz | mysql -uroot -p zentao 或者:$ zcat 2017-03-21.sql.tar.gz | mysql -uroot -p 从备份文件恢复(.sql)$ mysql -uroot -p zentao &lt; 2017-03-21.sql]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx安装]]></title>
    <url>%2F2017%2F03%2F27%2FNginx_install%2F</url>
    <content type="text"><![CDATA[Nginx1、安装编译工具及相关库1$ yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel2、安装PCRE(作用让Nginx支持Rewrite),下载PCRE安装包，Google搜索下12345678$ cd /data/src$ wget -c https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz$ tar -zxvf pcre-8.40.tar.gz$ cd pcre-8.40$ ./configure$ Make&amp;&amp;make install$ pcre-config --version (查看pcre版本)$ cp pcre-8.40/ /usr/local/src/3、Nginx下载安装1234567891011$ cd /data/src$ wget -c http://nginx.org/download/nginx-1.10.3.tar.gz$ tar -zxvf nginx-1.10.3.tar.gz$ cd nginx-1.10.3$ ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.40 (--with-prce=dir 指定pcre的源码目录)$ make$ make install$ /usr/local/nginx/sbin/nginx -v (查看Nginx版本)$ ln -s /usr/local/nginx/sbin/nginx /usr/bin$ nginx (-t查看启动 -s stop/reopen停止/重启) 访问 http://localhost 查看Nginx是否正常安装启动3.1 tip:Nginx启动服务管理脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#!/bin/sh## nginx - this script starts and stops the nginx daemin## chkconfig: - 85 15 # description: Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server# processname: nginx# config: /usr/local/nginx/conf/nginx.conf# pidfile: /usr/local/nginx/logs/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ "$NETWORKING" = "no" ] &amp;&amp; exit 0nginx="/usr/local/nginx/sbin/nginx"prog=$(basename $nginx)NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"lockfile=/var/lock/subsys/nginxstart() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 echo -n $"Starting $prog: " daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $"Stopping $prog: " killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop start&#125;reload() &#123; configtest || return $? echo -n $"Reloading $prog: " killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case "$1" in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;" exit 2esacNginx配置php-fpm1、修改nginx.conf,根据里面默认的注释例子修改123456789101112131415161718192021222324252627282930313233343536$ vim /usr/local/nginx/conf/nginx.conf======================================================================================================== #HTTP server server&#123; listen 80; return 444; #server_name localhost; charset utf-8; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; location ~ \.php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 1h; &#125; &#125; inculude vhost/*.conf;========================================================================================================2.在conf/vhost/目录下编写配置每一个站点的conf文件,可以拷贝Nginx里面的例子进行修改]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS minimal install]]></title>
    <url>%2F2017%2F03%2F27%2FCentos_Minimal_install%2F</url>
    <content type="text"><![CDATA[一、centos minimal安装后一些设置1、设置开机网卡自动连接12$ vim /etc/sysconfig/network-scripts/ifcfg-eth0 ONBOOT=yes2、关闭SELinux12345$ /usr/sbin/sestatus -v$ setenforce 0 (临时关闭)$ vim /etc/selinux/config 将 SELINUX=enforcing 改为 SELINUX=disabled (永久关闭) sync reboot3、防火墙123$ chkconfig iptables --list (查看)$ chkconfig iptables on/off (永久)$ service iptables start/stop (临时)3.1、设定预设规则(详情参考:http://t.cn/RiONgR0)12345678910$ iptables -P INPUT DROP$ iptables -P OUTPUT ACCEPT$ iptables -P FORWARD DROPeg:开启ssh 22端口$ iptables -A INPUT -p tcp -s 192.168.2.58 --dport 22 -j ACCEPT (除了192.168.2.58其它IP禁止ssh)$ iptables -A OUTPUT -p tcp -s 192.168.2.58 --sport 22 -j ACCEPT (如果OUTPUT设置成DROP则需添加该条)$ service iptables save (手动每条去添加,需要手动保存,不然重启后失效)或者直接在 iptables 编辑添加删除$ vim /etc/sysconfig/iptables (编辑iptables规则)$ /etc/init.d/iptables restart4、设置yum repo源1234567先备份系统源$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup$ cd /etc/yum.repos.d/$ wget -c http://mirrors.163.com/.help/CentOS6-Base-163.repo$ vim CentOS-Media.repo 关闭cdrom源$ yum install epel (安装第三方软件源)5 、通过yum group装系统必备软件123456789$ yum grouplist$ yum groupinstall "Development tools"$ yum groupinstall "System Administration Tools"(cent7用 yum group mark install)根据需求去选择软件包$ yum install setuptool.x86_64$ yum install ntsysv$ yum install system-config-network-tui$ yum install system-config-firewall-tui$ yum install system-config-securitylevel-tui二、基础目录结构1.mkdir /data/src 下载存放源码目录 /data/log 站点日志目录 /data/www WEB站点目录 /data/svn SVN仓库目录 /data/mysqldb MYSQL数据库数据目录 /data/backup MYSQL数据备份目录 /data/local/php PHP目录,local下面都是程序编译安装目录 /data/local/nginx /data/local/mysql 三、设置禁止参与 yum 更新的核心软件12$ vim /etc/yum.conf exclude=php* apache* kernel* mysql* nginx* (根据实际情况进行指定不参与yum update的程序)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lnmp环境]]></title>
    <url>%2F2017%2F03%2F27%2FLNMP%2F</url>
    <content type="text"><![CDATA[一、centos minimal安装完成1、设置开机网卡自动连接12$ vim /etc/sysconfig/network-scripts/ifcfg-eth0 ONBOOT=yes2、关闭SELinux12345$ /usr/sbin/sestatus -v$ setenforce 0 (临时关闭)$ vim /etc/selinux/config 将 SELINUX=enforcing 改为 SELINUX=disabled (永久关闭) sync reboot3、防火墙123$ chkconfig iptables --list (查看)$ chkconfig iptables on/off (永久)$ service iptables start/stop (临时)3.1、设定预设规则(详情参考:http://t.cn/RiONgR0)12345678910$ iptables -P INPUT DROP$ iptables -P OUTPUT ACCEPT$ iptables -P FORWARD DROPeg:开启ssh 22端口$ iptables -A INPUT -p tcp -s 192.168.2.58 --dport 22 -j ACCEPT (除了192.168.2.58其它IP禁止ssh)$ iptables -A OUTPUT -p tcp -s 192.168.2.58 --sport 22 -j ACCEPT (如果OUTPUT设置成DROP则需添加该条)$ service iptables save (手动每条去添加,需要手动保存,不然重启后失效)或者直接在 iptables 编辑添加删除$ vim /etc/sysconfig/iptables (编辑iptables规则)$ /etc/init.d/iptables restart4、设置yum repo源1234567先备份系统源$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup$ cd /etc/yum.repos.d/$ wget -c http://mirrors.163.com/.help/CentOS6-Base-163.repo$ vim CentOS-Media.repo 关闭cdrom源$ yum install epel (安装第三方软件源)5 、通过yum group装系统必备软件123456789$ yum grouplist$ yum groupinstall "Development tools"$ yum groupinstall "System Administration Tools"(cent7用 yum group mark install)根据需求去选择软件包$ yum install setuptool.x86_64$ yum install ntsysv$ yum install system-config-network-tui$ yum install system-config-firewall-tui$ yum install system-config-securitylevel-tui二、基础目录结构1.mkdir /data/src 下载存放源码目录 /data/log 站点日志目录 /data/www WEB站点目录 /data/svn SVN仓库目录 /data/mysqldb MYSQL数据库数据目录 /data/backup MYSQL数据备份目录 /data/local/php PHP目录,local下面都是程序编译安装目录 /data/local/nginx /data/local/mysql 三、Nginx1、安装编译工具及相关库1$ yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel2、安装PCRE(作用让Nginx支持Rewrite),下载PCRE安装包，Google搜索下12345678$ cd /data/src$ wget -c https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz$ tar -zxvf pcre-8.40.tar.gz$ cd pcre-8.40$ ./configure$ Make&amp;&amp;make install$ pcre-config --version (查看pcre版本)$ cp pcre-8.40/ /usr/local/src/3、Nginx下载安装1234567891011$ cd /data/src$ wget -c http://nginx.org/download/nginx-1.10.3.tar.gz$ tar -zxvf nginx-1.10.3.tar.gz$ cd nginx-1.10.3$ ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.40 (--with-prce=dir 指定pcre的源码目录)$ make$ make install$ /usr/local/nginx/sbin/nginx -v (查看Nginx版本)$ ln -s /usr/local/nginx/sbin/nginx /usr/bin$ nginx (-t查看启动 -s stop/reopen停止/重启) 访问 http://localhost 查看Nginx是否正常安装启动3.1 tip:Nginx启动服务管理脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#!/bin/sh## nginx - this script starts and stops the nginx daemin## chkconfig: - 85 15 # description: Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server# processname: nginx# config: /usr/local/nginx/conf/nginx.conf# pidfile: /usr/local/nginx/logs/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ "$NETWORKING" = "no" ] &amp;&amp; exit 0nginx="/usr/local/nginx/sbin/nginx"prog=$(basename $nginx)NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"lockfile=/var/lock/subsys/nginxstart() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 echo -n $"Starting $prog: " daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $"Stopping $prog: " killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop start&#125;reload() &#123; configtest || return $? echo -n $"Reloading $prog: " killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case "$1" in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;" exit 2esac四、MySQL1.安装Cmake1234567$ yum -y install gcc gcc-c++ make autoconf libtool$ cd /data/src$ wget -c http://www.cmake.org/files/v3.7/cmake-3.7.2.tar.gz$ tar -zxvf cmake-3.7.2.tar.gz$ cd cmake-3.7.2$ ./bootstrap$ make &amp;&amp; make install2.安装MySQL123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960$ yum -y install gcc gcc-c++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel bison patch unzip libmcrypt-devel libmhash-devel ncurses-devel bzip2 flex libaio-devel$ groupadd mysql$ useradd -r -g mysql -s /sbin/nologin mysql$ wget -c http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.35.tar.gz$ tar mysql-5.6.35.tar.gz$ cd mysql-5.6.35$ cmake -DCMAKE_INSTALL_PREFIX=/data/local/mysql/ -DMYSQL_DATADIR=/data/mysqldb -DMYSQL_TCP_PORT=3306 –enable-thread-safe-client(cmake安装参数参考MySQL官方介绍 http://t.cn/RipwTjB)$ make &amp;&amp; make install$ /data/local/mysql/bin/mysql --version$ cd /data/local/mysql$ chown -R mysql . (更改当前目录(mysql)下所有及子目录属mysql用户.因为是通过root用户进行安装的，权限属于root)$ chgrp -R mysql .$ scripts/mysql_install_db --user=mysql --basedir=/data/local/mysql --datadir=/data/mysqldb(初始化数据库,确保数据库目录和文件为mysql账户拥有,确保以root用户执行mysql_install_db,--basedir --datadir 分别指定MySQL安装目录和数据库目录，根据需求指定或者默认.)$ chown -R root . (改回root或者不改均可)$ chown -R mysql data (data数据库目录必须为mysql账户拥有,如果数据库目录更改也要授予mysql权限. tip：有些系统或者分发MySQL可能不是data，是var之类的.根据实际情况选择)$ cp support-files/mysql.server /etc/init.d/mysqld$ chkconfig --add mysqld (设置开机启动/服务)$ ln -s /data/local/mysql/bin/mysql /usr/sbin$ export PATH=$PATH:/data/local/mysql/bin$ vim /etc/my.cnf [mysqld] datadir=/data/mysqldb socket=/data/mysqldb/mysql.sock user=mysql sql_mode="NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER" character-set-server=utf8mb4 # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 slow_query_log=on slow-query-log-file=/data/mysqldb/slowquery.log long_query_time=0.03 log-queries-not-using-indexes [client] default-character-set = utf8mb4 character-sets-dir=/data/local/mysql/share/charsets [mysqld_safe] log-error=/data/mysqldb/mysqld.log pid-file=/data/mysqldb/mysqld.pid (编辑my.cnf，参考官方文档设置 http://t.cn/Rip42em)$ bin/mysqld_safe --user=mysql &amp;$ bin/mysqladmin -u root password "new passwd" (设置密码,用其它方式参考官方 http://t.cn/R6NhwTv)如果不行,可以使用重置密码的方式:$ service mysqld stop$ /usr/local/mysql/bin/mysqld_safe --skip-grant-tables$ mysql (去新建一个终端登录)mysql&gt; use mysqlmysql&gt; update user set password=password("123456") where user="root";mysql&gt; flush privileges;mysql&gt; exit; kill mysqld_safe ,启动mysqld , 登录mysql.mysql&gt; grant all privileges on *.* to 'root'@"%" identified by '123456' with grant option;mysql&gt; grant all privileges on *.* to 'root'@"%" identified by '123456' with grant option;(grant做一个授权,%表示*.*(所有的库和表)允许被远程连接,使用这里指定的用户密码或者指定IP操作mysql,如果是单个数据库授权,dbname.* to username@"%"...)mysql&gt; flush privileges;mysql&gt; quit;# tip: grant操作需要flush ,注意再操作完成后删除user表中匿名和空用户,或者给他们加上密码. delete from user where user="";# mysql -h localhost 和 mysql -h 127.0.0.1 的区别,通过localhost连接到mysql是使用UNIX socket,通过127.0.0.1连接到mysql是使用TCP/IP.3.MySQL备份(假设zentao作为一个数据库名)12345678910111213141516171819202122232425262728mysql5.6及以上,使用mysqldump在脚本里面登录数据库,防止报错信息.利用mysql/bin/mysql_config_editor保存 -uroot -p .$ /data/local/mysql/bin/mysql_config_editor set --login-path=dbname --host=127.0.0.1 --user=root --password Enter password: 上面的Enter password后面输入root登录MySQL的密码,即可生成 --login-path=dbname . 下面就可以写入shell脚本.$ vim mysql_backup.sh #!/bin/sh dump=/data/local/mysql/bin/mysqldump backup_dir=/data/backup/mysql/ linux_user=root db_name=zentao days=15 cd $backup_dir date=`date +%Y-%m-%d` backup_sql=$date.sql tar_sql="energy_bak_$date.tar.gz"$ dump --login-path==dbname $db_name --default-character-set=utf8 --opt -Q -R --skip-lock-tables&gt;$backip_sql tar -czf $tar_sql ./$backup_sql rm $backup_sql chown $linux_user:$linux_user $backup_dir/$tar_sql find $backup_dir -name "energy_bak*" -type f -mtime +$days -exec rm &#123;&#125; \; 从压缩备份文件中恢复(.tar.sql)$ gzip &lt; 2017-03-21.sql.tar.gz | mysql -uroot -p zentao 或者:$ zcat 2017-03-21.sql.tar.gz | mysql -uroot -p 从备份文件恢复(.sql)$ mysql -uroot -p zentao &lt; 2017-03-21.sql五、PHP1.编译安装123456789101112131415161718192021222324$ yum -y install gcc automake autoconf libtool make glibc$ cd /data/src$ wget -c http://cn2.php.net/distributions/php-5.5.38.tar.gz$ tar -zxvf php-5.5.38.tar.gz$ cd php-5.5.38$ ./configure --prefix=/data/local/php --enable-fpm(如果这里没有加--enable-fpm, php5.3及以上的内置了php-fpm 可以重新编译加上参数。或者yum install php-fpm,以下供参数参考 configure过程中有提示参数软件未安装的就安装后再configure,或者去除参数:./configure --prefix=/data/local/php --with-config-file-path=/data/local/php/etc --with-mysql=/data/local/mysql --with-mysqli=/data/local/mysql/bin/mysql_config --with-pdo-mysql=/data/local/mysql --with-pcre-dir=/data/local/pcre/bin/pcre-config --enable-bcmath --enable-exif --enable-fpm --enable-ftp --enable-fastCGI --enable-force-CGI-redirect --enable-gd-native-ttf --enable-inline-optimization --enable-mbstring --enable-opcache --enable-pcntl --enable-pdo_mysql --enable-soap --enable-shmop --enable-sockets --enable-sysvsem --enable-sysvmsg --enable-sysvshm --enable-zip --enable-zend-multibyte --with-bz2 --with-curl --with-curlwrappers --with-freetype-dir --with-gd --with-gdbm --with-gmp --with-gettext --with-jpeg-dir --with-libxml-dir --with-libdir --with-mhash --with-mcrypt --with-openssl --with-png-dir --with-pear --with-xsl --with-zlib-dir 附加参数参考 http://t.cn/Ri0WWcq)如果有httpd，可以加上 --with-apxs2=/data/local/httpd/bin/apxs这段参数，避免以后要使用httpd再重新编译php。$ make test$ make install$ cp php.ini-development /data/local/php/etc/php.ini (去目录将cp过去的文件重命 php.ini)$ vim php.ini date.timezone = PRC (或者Asia/Shanghai) magic_quotes_gpc = On (防止SQL注入)$ cp /data/local/php/etc/php-fpm.default.conf php-fpm.conf$ /data/local/php/sbin/php-fpm -R (启动fpm) kill -INT `cat $PATH:php-fpm.pid` 关闭(cat后面输入php-fpm.pid路径) kill -USR2 `cat $PATH:php-fpm.pid` 重启$ ps -ef | grep php-fpm 或者 lsof -i :9000设置php-fpm开机启动：vim /etc/local ,最后一行加入 /data/local/php/sbin/php-fpm 即可2.php-fpm服务启动管理tip: php-fpm service管理使用脚本,根据实情修改对应目录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#!/bin/bash## Startup script for the PHP-FPM server.## chkconfig: 345 85 15# description: PHP is an HTML-embedded scripting language# processname: php-fpm# config: /usr/local/php/etc/php.ini # Source function library.. /etc/rc.d/init.d/functions PHP_PATH=/data/localDESC="php-fpm daemon"NAME=php-fpmDAEMON=$PHP_PATH/php/sbin/$NAMECONFIGFILE=$PHP_PATH/php/etc/php-fpm.confPIDFILE=$PHP_PATH/php/var/run/$NAME.pidSCRIPTNAME=/etc/init.d/$NAME # Gracefully exit if the package has been removed.test -x $DAEMON || exit 0 rh_start() &#123; $DAEMON -y $CONFIGFILE || echo -n " already running"&#125; rh_stop() &#123; kill -QUIT `cat $PIDFILE` || echo -n " not running"&#125; rh_reload() &#123; kill -HUP `cat $PIDFILE` || echo -n " can't reload"&#125; case "$1" in start) echo -n "Starting $DESC: $NAME" rh_start echo "." ;; stop) echo -n "Stopping $DESC: $NAME" rh_stop echo "." ;; reload) echo -n "Reloading $DESC configuration..." rh_reload echo "reloaded." ;; restart) echo -n "Restarting $DESC: $NAME" rh_stop sleep 1 rh_start echo "." ;; *) echo "Usage: $SCRIPTNAME &#123;start|stop|status|restart|reload&#125;" &gt;&amp;2 exit 3 ;;esacexit 0六、Nginx配置php-fpm1、修改nginx.conf,根据里面默认的注释例子修改123456789101112131415161718192021222324252627282930313233343536$ vim /usr/local/nginx/conf/nginx.conf======================================================================================================== #HTTP server server&#123; listen 80; return 444; #server_name localhost; charset utf-8; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; location ~ \.php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 1h; &#125; &#125; inculude vhost/*.conf;========================================================================================================在conf/vhost/目录下编写配置每一个站点的conf文件,可以拷贝Nginx里面的例子进行修改七、设置禁止参与 yum 更新的核心软件12$ vim /etc/yum.conf exclude=php* apache* kernel* mysql* nginx* (根据实际情况进行指定不参与yum update的程序)]]></content>
      <categories>
        <category>LNMP</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
        <tag>mysql</tag>
        <tag>php-fpm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Crontab_SVN备份]]></title>
    <url>%2F2017%2F03%2F25%2FCrontab_SVN%2F</url>
    <content type="text"><![CDATA[crontab使用之SVN备份1.直接crontab -e 加入定时1*/5 * * * * /data/script/svnbak.pl2.修改/etc/crontab12345678910111213141516SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root (设置=""就不会发出电子邮件)HOME=/#run-parts*/5 * * * * /data/script/svnbak.pl# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed3.编写SVN备份脚本(perl)日备份增量备份:12345678910111213141516171819202122232425$ vim gnu.com.pl#!/usr/bin/perl -wmy $svn_repos="/data/repos/gnu.com";my $backup_dir="/data/backup/svn/";my $next_backup_file = "daily_incremental_backup.".`date +%Y%m%d`;open(IN,"$backup_dir/last_backed_up");$previous_youngest = &lt;IN&gt;;chomp $previous_youngest;close IN;$youngest=`svnlook youngest $svn_repos`;chomp $youngest;if ($youngest eq $previous_youngest)&#123; print "No new revisions to backup.n"; exit 0;&#125;my $first_rev = $previous_youngest + 1;print "Backing up revisions $youngest ...n";my $svnadmin_cmd = "svnadmin dump --incremental --revision $first_revyoungest $svn_repos &gt; $backup_dir/$next_backup_file";`$svnadmin_cmd`;open(LOG,"&gt;$backup_dir/last_backed_up"); print LOG $youngest;close LOG;print "Compressing dump file...n";print `gzip -g $backup_dir/$next_backup_file`;​ 周备份完整备份:123456789101112131415$ vim gnu.com.pl#!/usr/bin/perl -wmy $svn_repos="/data/repos/gnu.com";my $backup_dir="/data/backup/svn/";my $next_backup_file = "weekly_fully_backup.".`date +%Y%m%d`;$youngest=`svnlook youngest $svn_repos`;chomp $youngest;print "Backing up to revision $youngestn";my $svnadmin_cmd="svnadmin dump --revision 0youngest $svn_repos &gt;$backup_dir/$next_backup_file";`$svnadmin_cmd`;open(LOG,"&gt;$backup_dir/last_backed_up");print LOG $youngest;close LOG;print "Compressing dump file...n";print `gzip -g $backup_dir/$next_backup_file`;1$ chmod +x gnu.com.pl (需要给每一个脚本修改可执行属性 chmod +x *)4.脚本加入定时执行(日备份周一到五23点,周备份每周六23点)方法一:123456$ crontab -eSHELL=/bin/zshPATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbinHOME=/var/log0 23 * * 6 /data/script/svn/weekly/gnu.com.pl0 23 * * 1-5 /data/script/svn/daily/gnu.com.pl方法二:123$ vim /etc/crontab 0 23 * * 6 /data/script/svn/weekly/gnu.com.pl 0 23 * * 1-5 /data/script/svn/daily/gnu.com.pl5.几个定时例子12345600 03 * * 1-5 find /home "*.xxx" -mtime +4 -exec rm &#123;&#125; \;每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件.0 */2 * * * /sbin/service httpd restart每两个小时重启一次apache50 7 * * * /sbin/service sshd start每天7：50开启ssh服务]]></content>
      <categories>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>crontab</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库备份恢复]]></title>
    <url>%2F2017%2F03%2F23%2FMySQL_restore%2F</url>
    <content type="text"><![CDATA[MySQL单库备份恢复/导出导入12$ msyql/bin/mysqldump -uroot -p dbname &gt; bak.sql mysqldump 默认不会导出事件表，执行此命令会出现警告 -- Warning: Skipping the data of table mysql.event. Specify the --events option explicitly导出MySQL事件1$ mysql/bin/mysqldump -uroot -p --events --ignore-table=mysql.event dbname &gt; bak.sql导入MySQL备份123456$ mysql -uroot -p mysql &lt; bak.sql或者$ mysql -uroot -pEnter password:mysql&gt;use dbname;mysql&gt;source /data/backup/bak.sql;MySQL备份所有的库脚本123456789101112131415161718192021222324252627282930#!/bin/bash#-----------------------------------------------##This is a free GNU GPL version 3.0 or abover#Copyright (C) 2008 06 05#mysql_backup Dedicated copyright by My#-----------------------------------------------#echo -e [`date +"%Y-%m-%d %H:%M:%S"`] start#system timetime=`date +"%y-%m-%d"`#host IPhost="127.0.0.1"#database backup useruser="root"#database passwordpasswd="yourpasswd"#Create a backup directorymkdir -p /backup/db/"$time"#list database nameall_database=`/usr/bin/mysql -u$user -p$passwd -Bse 'show databases'`#in the table from the database backupfor i in $all_databasedo/usr/bin/mysqldump -u$user -p$passwd $i &gt; /backup/db/"$time"/"$i"_"$time".sqldoneecho -e [`date +"%Y-%m-%d %H:%M:%S"`] endexit 0运行 crontab -e，写入以下内容:30 5 * * * root sh /root/autobackup.sh &gt;/dev/null 2&gt;&amp;1Tip: 如果提示 mysql: [Warning] Using a password on the command line interface can be insecure.请参考另一篇写nginx + php-fpm + mysql 那篇的mysql部分,写用 mysql_config_editor 去解决 这个提示明文不安全问题.]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网卡驱动]]></title>
    <url>%2F2017%2F03%2F23%2FCentOS_eth0%2F</url>
    <content type="text"><![CDATA[1.首先安装工具,已安装请忽略.1$ yum install pciutiles2.查看网卡型号1$ lspci | grep -i ethernet3.查看网卡驱动版本1$ ethtool -i eth04.网卡驱动安装1234567891011$ yum install kernel-devel kernel-headers $ yum install gcc$ tar zxvf r1000.tgz$ cd r1000/$ make clean modules$ make install$ modprobe r1000$ reboot$ lsmod | grep r1000 或者 ifconfig -a 查看网卡eth0是否加载$ service network restart假如解压出来进文件夹看到有autorun.sh文件的,只需要执行./autorun.sh就可以了,等待完成,重启查看即可.​]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>网卡</tag>
        <tag>驱动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SCP]]></title>
    <url>%2F2017%2F03%2F23%2Fscp%2F</url>
    <content type="text"><![CDATA[SCP复制(服务器之间传输文件)1.从服务器上拉取目录1scp -p 22 -r user@192.168.2.1:/data/www /data/www/2.从本地上传目录(-p为端口参数,port端口.默认端口可以省略,传输为目录需要 -r 进行目录递归)1scp -r /data/www user@192.168.2.1:/data/www/3.使用ssh-keygen生成密钥和私钥文件,建立两台机器互相通信,可避免每次输入验证密码.1ssh-keygen -t rsa (生成在~/.ssh/目录下id_rsa.pub和id_rsa)4.将id_rsa.pub上传到目标服务器~/.ssh目录下,命名authorized_keys.1scp -r /root/.ssh/id_rsa.pub user@serverip:/root/.ssh/authorized_keys5.如果目标服务器上,已经存在了authorized_keys,就将id_rsa.pub中的内容追加到目标服务器的authorized_keys文件中.1cat /root/.ssh/id_rsa.pub | ssh user@serverip 'cat &gt;&gt; /root/.ssh/authorized_keys']]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>scp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FTP_vsftp]]></title>
    <url>%2F2017%2F03%2F19%2Fvsftp%2F</url>
    <content type="text"><![CDATA[1.安装(源码编译或者yum install)1234$ yum -y install vsftpd$ service vsftpd start$ chkconfig vsftpd on$ yum install -y db4 db4-utils (基于虚拟账户权限认证依赖)目录文件说明/etc/vsftpd/vsftpd.conf vsftpd的核心配置文件/etc/vsftpd/ftpusers 用于指定哪些用户不能访问FTP服务器/etc/vsftpd/user_list 指定允许使用vsftpd的用户列表文件/etc/vsftpd/vsftpd_conf_migrate.sh 是vsftpd操作的一些变量和设置脚本/var/ftp/ 默认情况下匿名用户的根目录=================================基于虚拟账户权限认证====================================sftpd的虚拟用户采用单独的用户名/口令保存方式，与系统账户分离，很大程度上增强了系统的安全性.vsftpd可以采用数据库文件来保存用户/口令，eg:hash;也可以将用户/口令保存在数据库服务器中，eg:MySQL。vsftpd验证虚拟用户，则采用PAM方式.=======================================================================================2.创建虚拟用户账号和密码(奇数行为用户名，偶数行为用户密码）123$ vim /etc/vsftpd/virtual.users ftpuser (虚拟用户名) 123456 (用户口令)生成虚拟用户认证的db文件12$ db_load -T -t hash -f /etc/vsftpd/virtual.users /etc/vsftpd/vsftpd.login.db$ chmod 600 /etc/vsftpd/vsftpd.login.db3.配置PAM信息123$ vim /etc/pam.d/vsftpd.pamauth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd.loginaccount required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd.login4.配置vsftpd.conf1234567891011121314151617181920212223$ cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak$ vim /etc/vsftpd/vsftpd.conf anonymous_enable=NO local_enable=YES write_enable=YES local_umask=022 anon_umask=022 xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES ascii_upload_enable=YES ascii_download_enable=YES ftpd_banner=Welcome to blah FTP service. chroot_local_user=YES listen=YES pam_service_name=vsftpd.pam userlist_enable=YES tcp_wrappers=YES guest_username=ftp guest_enable=YES user_config_dir=/etc/vsftpd/vsftpd_user_conf pasv_min_port=30001 pasv_max_port=310005.创建用户名的配置文件123456789101112131415$ mkdir -p /etc/vsftpd/vsftpd_user_conf$ cd /etc/vsftpd/vsftpd_user_conf$ vim ftpuser (ftpuser文件名就是上面创建虚拟用户名字) local_root=/data/www write_enable=yes download_enable=yes anon_upload_enable=yes anon_mkdir_write_enable=yes anon_other_write_enable=yes anon_world_readable_only=no idle_session_timeout=600 data_connection_timeout=120 max_clients=2 max_per_ip=3 local_max_rate=512000 (拥有全部权限)6.日常管理虚拟用户账号和密码i.修改文件1$ vi /etc/vsftpd/virtual.usersii.生成虚拟用户认证的db文件1db_load -T -t hash -f /etc/vsftpd/virtual.users /etc/vsftpd/vsftpd.login.dbiii.重启ftp服务(能登录就不重启)1service vsftpd restart7.添加防火墙规则123-A INPUT -p tcp -m state --state NEW -m tcp --dport 20 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 21 -j ACCEPT-A INPUT -p tcp -m tcp --dport 30001:31000 -j ACCEPT]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ftp</tag>
        <tag>vsftp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS6静态ip]]></title>
    <url>%2F2017%2F03%2F17%2FCentOS_ip%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829$ cat /etc/sysconfig/network-scripts/ifcfg-eth1DEVICE=eth1TYPE=EthernetUUID=84a6bff5-0241-41d8-bbc5-65c923655340ONBOOT=yesNM_CONTROLLED=yesBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=yesIPV6INIT=noNAME="System eth1"USERCTL=noNETMASK=255.255.255.0IPADDR=192.168.2.120PREFIX=24GATEWAY=192.168.2.1IPADDR2=192.168.1.120PREFIX2=24GATEWAY2=192.168.1.0IPADDR3=192.168.0.120PREFIX3=24GATEWAY3=192.168.0.1IPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=yesIPV6_PEERDNS=yesIPV6_PEERROUTES=yesHWADDR=68:05:CA:47:32:50LAST_CONNECT=1499933988]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>ip</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yum命令]]></title>
    <url>%2F2017%2F03%2F01%2Fyum%2F</url>
    <content type="text"><![CDATA[Yum命令作用yum repolist all列出所有仓库。yum list all列出仓库中所有软件包yum info 软件包名称查看软件包信息yum install 软件包名称安装软件包yum reinstall 软件包名称重新安装软件包yum update 软件包名称升级软件包yum remove 软件包移除软件包yum clean all清除所有仓库缓存yum check-update检查可更新的软件包yum grouplist查看系统中已经安装的软件包组yum groupinstall 软件包组安装指定的软件包组yum groupremove软件包组移除指定的软件包组yum groupinfo 软件包组查询指定的软件包组信息]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
</search>

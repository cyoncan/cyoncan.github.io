<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[lnmp环境搭建配置]]></title>
      <url>%2F2017%2F03%2F27%2Flnmp%2F</url>
      <content type="text"><![CDATA[一、centos minimal安装完成1、设置开机网卡自动连接12$ vim /etc/sysconfig/network-scripts/ifcfg-eth0 ONBOOT=yes 2、关闭SELinux12345$ /usr/sbin/sestatus -v$ setenforce 0 (临时关闭)$ vim /etc/selinux/config 将 SELINUX=enforcing 改为 SELINUX=disabled (永久关闭) sync reboot 3、防火墙123$ chkconfig iptables --list (查看)$ chkconfig iptables on/off (永久)$ service iptables start/stop (临时) 3.1、设定预设规则(详情参考:http://t.cn/RiONgR0)12345678910$ iptables -P INPUT DROP$ iptables -P OUTPUT ACCEPT$ iptables -P FORWARD DROPeg:开启ssh 22端口$ iptables -A INPUT -p tcp -s 192.168.2.58 --dport 22 -j ACCEPT (除了192.168.2.58其它IP禁止ssh)$ iptables -A OUTPUT -p tcp -s 192.168.2.58 --sport 22 -j ACCEPT (如果OUTPUT设置成DROP则需添加该条)$ service iptables save (手动每条去添加,需要手动保存,不然重启后失效)或者直接在 iptables 编辑添加删除$ vim /etc/sysconfig/iptables (编辑iptables规则)$ /etc/init.d/iptables restart 4、设置yum repo源1234567先备份系统源$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup$ cd /etc/yum.repos.d/$ wget -c http://mirrors.163.com/.help/CentOS6-Base-163.repo$ vim CentOS-Media.repo 关闭cdrom源$ yum install epel (安装第三方软件源) 5 、通过yum group装系统必备软件1234$ yum grouplist$ yum groupinstall "Development tools"$ yum groupinstall "System Administration Tools"(cent7用 yum group mark install)根据需求去选择软件包 #二、基础目录结构 1.mkdir /data/src 下载存放源码目录 /data/log 站点日志目录 /data/www WEB站点目录 /data/svn SVN仓库目录 /data/mysqldb MYSQL数据库数据目录 /data/backup MYSQL数据备份目录 /data/local/php PHP目录,local下面都是程序编译安装目录 /data/local/nginx /data/local/mysql #三、Nginx 1、安装编译工具及相关库1$ yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel 2、安装PCRE(作用让Nginx支持Rewrite),下载PCRE安装包，Google搜索下12345678$ cd /data/src$ wget -c https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz$ tar -zxvf pcre-8.40.tar.gz$ cd pcre-8.40$ ./configure$ Make&amp;&amp;make install$ pcre-config --version (查看pcre版本)$ cp pcre-8.40/ /usr/local/src/ 3、Nginx下载安装1234567891011$ cd /data/src$ wget -c http://nginx.org/download/nginx-1.10.3.tar.gz$ tar -zxvf nginx-1.10.3.tar.gz$ cd nginx-1.10.3$ ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.40 (--with-prce=dir 指定pcre的源码目录)$ make$ make install$ /usr/local/nginx/sbin/nginx -v (查看Nginx版本)$ ln -s /usr/local/nginx/sbin/nginx /usr/bin$ nginx (-t查看启动 -s stop/reopen停止/重启) 访问 http://localhost 查看Nginx是否正常安装启动 3.1 tip:Nginx启动服务管理脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#!/bin/sh## nginx - this script starts and stops the nginx daemin## chkconfig: - 85 15 # description: Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server# processname: nginx# config: /usr/local/nginx/conf/nginx.conf# pidfile: /usr/local/nginx/logs/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ "$NETWORKING" = "no" ] &amp;&amp; exit 0nginx="/usr/local/nginx/sbin/nginx"prog=$(basename $nginx)NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"lockfile=/var/lock/subsys/nginxstart() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 echo -n $"Starting $prog: " daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $"Stopping $prog: " killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop start&#125;reload() &#123; configtest || return $? echo -n $"Reloading $prog: " killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case "$1" in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;" exit 2esac 四、MySQL1.安装Cmake1234567$ yum -y install gcc gcc-c++ make autoconf libtool$ cd /data/src$ wget -c http://www.cmake.org/files/v3.7/cmake-3.7.2.tar.gz$ tar -zxvf cmake-3.7.2.tar.gz$ cd cmake-3.7.2$ ./bootstrap$ make &amp;&amp; make install 2.安装MySQL123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657$ groupadd mysql$ useradd -r -g mysql -s /sbin/nologin mysql$ wget -c http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.35.tar.gz 或者这个链接 (http://ftp.iij.ad.jp/pub/db/mysql/Downloads/MySQL-5.6/mysql-5.6.35.tar.gz)$ tar mysql-5.6.35.tar.gz$ cd mysql-5.6.35$ cmake --DCMAKE_INSTALL_PREFIX=/data/local/mysql/ -DMYSQL_DATADIR=/data/mysqldb -DMYSQL_TCP_PORT=3306 (cmake安装参数参考MySQL官方 http://t.cn/RipwTjB)$ make &amp;&amp; make install$ /data/local/mysql/bin/mysql --version$ cd /data/local/mysql$ chown -R mysql . (更改当前目录(mysql)下所有及子目录属mysql用户.因为是通过root用户进行安装的，权限属于root)$ chgrp -R mysql .$ scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysqldb(初始化数据库,确保数据库目录和文件为mysql账户拥有,确保以root用户执行mysql_install_db,--basedir --datadir 分别指定MySQL安装目录和数据库目录，根据需求指定或者默认.)$ chown -R root . (改回root或者不改均可)$ chown -R mysql data (data数据库目录必须为mysql账户拥有,如果数据库目录更改也要授予mysql权限. note：有些系统或者分发MySQL可能不是data，是var之类的.根据实际情况选择)$ bin/mysqld_safe --user=mysql &amp;$ cp support-files/mysql.server /etc/init.d/mysqld$ chkconfig --add mysqld (设置开机启动/服务)$ ln -s /data/local/mysql/bin/mysql /usr/sbin$ export PATH=$PATH:/data/local/mysql/bin$ vim /etc/my.cnf [mysqld] datadir=/data/mysqldb socket=/data/mysqldb/mysql.sock user=mysql sql_mode="NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER" character-set-server=utf8mb4 # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 slow_query_log=on slow-query-log-file=/data/mysqldb/slowquery.log long_query_time=0.03 log-queries-not-using-indexes [client] default-character-set = utf8mb4 character-sets-dir=/data/local/mysql/share/charsets [mysqldump] user=root password=123456 [mysqld_safe] log-error=/data/mysqldb/mysqld.log pid-file=/data/mysqldb/mysqld.pid (编辑my.cnf，参考官方文档设置 http://t.cn/Rip42em)$ service mysqld start $ mysql -uroot -p123456 -h localhost (如不能登录mysql，尝试换127.0.0.1或者是主机名.再则重置密码如下操作)$ service mysqld stop$ /usr/local/mysql/bin/mysqld_safe --skip-grant-tables$ mysql (去新建一个终端输入mysql)$ use mysql$ update user set password=password("123456") where user="root";$ flush privileges;$ exit; kill mysqld_safe ,启动mysqld , 登录mysql.$ grant all privileges on *.* to root@"%" identified by '123456' with grant option; (%替换成localhost或者指定的ip再执行grant,这是一个授权,表示允许被远程连接或者指定用户密码和IP操作mysql,如果是单个数据库授权,dbname.* to username@"%"...)$ flush privileges;$ quit; note: grant操作需要flush ,注意再操作完成后删除user表中匿名和空用户. 3.MySQL备份(假设zentao作为一个数据库名)12345678910111213141516171819202122232425262728mysql5.6及以上,使用mysqldump在脚本里面登录数据库,防止报错信息.利用mysql/bin/mysql_config_editor保存 -uroot -p .$ /data/local/mysql/bin/mysql_config_editor set --login-path=dbname --host=127.0.0.1 --user=root --password Enter password: 上面的Enter password后面输入root登录MySQL的密码,即可生成--login-path=dbname . 下面就可以写入shell脚本.$ vim mysql_backup.sh #!/bin/sh dump=/data/local/mysql/bin/mysqldump backup_dir=/data/backup/mysql/ linux_user=root db_name=zentao days=15 cd $backup_dir date=`date +%Y-%m-%d` backup_sql=$date.sql tar_sql="energy_bak_$date.tar.gz"$dump --login-path==dbname $db_name --default-character-set=utf8 --opt -Q -R --skip-lock-tables&gt;$backip_sql tar -czf $tar_sql ./$backup_sql rm $backup_sql chown $linux_user:$linux_user $backup_dir/$tar_sql find $backup_dir -name "energy_bak*" -type f -mtime +$days -exec rm &#123;&#125; \; 从压缩备份文件中恢复(.tar.sql)$ gzip &lt; 2017-03-21.sql.tar.gz | mysql -uroot -p zentao 或者:$ zcat 2017-03-21.sql.tar.gz | mysql -uroot -p 从备份文件恢复(.sql)$ mysql -uroot -p zentao &lt; 2017-03-21.sql #五、PHP 1234567891011121314151617181920212223242526272829303132$ yum -y install gcc automake autoconf libtool make glibc$ cd /data/src$ wget -c http://cn2.php.net/distributions/php-5.5.38.tar.gz$ tar -zxvf php-5.5.38.tar.gz$ cd php-5.5.38$ ./configure --prefix=/data/local/php --enable-fpm(如果这里没有加--enable-fpm, php5.3及以上的内置了php-fpm 可以重新编译加上参数。或者yum install php-fpm,以下供参数参考 configure过程中有提示参数软件未安装的就安装后再configure,或者去除参数:========================================================================================================./configure --prefix=/data/local/php --enable-fpm --with-mysql=/data/local/mysql --with-config-file-path=/data/local/php/etc --with-mysqli=/data/local/mysql/bin/mysql_config --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib-dir --with-libxml-dir --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --with-curlwrappers --enable-mbstring --with-mcrypt --with-mhash --with-gd --enable-gd-native-ttf --with-openssl --enable-sockets --enable-zip --enable-ftp --with-pear --enable-fastCGI --enable-force-CGI-redirect --with-gmp --with-pcre-dir=/usr/local/bin/pcre-config --with-gdbm --enable-zend-multibyte --enable-soap --enable-exif --enable-pdo_mysql --with-xsl --with-bz2========================================================================================================附加参数参考 http://t.cn/Ri0WWcq)$ make test$ make install$ cp php.ini-development /data/local/php/etc/php.ini (去目录将cp过去的文件重命 php.ini)$ vim php.ini date.timezone = PRC (或者Asia/Shanghai) magic_quotes_gpc = On (防止SQL注入)$ cp /data/local/php/etc/php-fpm.default.conf php-fpm.conf$ cp /data/local/php/etc/php-fpm.d/www.conf.default www.conf$ cp /usr/local/src/php-5.5.38/php.ini-development /data/local/php/lib/php.ini (复制之前解压php源码目录下的php.ini-develoment/production 根据环境情况选择开发还是生产)$ /data/local/php/sbin/php-fpm -R (启动fpm) kill -INT `cat $PATH:php-fpm.pid` 关闭(cat后面输入php-fpm.pid路径) kill -USR2 `cat $PATH:php-fpm.pid` 重启$ ps -ef | grep php-fpm 或者 lsof -i :9000设置php-fpm开机启动：vim /etc/local ,最后一行加入 /data/local/php/sbin/php-fpm 即可 tip: php-fpm service管理使用脚本,根据实情修改对应目录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#!/bin/bash## Startup script for the PHP-FPM server.## chkconfig: 345 85 15# description: PHP is an HTML-embedded scripting language# processname: php-fpm# config: /usr/local/php/etc/php.ini # Source function library.. /etc/rc.d/init.d/functions PHP_PATH=/data/localDESC=&quot;php-fpm daemon&quot;NAME=php-fpmDAEMON=$PHP_PATH/php/sbin/$NAMECONFIGFILE=$PHP_PATH/php/etc/php-fpm.confPIDFILE=$PHP_PATH/php/var/run/$NAME.pidSCRIPTNAME=/etc/init.d/$NAME # Gracefully exit if the package has been removed.test -x $DAEMON || exit 0 rh_start() &#123; $DAEMON -y $CONFIGFILE || echo -n &quot; already running&quot;&#125; rh_stop() &#123; kill -QUIT `cat $PIDFILE` || echo -n &quot; not running&quot;&#125; rh_reload() &#123; kill -HUP `cat $PIDFILE` || echo -n &quot; can&apos;t reload&quot;&#125; case &quot;$1&quot; in start) echo -n &quot;Starting $DESC: $NAME&quot; rh_start echo &quot;.&quot; ;; stop) echo -n &quot;Stopping $DESC: $NAME&quot; rh_stop echo &quot;.&quot; ;; reload) echo -n &quot;Reloading $DESC configuration...&quot; rh_reload echo &quot;reloaded.&quot; ;; restart) echo -n &quot;Restarting $DESC: $NAME&quot; rh_stop sleep 1 rh_start echo &quot;.&quot; ;; *) echo &quot;Usage: $SCRIPTNAME &#123;start|stop|status|restart|reload&#125;&quot; &gt;&amp;2 exit 3 ;;esacexit 0 #六、Nginx配置php-fpm 1、修改nginx.conf,根据里面默认的注释例子修改123456789101112131415161718192021222324252627282930313233343536$ vim /usr/local/nginx/conf/nginx.conf======================================================================================================== #HTTP server server&#123; listen 80; return 444; #server_name localhost; charset utf-8; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; location ~ \.php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 1h; &#125; &#125; inculude vhost/*.conf;======================================================================================================== 2.在conf/vhost/目录下编写配置每一个站点的conf文件,可以拷贝Nginx里面的例子进行修改##七、设置禁止参与 yum 更新的核心软件 12$vim /etc/yum.conf exclude=php* apache* kernel* mysql* nginx* (根据实际情况进行指定不参与yum update的程序)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL数据库备份恢复]]></title>
      <url>%2F2017%2F03%2F23%2FMySQL%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D%2F</url>
      <content type="text"><![CDATA[MySQL单库备份恢复/导出导入12$ msyql/bin/mysqldump -uroot -p dbname &gt; bak.sql mysqldump 默认不会导出事件表，执行此命令会出现警告 -- Warning: Skipping the data of table mysql.event. Specify the --events option explicitly 导出MySQL事件1$ mysql/bin/mysqldump -uroot -p --events --ignore-table=mysql.event dbname &gt; bak.sql 导入MySQL备份123456$ mysql -uroot -p mysql &lt; bak.sql或者$ mysql -uroot -pEnter password:$mysql&gt;use dbname;$mysql&gt;source /data/backup/bak.sql; MySQL备份所有的库脚本123456789101112131415161718192021222324252627282930#!/bin/bash#-----------------------------------------------##This is a free GNU GPL version 3.0 or abover#Copyright (C) 2008 06 05#mysql_backup Dedicated copyright by My#-----------------------------------------------#echo -e [`date +"%Y-%m-%d %H:%M:%S"`] start#system timetime=`date +"%y-%m-%d"`#host IPhost="127.0.0.1"#database backup useruser="root"#database passwordpasswd="yourpasswd"#Create a backup directorymkdir -p /backup/db/"$time"#list database nameall_database=`/usr/bin/mysql -u$user -p$passwd -Bse 'show databases'`#in the table from the database backupfor i in $all_databasedo/usr/bin/mysqldump -u$user -p$passwd $i &gt; /backup/db/"$time"/"$i"_"$time".sqldoneecho -e [`date +"%Y-%m-%d %H:%M:%S"`] endexit 0运行 crontab -e，写入以下内容:30 5 * * * root sh /root/autobackup.sh &gt;/dev/null 2&gt;&amp;1 Tip: 如果提示 mysql: [Warning] Using a password on the command line interface can be insecure.请参考另一篇写nginx + php-fpm + mysql 那篇的mysql部分,写用 mysql_config_editor 去解决 这个提示明文不安全问题.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux查看网卡信息]]></title>
      <url>%2F2017%2F03%2F23%2FCentOS%E7%BD%91%E5%8D%A1%E7%9B%B8%E5%85%B3%2F</url>
      <content type="text"><![CDATA[CentOS网卡相关信息查看 1.首先安装工具,已安装请忽略. 1$ yum install pciutiles 2.查看网卡型号 1$ lspci | grep -i ethernet 3.查看网卡驱动版本 1$ ethtool -i eth0 4网卡驱动安装 1234567891011$yum install kernel-devel kernel-headers $ yum install gcc$ tar zxvf r1000.tgz$ cd r1000/$ make clean modules$ make install$ modprobe r1000$ reboot$ lsmod | grep r1000 或者 ifconfig -a 查看网卡eth0是否加载$ service network restart假如解压出来进文件夹看到有autorun.sh文件的,只需要执行./autorun.sh就可以了,等待完成,重启查看即可. ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux互传文件之SCP使用]]></title>
      <url>%2F2017%2F03%2F23%2FLinux%E4%B9%8BSCP%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6%2F</url>
      <content type="text"><![CDATA[Linux互相传输之SCP的使用 1.从服务器上拉取目录 1scp -p 22 -r user@192.168.2.1:/data/www /data/www/ 2从本地上传目录(-p为端口参数,port端口.默认端口可以省略,传输为目录需要 -r 进行目录递归) 1scp -r /data/www user@192.168.2.1:/data/www/ 3使用ssh-keygen生成密钥和私钥文件,建立两台机器互相通信,可避免每次输入验证密码. 1ssh-keygen -t rsa (生成在~/.ssh/目录下id_rsa.pub和id_rsa) 4将id_rsa.pub上传到目标服务器~/.ssh目录下,命名authorized_keys. 1scp -r /root/.ssh/id_rsa.pub user@serverip:/root/.ssh/authorized_keys 5如果目标服务器上,已经存在了authorized_keys,就将id_rsa.pub中的内容追加到目标服务器的authorized_keys文件中. 1cat /root/.ssh/id_rsa.pub | ssh user@serverip 'cat &gt;&gt; /root/.ssh/authorized_keys' ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Crontab使用之SVN备份]]></title>
      <url>%2F2017%2F03%2F23%2Fcrontab%E4%BD%BF%E7%94%A8%E4%B9%8B%E5%A4%87%E4%BB%BDSVN%2F</url>
      <content type="text"><![CDATA[crontab使用之SVN备份 1.直接crontab -e 加入定时 1*/5 * * * * /data/script/svnbak.pl 2修改/etc/crontab 12345678910111213141516SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root (设置=""就不会发出电子邮件)HOME=/#run-parts*/5 * * * * /data/script/svnbak.pl# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed 3编写SVN备份脚本(perl) 日备份增量备份: 12345678910111213141516171819202122232425$ vim gnu.com.pl#!/usr/bin/perl -wmy $svn_repos="/data/repos/gnu.com";my $backup_dir="/data/backup/svn/";my $next_backup_file = "daily_incremental_backup.".`date +%Y%m%d`;open(IN,"$backup_dir/last_backed_up");$previous_youngest = &lt;IN&gt;;chomp $previous_youngest;close IN;$youngest=`svnlook youngest $svn_repos`;chomp $youngest;if ($youngest eq $previous_youngest)&#123; print "No new revisions to backup.n"; exit 0;&#125;my $first_rev = $previous_youngest + 1;print "Backing up revisions $youngest ...n";my $svnadmin_cmd = "svnadmin dump --incremental --revision $first_revyoungest $svn_repos &gt; $backup_dir/$next_backup_file";`$svnadmin_cmd`;open(LOG,"&gt;$backup_dir/last_backed_up"); print LOG $youngest;close LOG;print "Compressing dump file...n";print `gzip -g $backup_dir/$next_backup_file`; ​ 周备份完整备份: 123456789101112131415$ vim gnu.com.pl#!/usr/bin/perl -wmy $svn_repos="/data/repos/gnu.com";my $backup_dir="/data/backup/svn/";my $next_backup_file = "weekly_fully_backup.".`date +%Y%m%d`;$youngest=`svnlook youngest $svn_repos`;chomp $youngest;print "Backing up to revision $youngestn";my $svnadmin_cmd="svnadmin dump --revision 0youngest $svn_repos &gt;$backup_dir/$next_backup_file";`$svnadmin_cmd`;open(LOG,"&gt;$backup_dir/last_backed_up");print LOG $youngest;close LOG;print "Compressing dump file...n";print `gzip -g $backup_dir/$next_backup_file`; 1$ chmod +x gnu.com.pl (需要给每一个脚本修改可执行属性 chmod +x *) 4.4脚本加入定时执行(日备份周一到五23点,周备份每周六23点) 方法一: 123456$ crontab -eSHELL=/bin/zshPATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbinHOME=/var/log0 23 * * 6 /data/script/svn/weekly/gnu.com.pl0 23 * * 1-5 /data/script/svn/daily/gnu.com.pl 方法二: 123$ vim /etc/crontab 0 23 * * 6 /data/script/svn/weekly/gnu.com.pl 0 23 * * 1-5 /data/script/svn/daily/gnu.com.pl 5.5 几个定时例子 12345600 03 * * 1-5 find /home "*.xxx" -mtime +4 -exec rm &#123;&#125; \;每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件.0 */2 * * * /sbin/service httpd restart每两个小时重启一次apache50 7 * * * /sbin/service sshd start每天7：50开启ssh服务]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vsftp安装]]></title>
      <url>%2F2017%2F03%2F19%2Fvsftpd%2F</url>
      <content type="text"><![CDATA[安装(源码编译或者yum install)1234$ yum -y install vsftpd$ service vsftpd start$ chkconfig vsftpd on$ yum install -y db4 db4-utils (基于虚拟账户权限认证依赖) 目录文件说明 /etc/vsftpd/vsftpd.conf vsftpd的核心配置文件 /etc/vsftpd/ftpusers 用于指定哪些用户不能访问FTP服务器 /etc/vsftpd/user_list 指定允许使用vsftpd的用户列表文件 /etc/vsftpd/vsftpd_conf_migrate.sh 是vsftpd操作的一些变量和设置脚本 /var/ftp/ 默认情况下匿名用户的根目录 =================================基于虚拟账户权限认证==================================== sftpd的虚拟用户采用单独的用户名/口令保存方式，与系统账户分离，很大程度上增强了系统的安全性.vsftpd可以采用数据库文件来保存用户/口令，eg:hash;也可以将用户/口令保存在数据库服务器中，eg:MySQL。vsftpd验证虚拟用户，则采用PAM方式. ======================================================================================= 创建虚拟用户账号和密码 (奇数行为用户名，偶数行为用户密码） 123$ vim /etc/vsftpd/virtual.users ftpuser (虚拟用户名) 123456 (用户口令) 生成虚拟用户认证的db文件 12$ db_load -T -t hash -f /etc/vsftpd/virtual.users /etc/vsftpd/vsftpd.login.db$ chmod 600 /etc/vsftpd/vsftpd.login.db 配置PAM信息123$ vim /etc/pam.d/vsftpd.pamauth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd.loginaccount required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd.login 配置vsftpd.conf1234567891011121314151617181920$ cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak$ vim /etc/vsftpd/vsftpd.conf anonymous_enable=NO local_enable=YES local_umask=022 anon_umask=022 xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES ascii_upload_enable=YES ascii_download_enable=YES ftpd_banner=Welcome to blah FTP service. chroot_local_user=YES listen=YES userlist_enable=YES pam_service_name=vsftpd.pam guest_username=ftp guest_enable=YES user_config_dir=/etc/vsftpd/vsftpd_user_conf tcp_wrappers=YES 创建用户名的配置文件123456789101112131415$ mkdir -p /etc/vsftpd/vsftpd_user_conf$ cd /etc/vsftpd/vsftpd_user_conf$ vim ftpuser (ftpuser文件名就是上面创建虚拟用户名字) local_root=/data/www write_enable=yes download_enable=yes anon_upload_enable=yes anon_mkdir_write_enable=yes anon_other_write_enable=yes anon_world_readable_only=no idle_session_timeout=600 data_connection_timeout=120 max_clients=2 max_per_ip=3 local_max_rate=512000 (拥有全部权限) 日常管理虚拟用户账号和密码 1.修改文件 1$ vi /etc/vsftpd/virtual.users 2生成虚拟用户认证的db文件 1db_load -T -t hash -f /etc/vsftpd/virtual.users /etc/vsftpd/vsftpd.login.db 3.重启ftp服务(能登录就不重启) 1service vsftpd restart]]></content>
    </entry>

    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[记一次阿里云RDS MySQL CPU跑满100居高不下的分析]]></title>
      <url>%2F2017%2F04%2F25%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91RDSCPU%E5%B1%85%E9%AB%98%E4%B8%8D%E4%B8%8B%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[这两天呢经常收到MySQL的CPU报警信息,不过我知道原因是PHP在跑一个订单累积返工分的demo.因为已经跑了好几周有了,开始数量少,到现在订单已经五六十万了吧,不是很清楚.但是最近RDS CPU老报警.不过还能回到正常值,昨晚发现CPU满了,还一直不下.重启实例后,于是又正常,今天又开始继续跑单子了.CPU就一直99,登录RDS结合阿里云文档分析了一番,诊断图如下:会话没有截全,共有60左右个吧,都是同一用户,同一数据库,均为select语句根据阿里云文档介绍 RDS CPU 跑满100的分析介绍如下:1.原理：cpu 消耗过大通常情况下都是有慢sql 造成的，这里的慢sql 包括全表扫描，扫描数据量过大，内存排序，磁盘排序，锁争用等待等；2.表现现象：sql 执行状态为：sending data，Copying to tmp table，Copying to tmp table on disk，Sorting result，locked;3.分析原因：用户可以登录到rds，通过show processlist查看当前正在执行的sql，当执行完show processlist后出现大量的语句，通常其状态出现sending data，Copying to tmp table，Copying to tmp table on disk，Sorting result, Using filesort 都是sql有性能问题；A. sending data表示：sql正在从表中查询数据，如果查询条件没有适当的索引，则会导致sql执行时间过长；B. Copying to tmp table on disk：出现这种状态，通常情况下是由于临时结果集太大，超过了数据库规定的临时内存大小，需要拷贝临时结果集到磁盘上，这个时候需要用户对sql进行优化；C. Sorting result, Using filesort：出现这种状态，表示sql正在执行排序操作，排序操作都会引起较多的cpu消耗，通常的优化方法会添加适当的索引来消除排序，或者缩小排序的结果集；执行 show processlist , 或者直接进入RDS &gt;DMS里面使用阿里云的后台管理,生成诊断报告,查看state. 60个左右的查询会话全是sending data,还有下面检测出来的慢SQL下午又了解了下,跑订单的那个任务从昨天开始查询操作了,我不懂业务逻辑上的东西,反正应该可以确定这次引起CPU居高不下的原因应该就是数据库大量的查询,花的时间太长了因为服务器性能也就在这,上图也列出来了,可定不是因为连接数的问题.结合文档来看呢,还是数据库的索引和语句方面需要继续优化.问题找到了交给phper去添加.注：由于查询执行效率低（查询访问表数据行数多）而导致实例 CPU 使用率高是RDS MySQL非常常见的问题。参考:RDS实例CPU超过100%的分析RDS MySQL CPU使用率高情况的原因和解决RDS for MySQL查询缓存 (Query Cache) 的设置和使用MySQL IOPS 使用率高的原因和解决方法]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL添加索引]]></title>
      <url>%2F2017%2F04%2F25%2FMySQL%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%2F</url>
      <content type="text"><![CDATA[一.查看索引123mysql&gt; show index from tablename;或mysql&gt; show keys from tablename;Non_unique: 如果索引不能包括重复词,则为0,如果可以则为1.Key_name: 索引的名称Seq_in_index: 索引中的列序列号,从1开始Column_name: 列名称Collation: 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）Cardinality：索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。Sub_part：如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。Packed：指示关键字如何被压缩。如果没有被压缩，则为NULL。Null：如果列含有NULL，则含有YES。如果没有，则该列含有NO。Index_type：用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。Comment：更多评注。查看数据库表中存储引擎的类型1234mysql&gt; show table status from dbname where name='tablename';或者mysql&gt; use dbnamemysql&gt; show table status where name='tablename';二.创建索引原则1. 频繁的作为查询条件的字段应该创建索引2. 唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件3. 非常频繁更新的字段不适合创建索引4.不会出现在where子句中的字段不该创建索引5.最左配原则…eg:i. 在where子句中出现的列, 在join子句中出现的列, 而不是在select关键字后选择列表的列.ii. 索引列的基数越大，索引的效果越好。例如，存放出生日期的列具有不同的值，很容易区分行，而用来记录性别的列，只有M和F,则对此进行索引没有多大用处，因此不管搜索哪个值，都会得出大约一半的行存储引擎对索引类型的支持情况:存储引擎允许的索引类型MyISAMBTREEInnoDBBTREEMEMORY/HEAPHASH,BTREE三.索引语法:123create [unique|fulltext|spatial] index index_name [using index_type] on table_name (index_column_name);alter table table_name index index_name;drop index index_name on table_name;参考:美团点评技术团队-MySQL索引原理及慢查询优化]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux内存管理]]></title>
      <url>%2F2017%2F04%2F24%2FLinux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%2F</url>
      <content type="text"><![CDATA[释放内存123456789$ sync$ free -m total used free shared buffers cachedMem: 7752 1590 6162 2 274 457-/+ buffers/cache: 858 6894Swap: 7887 0 7887$ echo 1 &gt; /proc/sys/vm/drop_caches 释放 pagecache$ echo 2 &gt; /proc/sys/vm/drop_caches 释放 dentries和inodes$ echo 3 &gt; /proc/sys/vm/drop_caches 释放 pagecache, dentries和inodes]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux文件隐藏属性]]></title>
      <url>%2F2017%2F04%2F24%2FLinux%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8F%E5%B1%9E%E6%80%A7%2F</url>
      <content type="text"><![CDATA[chattr命令用于设置文件的隐藏权限，格式为：“chattr [参数] 文件”。chattr设置文件的隐藏权限，如果要将某个隐藏功能添加到文件，使用+参数，如果要将某个隐藏功能移出文件，使用-参数。常见的隐藏权限包括有：参数作用i将无法对文件进行修改,若对目录设置后则仅能修改子文件而不能新建或删除。a仅允许补充（追加）内容.无法覆盖/删除(Append Only)。S文件内容变更后立即同步到硬盘(sync)。s彻底从硬盘中删除，不可恢复(用0填充原文件所在硬盘区域)。A不再修改这个文件的最后访问时间(atime)。b不再修改文件或目录的存取时间。D检查压缩文件中的错误。d当使用dump命令备份时忽略本文件/目录。c默认将文件或目录进行压缩。u当删除此文件后依然保留其在硬盘中的数据，方便日后恢复。t让文件系统支持尾部合并（tail-merging）。X可以直接访问压缩文件的内容。lsattr命令用于显示文件的隐藏权限，格式为：“lsattr [参数] 文件”。1234567891011$ root@stu  ~  lsattr-------------e- ./readme.txt$ root@stu  ~  chattr +a readme.txt$ root@stu  ~  rm -rf readme.txtrm: cannot remove `readme.txt': Operation not permitted$ root@stu  ~  lsattr readme.txt-----a-------e- readme.txt$ root@stu  ~  chattr -a readme.txt$ root@stu  ~  rm readme.txt$ root@stu  ~  lltotal 0]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux管道符与重定向]]></title>
      <url>%2F2017%2F04%2F24%2FLinux%E7%AE%A1%E9%81%93%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91%2F</url>
      <content type="text"><![CDATA[管道符命令“命令A | 命令B” , 就是“将前一个命令原本要输出到屏幕的数据当作是后一个命令的标准输入”123eg:find ./ -name "*.html" | ls -l | wc -l 查找当前目录下html文件有几个.echo "hello" | passwd --stdin root 修改root密码对于输入重定向有这些情况：符号作用命令 &lt; file将file作为命令的标准输入命令 &lt;&lt; 分界符从标准输入中读入，直到遇见“分界符”才停止命令 &lt; file1 &gt; file2将file1作为命令的标准输入并将标准输出到file2对于输出重定向符有这些情况：符号作用命令 &gt; file将标准输出重定向到一个file中（清空原有file的数据）命令 2&gt; file将错误输出重定向到一个file中（清空原有file的数据）命令 &gt;&gt; file将标准输出重定向到一个file中（追加到原有内容的后面）命令 2&gt;&gt; file将错误输出重定向到一个file中（追加到原有内容的后面）命令 &gt;&gt; file 2&gt;&amp;1 或 命令 &amp;&gt;&gt; file将标准输出与错误输出共同写入到file中（追加到原有内容的后面）输入输出都是相对于命令而言]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS6防火墙之配置iptables]]></title>
      <url>%2F2017%2F04%2F20%2FCentOS6%E9%98%B2%E7%81%AB%E5%A2%99%E4%B9%8Biptables%2F</url>
      <content type="text"><![CDATA[配置filter表防火墙1.清除预设表filter中的所有规则链的规则1iptables -F2.清除预设表filter中使用者自定链中的规则1iptables -X3.设定预设规则123iptables -P INPUT DROPiptables -P OUTPUT ACCEPTiptables -P FORWARD DROP4.根据自己机器的实际情况开启相应端口123456789101112#开启22端口,ssh才能登录.$ iptables -A INPUT -p tcp --dport 22 -j ACCEPT或者$ iptables -A INPUT -i eth1 -s 192.168.2.100 -p tcp --dport 22 -j ACCEPT #指定eth1网卡和192.168.2.100允许ssh登录#允许ping(即icmp包通过)$ iptables -A INPUT -p icmp -j ACCEPT#允许loopback$ iptables -A INPUT -i lo -j ACCEPT#使ping域名可以得到回复$ iptables -A INPUT -p udp -m udp --dport 53 -j ACCEPT $ iptables -A INPUT -p udp -m udp --sport 53 -j ACCEPTtip: 除了以上用命令去添加iptable规则,还可以 vim /etc/sysconfig/iptables5.保存iptables配置1service iptables save6.重启iptables服务1service iptables restart7.查看iptables规则1iptables -L -n]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[zabbix安装配置]]></title>
      <url>%2F2017%2F04%2F20%2Fzabbix%E6%90%AD%E5%BB%BA%E5%AE%89%E8%A3%85%2F</url>
      <content type="text"><![CDATA[zabbix搭建环境: centos6,lnmp,zabbix3.0.8一.web环境安装参考另一篇写lnmp搭建的文章二.zabbix安装搭建tip:在官方的文档上已经有很详细的说明,下面是根据自己的实际情况参照文档安装过程.1.zabbix下载安装选LTS,我下的3.0最新的源码包12345678$ wget -c https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.0.8/zabbix-3.0.8.tar.gz$ tar zxvf zabbix-3.0.8.tar.gz$ groupadd zabbix$ useradd -g zabbix zabbix$ cd zabbix-3.0.8/ $ ./configure --prefix=/data/local/zabbix --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2 --with-openssl$ yum install net-snmp-devel.x86_64 -y (根据实际环境去安装提示缺少的东西,MySQL大部分是因为没有软连接到usr/bin)$ ln -s /data/local/zabbix/sbin/* /usr/sbin/2.创建zabbix数据库,导入数据库123456789101112131415161718$ mysql -uroot -pmysql&gt; create database zabbix character set utf8 collate utf8_bin;mysql&gt; grant all privileges on zabbix.* to zabbix@'localhost' identified by 'passwd';mysql&gt; grant all privileges on zabbix.* to zabbix@'127.0.0.1' identified by 'passwd';或者直接用mysql&gt; grant all privileges on zabbix.* to zabbix@'%' identified by 'passwd';mysql&gt; flush privileges;mysql&gt; quit;$ cd /data/src/zabbix-3.0.8/database/mysql$ mysql -uzabbix -p zabbix &lt; schema.sql 导入zabbix数据库脚本# stop here if you are creating database for Zabbix proxy$ mysql -uzabbix -p zabbix &lt; images.sql$ mysql -uzabbix -p zabbix &lt; data.sql导入数据库另一种方法:$ mysql -uzabbix -pmysql&gt; use zabbix;mysql&gt; source /data/src/zabbix-3.0.8/database/mysql/schema.sql;......3.修改zabbix_server配置文件12345678DBName=zabbix #数据库名称DBUser=zabbix #数据库用户名DBPassword=123456 #数据库密码ListenIP=127.0.0.1 #数据库ip地址Timeout=4AlertScriptsPath=/data/local/zabbix/share/zabbix/alertscriptsExternalScripts=/data/local/zabbix/share/zabbix/externalscriptsLogSlowQueries=30004.创建web目录123mkdir -p /data/web/zabbix.monitor.cncp -a /data/src/zabbix-3.0.8/frontend/php/* /data/web/zabbix.monitor.cn/chown -R www:www zabbix.monitor.cn/5.配置nginx1234567891011121314151617181920212223242526272829303132333435363738vim /data/local/nginx/conf/nginx.conf在server模块外http模块内加入一行include vhost/*.conf:wqcd /data/local/nginx/conf/vhostvim zabbix.confserver &#123; listen 80; server_name 127.0.0.1; index index.html index.php; root /data/web/zabbix.monitor.cn; access_log /data/logs/$SERVER_NAME.access.log main; error_log /data/logs/$SERVER_NAME.log error; location / &#123; fastcgi_index index.php; fastcgi_pass 127.0.0.1:9000; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param SCRIPT_NAME $fastcgi_script_name; &#125; if (!-e $request_filename)&#123; rewrite ^/(.*)$ /index.php/$1 last; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|JPG|xml|json)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 12h; &#125; # access_log m.log access; &#125;6.修改php.ini文件(这个地方债官网上有配置要求说明)123456789101112131415161718192021222324252627282930post_max_size = 32Mmax_execution_time = 300max_input_time = 300date.timezone = Asia/Shanghai以下是我自己的进入zabbi安装检测各个配置参数和模块是否满足zabbix安装要求.如果忘记更改php.ini或者不知道改哪些的,可以进入到安装界面http://zabbix.monitor.cn/setup.php 根据检测结果,再去修改,每次修改可能需要重启nginx和php-fpmPHP version 5.6.30(我用的PHP版本) 5.4.0(zabbix3.0.8要求PHP最低的版本,下面的参数类似要求) OKPHP option "memory_limit" 128M 128M OKPHP option "post_max_size" 32M 16M OKPHP option "upload_max_filesize" 2M 2M OKPHP option "max_execution_time" 300 300 OKPHP option "max_input_time" 300 300 OKPHP option "date.timezone" Asia/Shanghai OKPHP databases support MySQL/SQLite3 OKPHP bcmath on OKPHP mbstring on OKPHP option "mbstring.func_overload" off off OKPHP option "always_populate_raw_post_data" off off OKPHP sockets on OKPHP gd 2.1.0 2.0 OKPHP gd PNG support on OKPHP gd JPEG support on OKPHP gd FreeType support on OKPHP libxml 2.7.6 2.6.15 OKPHP xmlwriter on OKPHP xmlreader on OKPHP ctype on OKPHP session on OKPHP option "session.auto_start" off off OKPHP gettext on OKPHP option "arg_separator.output" &amp; &amp; OK7.启动,进入安装界面12345678910111213$ service nginx start$ service php-fpm start$ zabbix_server 浏览器输入 http://zabbix.monitor.cn/setup.php 域名是之前nginx里面配置好的,或者不用域名用IP和别的端口,域名需要做host映射,或者内网路由器里面做虚拟映射.出现界面下一步,填上MySQL zabbix用户密码一致,下一步,看到绿色congratulation 就安装完成了.默认用户名和密码:admin,zabbix设置zabbix服务开机启动$ cp /data/src/zabbix/misc/init.d/fedora/core/* /etc/init.d/$ vim /etc/init.d/zabbix_server修改BASEDIR你zabbix安装路径chkconfig --add zabbix_serverchkconfig --add zabbix_agentdchkconfig zabbix_server onchkconfig zabbix_agentd on8.客户端安装客户端根据实际情况去使用几种方案,一般机器少的,都是一台server端,几台agent端.方案可以参考:http://t.cn/RXPa0zV1234567./configure --prefix=/usr/local/zabbix --enable-agent --with-opensslmake install其它的设置和前面的安装配置一样,zabbix_agentd.conf Server=ServeripServerActive=ServeripHostname=自定义zabbix客户端hostname,不要和server端配置的hostname一样.tip:将10050,10051端口添加到防火墙,server端也是.agent端需要启动zabbix_agentd服务9.客户端和服务端使用加密传输i. 使用psk共享密钥加密1234567891011Generating PSK在客户端操作$ cd /usr/local/zabbix/$ openssl rand -hex 32 -out zabbix_agentd.psk$ chown zabbix:zabbix zabbix_agentd.psk$ vim /etc/zabbix_agentd.conf TLSConnect=psk TLSAccept=psk TLSPSKFile=/home/zabbix/zabbix_agentd.psk TLSPSKIdentity=PSK 001 service zabbix_agentd restart 回到server机器,在host机器加密那里选择psk,填入信息.ii. 使用证书加密123456789101112131415161718192021222324252627282930313233$ mkdir -p /data/local/zabbix/zabbix_crt$ cd zabbix_crt/#生成ca私钥$ openssl genrsa -aes 2048 -out ca.key 需要输入给私钥加密的密码#使用ca私钥建立ca证书$ openssl req -new -x509 -nodes -days 1000 -key ca.key -subj /CN=ServerIPorDomainName\ CA/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; ca.crt#生成服务器csr证书请求文件$ openssl req -newkey rsa:2048 -days 1000 -nodes -keyout server.key -subj /CN=ServerIPorDomainName/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; server.csr#使用ca证书与私钥签发服务器证书$ openssl x509 -req -in server.csr -days 1000 -CA ca.crt -CAkey ca.key -set_serial 01 &gt; server.crt#生成客户端csr证书请求文件$ openssl req -newkey rsa:2048 -days 1000 -nodes -keyout client.key -subj /CN=client/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; client.csr#使用ca证书与私钥签发客户端证书$ openssl x509 -req -in client.csr -days 1000 -CA ca.crt -CAkey ca.key -set_serial 01 &gt; client.crt服务端文件位置可以不改变,用scp命令将刚刚生成的客户端需要文件上传到客户端自定义的文件夹 /usr/local/zabbix/zabbix_crt/服务端: ca.crt , server.crt , server.crtvim /data/local/zabbix/etc/zabbix_server.confTLSCAFile=/data/local/zabbix/zabbix_crt/ca.crtTLSCertFile=/usr/local/zabbix/zabbix_crt/server.crtTLSKeyFile=/usr/local/zabbix/zabbix_crt/server.key客户端: ca.crt , client.crt , client.crtTLSConnect=certTLSAccept=certTLSCAFile=/usr/local/zabbix/zabbix_crt/ca.crtTLSCertFile=/usr/local/zabbix/zabbix_crt/client.crtTLSKeyFile=/usr/local/zabbix/zabbix_crt/client.key进入webui configuration/hosts/打开相应的主机/双向都可以选certificate重启zabbix_server和zabbix_agent,再进去看cert是否变蓝色,有延迟几十秒.我记录的文档可能有些不全,希望大家遇到问题多分析日志,去网上搜索遇到的错误信息.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[zabbix配置监控MySQL]]></title>
      <url>%2F2017%2F04%2F20%2Fzabbix3.0%E7%9B%91%E6%8E%A7MySQL%2F</url>
      <content type="text"><![CDATA[zabbix3.0监控MySQL设置1.Agent端建立一个登陆MySQL用户(步骤参考MySQL笔记)2.在zabbix/etc/下面新建.my.cnf文件1234567891011121314$ find / -name "sock" -print /var/lib/mysql/mysql.sock$ vim /usr/local/zabbix/etc/.my.cnf #zabbix Agent [mysql] host=localhost user=zabbix password=zabbix socket=/var/lib/mysql/mysql.sock [mysqladmin] host=localhost usr=zabbix password=zabbix socket=/var/lib/mysql/mysql.sock3.编辑 userparameter_mysql.conf1234567$ find / -name userparameter_mysql.conf/usr/local/src/zabbix-3.0.8/conf/zabbix-agentd/userparameter_mysql.conf$ cp userparameter_mysql.conf /usr/local/zabbix/etc/zabbix_agentd.conf.d/$ sed -i 's#/var/lib/zabbix#/usr/local/zabbix/etc#g' 或者用 vim编辑该文件替换掉 home 目录为 .my.cnf 所在的目录$ vim /usr/local/zabbix/etc/zabbix/zabbix.agentd.conf 添加一行 Include=/usr/local/zabbix/etc/zabbix_agentd.conf.d/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux常用命令]]></title>
      <url>%2F2017%2F04%2F20%2FLinux%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[1.Linux查看当前系统登录用户列表1234w 查看当前活跃的用户列表cat /etc/passwd 查看所有用户的列表cat /etc/group 查看用户组cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F":" '&#123; print $1"|"$3"|"$4 &#125;'|more2.查看进程12ps -aux 所有进程ps -ef | grep nginx 指定进程3.mkdir创建目录及字目录mkdir -p /home/xx/xxx/xxxx/xxxxx -v //打印创建过程 4.chmod更改文件文件夹权限1chmod -R //权限设置往下递归5.查看系统版本123lsb_release -auname -acat /etc/issue6.控制用户登录1234567锁模式usermod -L user (Lock 帐号user)usermod -U user (Unlock 帐号user)控制shell模式usermod -s /sbin/nologin user (不允许登录)usermod -s /bin/bash user (允许登录使用指定的bash)/etc/nologin.txt (提示用户为什么不能登录)7.禁止所有用户登录12345touch /etc/nologin如果该文件存在，那么Linux上的所有用户（除了root以外）都无法登录.nologin（注意：不是nologin）可以写点东西，告诉用户为何无法登录.cat /etc/nologin9：00－10：00 系统升级，所有用户都禁止登录！解禁帐号也简单，直接将/etc/nologin删除就行了！8.查看当前用户使用的shell/终端环境123ps | grep $$ | awk '&#123;print $4&#125;'echo $0echo $TERM9.查看端口被进程占用，属于哪个程序1lsof -i :900010.wintolinux1dos2unix unix2dos11.rename使用rename12.查找文件名,并替换其中的指定字符.1find /data/www -name &quot;*.php&quot; | xargs sed -i &apos;s/192.168.2.145/127.0.0.1/g&apos;13.批量修改目录后缀名tip: rename有c版本和Perl版本,使用时请man一下1find ./ -type d -name &quot;*.org&quot;|xargs rename org com14.查找目录下所有文件中包含指定的字符,并替换成其它字符12]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[理解xargs]]></title>
      <url>%2F2017%2F04%2F20%2Fxargs%2F</url>
      <content type="text"><![CDATA[理解xargs命令工作和使用123⚡ root@intelnet:$ xargs hellohello工作形式: 从标准输入stdin读取数据,根据输入读取执行命令作为参数提供给它一次或多次.输入中的任何空白和空格均视为分隔符,空行被忽略.进入xargs ,进行数据输入, Ctrl+D告诉xargs结束输入任务,echo命令被自动执行,并且再次打印 hello.echo是xargs默认的执行命令,我们可以指定其它命令作为参数传递给xargs , 然后通过stdin传递要查询的文件和类型作为输入的名称.如下:12⚡ root@intelnet:$ xargs find -name "*.log"]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL常用语句]]></title>
      <url>%2F2017%2F04%2F20%2Fmysql%2F</url>
      <content type="text"><![CDATA[1.MySQL创建用户1create user 'username'@'%' identified by 'passwd'; % 换成localhost或者127.0.0.1,就只能本地登录了.2.给用户授权123grant all privileges on databasename.tablename to 'username'@'hostname' identified by 'passwd'with grant option; all代表所有权限,withgrant option代表该用户可以给其他用户也进行授权操作.flush privileges; 授权完成,需要刷新生效.quit;3.查看mysql有多少个账户1select host,user,password from mysql.user;4.查看MySQL字符集,排序规则12show variables like 'collation%';show variables like 'char%';]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vim常用命令]]></title>
      <url>%2F2017%2F04%2F20%2Fvim%2F</url>
      <content type="text"><![CDATA[Linux vim常用命令1.替换1234567:s/abc/efg/ 替换当前行,第一个 abc 为 efg:s/abc/efg/g 替换当前行,所有 abc 为 efg:n,$s/xyz/org/ 替换第 n 行开始到最后一行中每一行的第一个 xyz 为 org:n,$s/xyz/org/g 替换第 n 行开始到最后一行中每一行所有 xyz 为 org n 为数字，若 n 为 . ，表示从当前行开始到最后一行:%s/xyz/org/ (等同于:g/xyz/s//org/) 替换每一行的第一个 xyz 为 org:%s/xyz/org/g （等同于:g/xyz/s//org/g）替换每一行中所有 xyz 为 org2.vim执行：wq清楚屏幕上上一次编辑过的内容12vim退出后清屏,屏幕不显示之前编辑的内容.TERM=xterm; export TERM3.删除全部1:%d]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[lnmp环境搭建配置]]></title>
      <url>%2F2017%2F03%2F27%2Flnmp%2F</url>
      <content type="text"><![CDATA[一、centos minimal安装完成1、设置开机网卡自动连接12$ vim /etc/sysconfig/network-scripts/ifcfg-eth0 ONBOOT=yes2、关闭SELinux12345$ /usr/sbin/sestatus -v$ setenforce 0 (临时关闭)$ vim /etc/selinux/config 将 SELINUX=enforcing 改为 SELINUX=disabled (永久关闭) sync reboot3、防火墙123$ chkconfig iptables --list (查看)$ chkconfig iptables on/off (永久)$ service iptables start/stop (临时)3.1、设定预设规则(详情参考:http://t.cn/RiONgR0)12345678910$ iptables -P INPUT DROP$ iptables -P OUTPUT ACCEPT$ iptables -P FORWARD DROPeg:开启ssh 22端口$ iptables -A INPUT -p tcp -s 192.168.2.58 --dport 22 -j ACCEPT (除了192.168.2.58其它IP禁止ssh)$ iptables -A OUTPUT -p tcp -s 192.168.2.58 --sport 22 -j ACCEPT (如果OUTPUT设置成DROP则需添加该条)$ service iptables save (手动每条去添加,需要手动保存,不然重启后失效)或者直接在 iptables 编辑添加删除$ vim /etc/sysconfig/iptables (编辑iptables规则)$ /etc/init.d/iptables restart4、设置yum repo源1234567先备份系统源$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup$ cd /etc/yum.repos.d/$ wget -c http://mirrors.163.com/.help/CentOS6-Base-163.repo$ vim CentOS-Media.repo 关闭cdrom源$ yum install epel (安装第三方软件源)5 、通过yum group装系统必备软件123456789$ yum grouplist$ yum groupinstall "Development tools"$ yum groupinstall "System Administration Tools"(cent7用 yum group mark install)根据需求去选择软件包$ yum install setuptool.x86_64$ yum install ntsysv$ yum install system-config-network-tui$ yum install system-config-firewall-tui$ yum install system-config-securitylevel-tui二、基础目录结构1.mkdir /data/src 下载存放源码目录 /data/log 站点日志目录 /data/www WEB站点目录 /data/svn SVN仓库目录 /data/mysqldb MYSQL数据库数据目录 /data/backup MYSQL数据备份目录 /data/local/php PHP目录,local下面都是程序编译安装目录 /data/local/nginx /data/local/mysql 三、Nginx1、安装编译工具及相关库1$ yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel2、安装PCRE(作用让Nginx支持Rewrite),下载PCRE安装包，Google搜索下12345678$ cd /data/src$ wget -c https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz$ tar -zxvf pcre-8.40.tar.gz$ cd pcre-8.40$ ./configure$ Make&amp;&amp;make install$ pcre-config --version (查看pcre版本)$ cp pcre-8.40/ /usr/local/src/3、Nginx下载安装1234567891011$ cd /data/src$ wget -c http://nginx.org/download/nginx-1.10.3.tar.gz$ tar -zxvf nginx-1.10.3.tar.gz$ cd nginx-1.10.3$ ./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.40 (--with-prce=dir 指定pcre的源码目录)$ make$ make install$ /usr/local/nginx/sbin/nginx -v (查看Nginx版本)$ ln -s /usr/local/nginx/sbin/nginx /usr/bin$ nginx (-t查看启动 -s stop/reopen停止/重启) 访问 http://localhost 查看Nginx是否正常安装启动3.1 tip:Nginx启动服务管理脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#!/bin/sh## nginx - this script starts and stops the nginx daemin## chkconfig: - 85 15 # description: Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server# processname: nginx# config: /usr/local/nginx/conf/nginx.conf# pidfile: /usr/local/nginx/logs/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ "$NETWORKING" = "no" ] &amp;&amp; exit 0nginx="/usr/local/nginx/sbin/nginx"prog=$(basename $nginx)NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"lockfile=/var/lock/subsys/nginxstart() &#123; [ -x $nginx ] || exit 5 [ -f $NGINX_CONF_FILE ] || exit 6 echo -n $"Starting $prog: " daemon $nginx -c $NGINX_CONF_FILE retval=$? echo [ $retval -eq 0 ] &amp;&amp; touch $lockfile return $retval&#125;stop() &#123; echo -n $"Stopping $prog: " killproc $prog -QUIT retval=$? echo [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile return $retval&#125;restart() &#123; configtest || return $? stop start&#125;reload() &#123; configtest || return $? echo -n $"Reloading $prog: " killproc $nginx -HUP RETVAL=$? echo&#125;force_reload() &#123; restart&#125;configtest() &#123; $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123; status $prog&#125;rh_status_q() &#123; rh_status &gt;/dev/null 2&gt;&amp;1&#125;case "$1" in start) rh_status_q &amp;&amp; exit 0 $1 ;; stop) rh_status_q || exit 0 $1 ;; restart|configtest) $1 ;; reload) rh_status_q || exit 7 $1 ;; force-reload) force_reload ;; status) rh_status ;; condrestart|try-restart) rh_status_q || exit 0 ;; *) echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;" exit 2esac四、MySQL1.安装Cmake1234567$ yum -y install gcc gcc-c++ make autoconf libtool$ cd /data/src$ wget -c http://www.cmake.org/files/v3.7/cmake-3.7.2.tar.gz$ tar -zxvf cmake-3.7.2.tar.gz$ cd cmake-3.7.2$ ./bootstrap$ make &amp;&amp; make install2.安装MySQL123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960$ yum -y install gcc gcc-c++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel bison patch unzip libmcrypt-devel libmhash-devel ncurses-devel bzip2 flex libaio-devel$ groupadd mysql$ useradd -r -g mysql -s /sbin/nologin mysql$ wget -c http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.35.tar.gz$ tar mysql-5.6.35.tar.gz$ cd mysql-5.6.35$ cmake -DCMAKE_INSTALL_PREFIX=/data/local/mysql/ -DMYSQL_DATADIR=/data/mysqldb -DMYSQL_TCP_PORT=3306(cmake安装参数参考MySQL官方介绍 http://t.cn/RipwTjB)$ make &amp;&amp; make install$ /data/local/mysql/bin/mysql --version$ cd /data/local/mysql$ chown -R mysql . (更改当前目录(mysql)下所有及子目录属mysql用户.因为是通过root用户进行安装的，权限属于root)$ chgrp -R mysql .$ scripts/mysql_install_db --user=mysql --basedir=/data/local/mysql --datadir=/data/mysqldb(初始化数据库,确保数据库目录和文件为mysql账户拥有,确保以root用户执行mysql_install_db,--basedir --datadir 分别指定MySQL安装目录和数据库目录，根据需求指定或者默认.)$ chown -R root . (改回root或者不改均可)$ chown -R mysql data (data数据库目录必须为mysql账户拥有,如果数据库目录更改也要授予mysql权限. tip：有些系统或者分发MySQL可能不是data，是var之类的.根据实际情况选择)$ cp support-files/mysql.server /etc/init.d/mysqld$ chkconfig --add mysqld (设置开机启动/服务)$ ln -s /data/local/mysql/bin/mysql /usr/sbin$ export PATH=$PATH:/data/local/mysql/bin$ vim /etc/my.cnf [mysqld] datadir=/data/mysqldb socket=/data/mysqldb/mysql.sock user=mysql sql_mode="NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER" character-set-server=utf8mb4 # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 slow_query_log=on slow-query-log-file=/data/mysqldb/slowquery.log long_query_time=0.03 log-queries-not-using-indexes [client] default-character-set = utf8mb4 character-sets-dir=/data/local/mysql/share/charsets [mysqld_safe] log-error=/data/mysqldb/mysqld.log pid-file=/data/mysqldb/mysqld.pid (编辑my.cnf，参考官方文档设置 http://t.cn/Rip42em)$ bin/mysqld_safe --user=mysql &amp;$ bin/mysqladmin -u root password "new passwd" (设置密码,用其它方式参考官方 http://t.cn/R6NhwTv)如果不行,可以使用重置密码的方式:$ service mysqld stop$ /usr/local/mysql/bin/mysqld_safe --skip-grant-tables$ mysql (去新建一个终端登录)$ mysql&gt;use mysql$ mysql&gt;update user set password=password("123456") where user="root";$ mysql&gt;flush privileges;$ exit; kill mysqld_safe ,启动mysqld , 登录mysql.$ grant all privileges on *.* to 'root'@"%" identified by '123456' with grant option;$ grant all privileges on *.* to 'root'@"%" identified by '123456' with grant option;(grant做一个授权,%表示*.*(所有的库和表)允许被远程连接,使用这里指定的用户密码或者指定IP操作mysql,如果是单个数据库授权,dbname.* to username@"%"...)$ flush privileges;$ quit; tip: grant操作需要flush ,注意再操作完成后删除user表中匿名和空用户,或者给他们加上密码. delete from user where user=""; mysql -h localhost 和 mysql -h 127.0.0.1 的区别,通过localhost连接到mysql是使用UNIX socket,通过127.0.0.1连接到mysql是使用TCP/IP.3.MySQL备份(假设zentao作为一个数据库名)12345678910111213141516171819202122232425262728mysql5.6及以上,使用mysqldump在脚本里面登录数据库,防止报错信息.利用mysql/bin/mysql_config_editor保存 -uroot -p .$ /data/local/mysql/bin/mysql_config_editor set --login-path=dbname --host=127.0.0.1 --user=root --password Enter password: 上面的Enter password后面输入root登录MySQL的密码,即可生成 --login-path=dbname . 下面就可以写入shell脚本.$ vim mysql_backup.sh #!/bin/sh dump=/data/local/mysql/bin/mysqldump backup_dir=/data/backup/mysql/ linux_user=root db_name=zentao days=15 cd $backup_dir date=`date +%Y-%m-%d` backup_sql=$date.sql tar_sql="energy_bak_$date.tar.gz"$dump --login-path==dbname $db_name --default-character-set=utf8 --opt -Q -R --skip-lock-tables&gt;$backip_sql tar -czf $tar_sql ./$backup_sql rm $backup_sql chown $linux_user:$linux_user $backup_dir/$tar_sql find $backup_dir -name "energy_bak*" -type f -mtime +$days -exec rm &#123;&#125; \; 从压缩备份文件中恢复(.tar.sql)$ gzip &lt; 2017-03-21.sql.tar.gz | mysql -uroot -p zentao 或者:$ zcat 2017-03-21.sql.tar.gz | mysql -uroot -p 从备份文件恢复(.sql)$ mysql -uroot -p zentao &lt; 2017-03-21.sql五、PHP1.编译安装123456789101112131415161718192021222324252627282930$ yum -y install gcc automake autoconf libtool make glibc$ cd /data/src$ wget -c http://cn2.php.net/distributions/php-5.5.38.tar.gz$ tar -zxvf php-5.5.38.tar.gz$ cd php-5.5.38$ ./configure --prefix=/data/local/php --enable-fpm(如果这里没有加--enable-fpm, php5.3及以上的内置了php-fpm 可以重新编译加上参数。或者yum install php-fpm,以下供参数参考 configure过程中有提示参数软件未安装的就安装后再configure,或者去除参数:./configure --prefix=/data/local/php --enable-fpm --with-mysql=/data/local/mysql --with-config-file-path=/data/local/php/etc --with-mysqli=/data/local/mysql/bin/mysql_config --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib-dir --with-libxml-dir --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --with-curlwrappers --enable-mbstring --with-mcrypt --with-mhash --with-gd --enable-gd-native-ttf --with-openssl --enable-sockets --enable-zip --enable-ftp --with-pear --enable-fastCGI --enable-force-CGI-redirect --with-gmp --with-pcre-dir=/data/local/pcre/bin/pcre-config --with-gdbm --enable-zend-multibyte --enable-soap --enable-exif --enable-pdo_mysql --with-xsl --with-bz2附加参数参考 http://t.cn/Ri0WWcq)$ make test$ make install$ cp php.ini-development /data/local/php/etc/php.ini (去目录将cp过去的文件重命 php.ini)$ vim php.ini date.timezone = PRC (或者Asia/Shanghai) magic_quotes_gpc = On (防止SQL注入)$ cp /data/local/php/etc/php-fpm.default.conf php-fpm.conf$ /data/local/php/sbin/php-fpm -R (启动fpm) kill -INT `cat $PATH:php-fpm.pid` 关闭(cat后面输入php-fpm.pid路径) kill -USR2 `cat $PATH:php-fpm.pid` 重启$ ps -ef | grep php-fpm 或者 lsof -i :9000设置php-fpm开机启动：vim /etc/local ,最后一行加入 /data/local/php/sbin/php-fpm 即可2.php-fpm服务启动管理tip: php-fpm service管理使用脚本,根据实情修改对应目录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#!/bin/bash## Startup script for the PHP-FPM server.## chkconfig: 345 85 15# description: PHP is an HTML-embedded scripting language# processname: php-fpm# config: /usr/local/php/etc/php.ini # Source function library.. /etc/rc.d/init.d/functions PHP_PATH=/data/localDESC=&quot;php-fpm daemon&quot;NAME=php-fpmDAEMON=$PHP_PATH/php/sbin/$NAMECONFIGFILE=$PHP_PATH/php/etc/php-fpm.confPIDFILE=$PHP_PATH/php/var/run/$NAME.pidSCRIPTNAME=/etc/init.d/$NAME # Gracefully exit if the package has been removed.test -x $DAEMON || exit 0 rh_start() &#123; $DAEMON -y $CONFIGFILE || echo -n &quot; already running&quot;&#125; rh_stop() &#123; kill -QUIT `cat $PIDFILE` || echo -n &quot; not running&quot;&#125; rh_reload() &#123; kill -HUP `cat $PIDFILE` || echo -n &quot; can&apos;t reload&quot;&#125; case &quot;$1&quot; in start) echo -n &quot;Starting $DESC: $NAME&quot; rh_start echo &quot;.&quot; ;; stop) echo -n &quot;Stopping $DESC: $NAME&quot; rh_stop echo &quot;.&quot; ;; reload) echo -n &quot;Reloading $DESC configuration...&quot; rh_reload echo &quot;reloaded.&quot; ;; restart) echo -n &quot;Restarting $DESC: $NAME&quot; rh_stop sleep 1 rh_start echo &quot;.&quot; ;; *) echo &quot;Usage: $SCRIPTNAME &#123;start|stop|status|restart|reload&#125;&quot; &gt;&amp;2 exit 3 ;;esacexit 0六、Nginx配置php-fpm1、修改nginx.conf,根据里面默认的注释例子修改123456789101112131415161718192021222324252627282930313233343536$ vim /usr/local/nginx/conf/nginx.conf======================================================================================================== #HTTP server server&#123; listen 80; return 444; #server_name localhost; charset utf-8; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; location ~ \.php$ &#123; root html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 1h; &#125; &#125; inculude vhost/*.conf;========================================================================================================2.在conf/vhost/目录下编写配置每一个站点的conf文件,可以拷贝Nginx里面的例子进行修改七、设置禁止参与 yum 更新的核心软件12$vim /etc/yum.conf exclude=php* apache* kernel* mysql* nginx* (根据实际情况进行指定不参与yum update的程序)八、更改站点配置11、在每个文件的web下查看,使用的配置文件类型是test,server,local.去更改对应的目录文件.主要有每个站点的下api/ backend/ common/ frontend/ h5/ weixin/ , main.php和param.php,在member.8dage.net下的是application/config下面的allow_ip.php,database.php,config.php]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[MySQL数据库备份恢复]]></title>
      <url>%2F2017%2F03%2F23%2FMySQL%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D%2F</url>
      <content type="text"><![CDATA[MySQL单库备份恢复/导出导入12$ msyql/bin/mysqldump -uroot -p dbname &gt; bak.sql mysqldump 默认不会导出事件表，执行此命令会出现警告 -- Warning: Skipping the data of table mysql.event. Specify the --events option explicitly导出MySQL事件1$ mysql/bin/mysqldump -uroot -p --events --ignore-table=mysql.event dbname &gt; bak.sql导入MySQL备份123456$ mysql -uroot -p mysql &lt; bak.sql或者$ mysql -uroot -pEnter password:$mysql&gt;use dbname;$mysql&gt;source /data/backup/bak.sql;MySQL备份所有的库脚本123456789101112131415161718192021222324252627282930#!/bin/bash#-----------------------------------------------##This is a free GNU GPL version 3.0 or abover#Copyright (C) 2008 06 05#mysql_backup Dedicated copyright by My#-----------------------------------------------#echo -e [`date +"%Y-%m-%d %H:%M:%S"`] start#system timetime=`date +"%y-%m-%d"`#host IPhost="127.0.0.1"#database backup useruser="root"#database passwordpasswd="yourpasswd"#Create a backup directorymkdir -p /backup/db/"$time"#list database nameall_database=`/usr/bin/mysql -u$user -p$passwd -Bse 'show databases'`#in the table from the database backupfor i in $all_databasedo/usr/bin/mysqldump -u$user -p$passwd $i &gt; /backup/db/"$time"/"$i"_"$time".sqldoneecho -e [`date +"%Y-%m-%d %H:%M:%S"`] endexit 0运行 crontab -e，写入以下内容:30 5 * * * root sh /root/autobackup.sh &gt;/dev/null 2&gt;&amp;1Tip: 如果提示 mysql: [Warning] Using a password on the command line interface can be insecure.请参考另一篇写nginx + php-fpm + mysql 那篇的mysql部分,写用 mysql_config_editor 去解决 这个提示明文不安全问题.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux互传文件之SCP使用]]></title>
      <url>%2F2017%2F03%2F23%2FLinux%E4%B9%8BSCP%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6%2F</url>
      <content type="text"><![CDATA[Linux互相传输之SCP的使用1.从服务器上拉取目录1scp -p 22 -r user@192.168.2.1:/data/www /data/www/2.从本地上传目录(-p为端口参数,port端口.默认端口可以省略,传输为目录需要 -r 进行目录递归)1scp -r /data/www user@192.168.2.1:/data/www/3.使用ssh-keygen生成密钥和私钥文件,建立两台机器互相通信,可避免每次输入验证密码.1ssh-keygen -t rsa (生成在~/.ssh/目录下id_rsa.pub和id_rsa)4.将id_rsa.pub上传到目标服务器~/.ssh目录下,命名authorized_keys.1scp -r /root/.ssh/id_rsa.pub user@serverip:/root/.ssh/authorized_keys5.如果目标服务器上,已经存在了authorized_keys,就将id_rsa.pub中的内容追加到目标服务器的authorized_keys文件中.1cat /root/.ssh/id_rsa.pub | ssh user@serverip 'cat &gt;&gt; /root/.ssh/authorized_keys']]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Linux查看网卡信息]]></title>
      <url>%2F2017%2F03%2F23%2FCentOS%E7%BD%91%E5%8D%A1%E7%9B%B8%E5%85%B3%2F</url>
      <content type="text"><![CDATA[CentOS网卡相关信息查看1.首先安装工具,已安装请忽略.1$ yum install pciutiles2.查看网卡型号1$ lspci | grep -i ethernet3.查看网卡驱动版本1$ ethtool -i eth04.网卡驱动安装1234567891011$ yum install kernel-devel kernel-headers $ yum install gcc$ tar zxvf r1000.tgz$ cd r1000/$ make clean modules$ make install$ modprobe r1000$ reboot$ lsmod | grep r1000 或者 ifconfig -a 查看网卡eth0是否加载$ service network restart假如解压出来进文件夹看到有autorun.sh文件的,只需要执行./autorun.sh就可以了,等待完成,重启查看即可.​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Crontab使用之SVN备份]]></title>
      <url>%2F2017%2F03%2F23%2Fcrontab%E4%BD%BF%E7%94%A8%E5%92%8CSVN%E5%A4%87%E4%BB%BD%2F</url>
      <content type="text"><![CDATA[crontab使用之SVN备份1.直接crontab -e 加入定时1*/5 * * * * /data/script/svnbak.pl2.修改/etc/crontab12345678910111213141516SHELL=/bin/bashPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root (设置=""就不会发出电子邮件)HOME=/#run-parts*/5 * * * * /data/script/svnbak.pl# For details see man 4 crontabs# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed3.编写SVN备份脚本(perl)日备份增量备份:12345678910111213141516171819202122232425$ vim gnu.com.pl#!/usr/bin/perl -wmy $svn_repos="/data/repos/gnu.com";my $backup_dir="/data/backup/svn/";my $next_backup_file = "daily_incremental_backup.".`date +%Y%m%d`;open(IN,"$backup_dir/last_backed_up");$previous_youngest = &lt;IN&gt;;chomp $previous_youngest;close IN;$youngest=`svnlook youngest $svn_repos`;chomp $youngest;if ($youngest eq $previous_youngest)&#123; print "No new revisions to backup.n"; exit 0;&#125;my $first_rev = $previous_youngest + 1;print "Backing up revisions $youngest ...n";my $svnadmin_cmd = "svnadmin dump --incremental --revision $first_revyoungest $svn_repos &gt; $backup_dir/$next_backup_file";`$svnadmin_cmd`;open(LOG,"&gt;$backup_dir/last_backed_up"); print LOG $youngest;close LOG;print "Compressing dump file...n";print `gzip -g $backup_dir/$next_backup_file`;​ 周备份完整备份:123456789101112131415$ vim gnu.com.pl#!/usr/bin/perl -wmy $svn_repos="/data/repos/gnu.com";my $backup_dir="/data/backup/svn/";my $next_backup_file = "weekly_fully_backup.".`date +%Y%m%d`;$youngest=`svnlook youngest $svn_repos`;chomp $youngest;print "Backing up to revision $youngestn";my $svnadmin_cmd="svnadmin dump --revision 0youngest $svn_repos &gt;$backup_dir/$next_backup_file";`$svnadmin_cmd`;open(LOG,"&gt;$backup_dir/last_backed_up");print LOG $youngest;close LOG;print "Compressing dump file...n";print `gzip -g $backup_dir/$next_backup_file`;1$ chmod +x gnu.com.pl (需要给每一个脚本修改可执行属性 chmod +x *)4.脚本加入定时执行(日备份周一到五23点,周备份每周六23点)方法一:123456$ crontab -eSHELL=/bin/zshPATH=/etc:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbinHOME=/var/log0 23 * * 6 /data/script/svn/weekly/gnu.com.pl0 23 * * 1-5 /data/script/svn/daily/gnu.com.pl方法二:123$ vim /etc/crontab 0 23 * * 6 /data/script/svn/weekly/gnu.com.pl 0 23 * * 1-5 /data/script/svn/daily/gnu.com.pl5.几个定时例子12345600 03 * * 1-5 find /home "*.xxx" -mtime +4 -exec rm &#123;&#125; \;每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件.0 */2 * * * /sbin/service httpd restart每两个小时重启一次apache50 7 * * * /sbin/service sshd start每天7：50开启ssh服务]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[vsftp安装]]></title>
      <url>%2F2017%2F03%2F19%2Fvsftpd%2F</url>
      <content type="text"><![CDATA[1.安装(源码编译或者yum install)1234$ yum -y install vsftpd$ service vsftpd start$ chkconfig vsftpd on$ yum install -y db4 db4-utils (基于虚拟账户权限认证依赖)目录文件说明/etc/vsftpd/vsftpd.conf vsftpd的核心配置文件/etc/vsftpd/ftpusers 用于指定哪些用户不能访问FTP服务器/etc/vsftpd/user_list 指定允许使用vsftpd的用户列表文件/etc/vsftpd/vsftpd_conf_migrate.sh 是vsftpd操作的一些变量和设置脚本/var/ftp/ 默认情况下匿名用户的根目录=================================基于虚拟账户权限认证====================================sftpd的虚拟用户采用单独的用户名/口令保存方式，与系统账户分离，很大程度上增强了系统的安全性.vsftpd可以采用数据库文件来保存用户/口令，eg:hash;也可以将用户/口令保存在数据库服务器中，eg:MySQL。vsftpd验证虚拟用户，则采用PAM方式.=======================================================================================2.创建虚拟用户账号和密码(奇数行为用户名，偶数行为用户密码）123$ vim /etc/vsftpd/virtual.users ftpuser (虚拟用户名) 123456 (用户口令)生成虚拟用户认证的db文件12$ db_load -T -t hash -f /etc/vsftpd/virtual.users /etc/vsftpd/vsftpd.login.db$ chmod 600 /etc/vsftpd/vsftpd.login.db3.配置PAM信息123$ vim /etc/pam.d/vsftpd.pamauth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd.loginaccount required /lib64/security/pam_userdb.so db=/etc/vsftpd/vsftpd.login4.配置vsftpd.conf1234567891011121314151617181920$ cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak$ vim /etc/vsftpd/vsftpd.conf anonymous_enable=NO local_enable=YES local_umask=022 anon_umask=022 xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES ascii_upload_enable=YES ascii_download_enable=YES ftpd_banner=Welcome to blah FTP service. chroot_local_user=YES listen=YES userlist_enable=YES pam_service_name=vsftpd.pam guest_username=ftp guest_enable=YES user_config_dir=/etc/vsftpd/vsftpd_user_conf tcp_wrappers=YES5.创建用户名的配置文件123456789101112131415$ mkdir -p /etc/vsftpd/vsftpd_user_conf$ cd /etc/vsftpd/vsftpd_user_conf$ vim ftpuser (ftpuser文件名就是上面创建虚拟用户名字) local_root=/data/www write_enable=yes download_enable=yes anon_upload_enable=yes anon_mkdir_write_enable=yes anon_other_write_enable=yes anon_world_readable_only=no idle_session_timeout=600 data_connection_timeout=120 max_clients=2 max_per_ip=3 local_max_rate=512000 (拥有全部权限)6.日常管理虚拟用户账号和密码i.修改文件1$ vi /etc/vsftpd/virtual.usersii.生成虚拟用户认证的db文件1db_load -T -t hash -f /etc/vsftpd/virtual.users /etc/vsftpd/vsftpd.login.dbiii.重启ftp服务(能登录就不重启)1service vsftpd restart]]></content>
    </entry>

    
  
  
</search>

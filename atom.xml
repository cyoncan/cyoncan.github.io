<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LinuxOpser</title>
  
  <subtitle>Linux</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cyoncan.github.io/"/>
  <updated>2018-02-06T12:40:05.834Z</updated>
  <id>http://cyoncan.github.io/</id>
  
  <author>
    <name>Amonymou5</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ip地址计算</title>
    <link href="http://cyoncan.github.io/2017/10/11/ip_calc/"/>
    <id>http://cyoncan.github.io/2017/10/11/ip_calc/</id>
    <published>2017-10-11T14:19:36.000Z</published>
    <updated>2018-02-06T12:40:05.834Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p><strong>192.168.0.1/24代表的含义，以及计算子网掩码、网络号、主机号、网络地址、主机地址</strong></p><p><strong>IP地址</strong>是一个32位的二进制数，被分割为4个“8位二进制数”（也就是4个字节）。通常以十进制的方式表示，十进制的显示形式便于人看，二进制显示形式是给计算机看。</p><p><img src="http://ooz08pfj3.bkt.clouddn.com/ipaddr.jpg" alt=""></p><p><strong>子网掩码(subnet mask) </strong>又叫网络掩码、地址掩码、子网络遮罩，它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">0.1</span>/<span class="number">24</span></span><br><span class="line">/<span class="number">24</span> 表示子网掩码，也就是前<span class="number">24</span>位是<span class="number">1</span>，剩余补<span class="number">0</span></span><br><span class="line"><span class="number">11111111</span> <span class="number">11111111</span> <span class="number">11111111</span> <span class="number">00000000</span> 转化成十进制 <span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">子网掩码为：<span class="number">255.255</span>.<span class="number">255.0</span></span><br></pre></td></tr></table></figure><p>将IP地址和子网掩码换算为二进制，子网掩码连续是1的表示<strong>网络地址</strong>，1的数目（/24）等于<strong>网络位</strong>的长度；后面0的部分表示<strong>主机地址</strong>，0的数目等于<strong>主机位</strong>的长度（32-24=8）。</p><table><thead><tr><th>类型</th><th style="text-align:left">十进制</th><th style="text-align:left">二进制</th></tr></thead><tbody><tr><td>IP地址</td><td style="text-align:left">192.168.0.1</td><td style="text-align:left">11000000 10101000 00000000 00000001</td></tr><tr><td>子网掩码</td><td style="text-align:left">255.255.255.0</td><td style="text-align:left">11111111 11111111 11111111 00000000</td></tr></tbody></table><p><strong>网络地址：</strong>IP地址和子网掩码的与运算，结果就是网络地址。<strong>(主机位全为0==网络地址)</strong></p><p>11000000 10101000 00000000 00000000 转化十进制 192.168.0.0</p><p><strong>广播地址：</strong>将运算结果中的网络位不变，主机位变为1，结果就是广播地址。<strong>（主机位全为1==广播地址）</strong></p><p>11000000 10101000 00000000 11111111 转化十进制 192.168.0.255</p><p><strong>地址范围：</strong>网络地址+1即为第一个主机地址，广播地址-1即为最后一个主机地址。</p><p>192.168.0.1 ~ 192.168.0.254</p><p><strong>主机数量：</strong>=2^(8-2) ; 8代表主机位长度。减2是因为主机不包括网络地址和广播地址。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="None" scheme="http://cyoncan.github.io/categories/None/"/>
    
    
      <category term="ip" scheme="http://cyoncan.github.io/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>Windows_CMD_</title>
    <link href="http://cyoncan.github.io/2017/10/10/Win_cmd/"/>
    <id>http://cyoncan.github.io/2017/10/10/Win_cmd/</id>
    <published>2017-10-10T11:51:39.000Z</published>
    <updated>2018-01-23T05:04:10.259Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p>Windows PowerShell和CMD控制台代码页设置</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">代码页     国家（地区）或语言</span><br><span class="line"><span class="number">437</span>        美国 </span><br><span class="line"><span class="number">850</span>        多语言（拉丁文 I）</span><br><span class="line"><span class="number">852</span>        斯拉夫语（拉丁文 II）</span><br><span class="line"><span class="number">855</span>        西里尔文（俄语） </span><br><span class="line"><span class="number">857</span>        土耳其语</span><br><span class="line"><span class="number">860</span>        葡萄牙语</span><br><span class="line"><span class="number">861</span>        冰岛语</span><br><span class="line"><span class="number">863</span>        加拿大 - 法语</span><br><span class="line"><span class="number">865</span>        日耳曼语</span><br><span class="line"><span class="number">866</span>        俄语</span><br><span class="line"><span class="number">869</span>        现代希腊语 </span><br><span class="line"><span class="number">936</span>        简体中文</span><br><span class="line"><span class="number">950</span>        繁体中文</span><br><span class="line"><span class="number">65001</span>      UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line">语法 </span><br><span class="line">chcp [NNN]</span><br><span class="line"></span><br><span class="line">通过注册表修改代码页：</span><br><span class="line"><span class="number">1</span> win键+R打开“运行”对话框，输入regedit打开注册表编辑器。</span><br><span class="line"><span class="number">2</span> 找到 [HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe]</span><br><span class="line"><span class="number">3</span> 修改或者新建<span class="string">"CodePage"</span> = dword:<span class="number">000003</span>a8</span><br><span class="line">【注】十六进制<span class="string">"000003a8"</span>或十进制<span class="string">"936"</span>，表示“<span class="number">936</span> (ANSI/OEM - 简体中文 GBK)”。</span><br></pre></td></tr></table></figure><p>CMD局域网命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">arp -a 列出本网段内所有活跃的IP地址</span><br><span class="line">arp -a 加对方IP是查对方的MAC地址</span><br><span class="line">arp -s （ip + mac）绑定mac与ip地址</span><br><span class="line">arp -d （ip + mac）解绑mac与ip地址</span><br><span class="line"></span><br><span class="line">net view ——&gt; 查询同一域内机器列表</span><br><span class="line">net view /domain ——&gt; 查询域列表</span><br><span class="line">net view /domain:domainname —–&gt; 查看workgroup域中计算机列表</span><br><span class="line"></span><br><span class="line">ipconfig /all ——&gt; 查询本机IP段，所在域等</span><br><span class="line">ipconfig /release</span><br><span class="line">ipconfig /renew 重新获取Ip地址</span><br><span class="line"></span><br><span class="line">telnet ip 端口号：尝试能否打开链接远程主机端口 nbtstat -a 加对方IP查对方的主机名</span><br><span class="line">tracert 主机名 得到IP地址</span><br><span class="line"></span><br><span class="line">netstat -a -n</span><br><span class="line">netstat -an | find “<span class="number">3389</span>”</span><br><span class="line">netstat -a查看开启哪些端口</span><br><span class="line">netstat -n查看端口的网络连接情况</span><br><span class="line">netstat -v查看正在进行的工作</span><br><span class="line">netstat -p tcp/ip查看某协议使用情况</span><br><span class="line">netstat -s 查看正在使用的所有协议使用情况</span><br><span class="line"></span><br><span class="line">nbtstat -n 获取NetBIOS</span><br><span class="line">nslookup 域名 查询域名对应的ip</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Win" scheme="http://cyoncan.github.io/categories/Win/"/>
    
    
      <category term="powershell" scheme="http://cyoncan.github.io/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7_KVM</title>
    <link href="http://cyoncan.github.io/2017/09/18/KVM_CentOS/"/>
    <id>http://cyoncan.github.io/2017/09/18/KVM_CentOS/</id>
    <published>2017-09-18T08:26:16.000Z</published>
    <updated>2018-01-23T05:04:10.251Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:11 GMT+0800 (CST) --><a id="more"></a><p>有一段时间比较，刚好利用公司有一台空闲的服务器，配置还行，刚好也在学习虚拟化的一些东西。最初从esxi入门，了解了虚拟化产品大概的原理和一些操作。当然对于最重要的功能集群管理，我还没有去研究。于是趁着这台机器还空闲，就试试看kvm的东西。</p><p>安装kvm前提：需要验证机器是否支持虚拟化，官方文档上是这么说的【主机必须使用支持硬件辅助虚拟化的Intel VT或AMD-V芯片组。】其实整个kvm安装使用的步骤在<a href="https://www.linux-kvm.org/page/HOWTO#General" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>都写的很清楚，只是英文理解着比较慢。</p><p>环境：centos7</p><h5 id="1-验证CPU是否支持KVM"><a href="#1-验证CPU是否支持KVM" class="headerlink" title="1.验证CPU是否支持KVM"></a>1.验证CPU是否支持KVM</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep -E <span class="string">'vmx|svm'</span> /proc/cpuinfo</span><br><span class="line">- vmx is <span class="keyword">for</span> Intel processors</span><br><span class="line">- svm is <span class="keyword">for</span> AMD processors</span><br></pre></td></tr></table></figure><p>如果有结果输出，则表示支持。vmx处理器功能标志表示Intel VT芯片组，而svm标志表示AMD-V。</p><h5 id="2-安装配置kvm及其相关软件"><a href="#2-安装配置kvm及其相关软件" class="headerlink" title="2.安装配置kvm及其相关软件"></a>2.安装配置kvm及其相关软件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装kvm及相关软件包</span></span><br><span class="line">$ yum install qemu-kvm kvm libvirt libvirt-python libkvmfs-tools virt-install</span><br><span class="line"><span class="comment"># 加载kvm模块</span></span><br><span class="line">$ modprobe kvm</span><br><span class="line"><span class="comment"># 加载特定芯片（cpu）的kvm模块</span></span><br><span class="line"><span class="comment"># For the AMD chip (svm flag):</span></span><br><span class="line">$ modprobe kvm-amd</span><br><span class="line"><span class="comment"># For Intel chip (vmx flag):</span></span><br><span class="line">$ modprobe kvm-intel</span><br><span class="line"><span class="comment"># 验证内核模块是否加载</span></span><br><span class="line">$ lsmod | grep kvm</span><br><span class="line">kvm_intel             200704  0 </span><br><span class="line">kvm                   589824  1 kvm_intel</span><br><span class="line">irqbypass              16384  1 kvm</span><br><span class="line"><span class="comment"># 启动 libvirtd</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> libvirtd.service &amp;&amp; systemctl start libvirtd.service</span><br></pre></td></tr></table></figure><h5 id="3-网络"><a href="#3-网络" class="headerlink" title="3.网络"></a>3.网络</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证安装的虚拟网卡是否有效</span></span><br><span class="line">$ ip link show virbr0有输出信息代表可以了</span><br><span class="line">官方文档上是这么说的：“你可以使用默认的网络设置，或在主机中设置一个网桥。默认网络只允许来自KVM访客的出站通信。如果KVM访客需要完整的网络访问权限，包括与外部主机的通信，则在主机中设置一个Linux网桥。”</span><br><span class="line"><span class="comment"># 设置网桥</span></span><br><span class="line">$ cp /etc/sysconfig/network-scripts/ifcfg-eno1 /root/.</span><br><span class="line">$ <span class="built_in">cd</span> /etc/sysconfig/network-scripts/</span><br><span class="line">$ cp ifcfg-eno1 ifcfg-br0</span><br><span class="line">$ vim ifcfg-br0 <span class="comment">#内容如下</span></span><br><span class="line">DEVICE=br0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">TYPE=Bridge<span class="comment">#桥是区分大小写的，必须大写“B”和小写“ridge”。</span></span><br><span class="line">BOOTPROTO=static</span><br><span class="line">NM_CONTROLLED=no <span class="comment">#指定网卡不受网络管理员控制。为了使网桥正常工作，Network Manager只能控制一台设备。</span></span><br><span class="line">IPADDR=192.168.2.80</span><br><span class="line">NETMASK=255.255.255.0 </span><br><span class="line">GATEWAY=192.168.2.1</span><br><span class="line">DNS1=119.29.29.29</span><br><span class="line"><span class="comment"># 网桥里面不应该出现硬件地址，网桥只是充当eno1的扩展。</span></span><br><span class="line">$ systemctl restart network.service</span><br></pre></td></tr></table></figure><p>两个文件主要配置地方的对比</p><table><thead><tr><th>ifcfg-eno1</th><th>ifcfg-br0</th></tr></thead><tbody><tr><td>DEVICE=eno1</td><td>DEVICE=br0</td></tr><tr><td>TYPE=Ethernet</td><td>TYPE=Bridge</td></tr><tr><td>NM_CONTROLLED=no</td><td>NM_CONTROLLED=no</td></tr><tr><td>ONBOOT=yes</td><td>BOOTPROTO=static</td></tr><tr><td></td><td>IPADDR=192.168.2.80</td></tr><tr><td>BRIDGE=br0 把eno1和br0连接起来</td><td>NETMASK=255.255.255.0</td></tr><tr><td></td><td>ONBOOT=yes</td></tr></tbody></table><p>######3.1.禁用桥接通信中的Netfilter处理：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/sysctl.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 0</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 0</span><br><span class="line">net.bridge.bridge-nf-call-arptables = 0</span><br><span class="line">net.ipv4.ip_forward = 1 <span class="comment">#开启网络转发</span></span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure><h5 id="4-创建虚拟机"><a href="#4-创建虚拟机" class="headerlink" title="4.创建虚拟机"></a>4.创建虚拟机</h5><p>关闭SELinux，如果不能关闭，请参考<a href="http://linux.dell.com/files/whitepapers/KVM_Virtualization_in_RHEL_7_Made_Easy.pdf" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>的做法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有两种方法安装虚拟机</span></span><br><span class="line">①virt-manager: a GUI tool</span><br><span class="line">②virt-install: a <span class="built_in">command</span> line tool.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建存储池，虚拟机映像的存放位置</span></span><br><span class="line">$ mkdir /home/kvm/image</span><br><span class="line">$ virsh <span class="comment">#不加任何参数直接进入交互式控制终端</span></span><br><span class="line">pool-define-as kvm_pool --<span class="built_in">type</span> dir --target /home/kvm/image <span class="comment">#定义一个存储池绑定目录，如果是lvm卷类型改成logical，还其它的自己查</span></span><br><span class="line">pool-build kvm_pool <span class="comment">#建立存储池</span></span><br><span class="line">pool-start kvm_pool <span class="comment">#启动存储池</span></span><br><span class="line">pool-list --all <span class="comment">#验证该存储池是否启动</span></span><br><span class="line">pool-autostart kvm_pool <span class="comment">#存储池开机自动运行</span></span><br><span class="line">pool-info kvm_pool <span class="comment">#查看存储池信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除存储池</span></span><br><span class="line">$ virsh</span><br><span class="line">pool-destroy kvm_pool <span class="comment">#销毁存储池</span></span><br><span class="line">pool-undefine kvm_pool <span class="comment">#取消定义存储池</span></span><br><span class="line">pool-delete kvm_pool <span class="comment">#删除存储池</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建卷</span></span><br><span class="line">$ virsh</span><br><span class="line">vol-create-as --pool kvm_pool --name disk0.img --capacity 50G --allocation 1G --format raw</span><br><span class="line"><span class="comment"># 或者用qemu-img</span></span><br><span class="line">$ qemu-img create -f qcow2 disk0.img 50G</span><br><span class="line"><span class="comment"># raw和qcow2格式之间的转换</span></span><br><span class="line">$ qemu-img convert -f raw -O qcow2 test.raw test.raw.qcow2</span><br><span class="line"><span class="comment"># raw格式镜像增加减少大小(qcow2不可以)</span></span><br><span class="line">$ qemu-img resize disk0.img -10G/+10G</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令安装虚拟机(至少要带的参数有 --name,--ram,--disk/filesystem/nodisk,安装选项)</span></span><br><span class="line">$ virt-install \</span><br><span class="line">       --virt-type=kvm \</span><br><span class="line">       --name=centos7.0 \</span><br><span class="line">       --vcpus=2 \</span><br><span class="line">       --memory=2048 \</span><br><span class="line">       --location=/home/iso/centos7.iso \</span><br><span class="line">       --disk path=/home/kvm/image/centos7.img \</span><br><span class="line">       --network bridge:br0 \</span><br><span class="line">       --graphics none \</span><br><span class="line">       --extra-args=<span class="string">"console=ttyS0"</span> \</span><br><span class="line">       --force</span><br><span class="line"><span class="comment"># qemu安装方式</span></span><br><span class="line">$ qemu-system-x86_64 -m 2048 -smp 1 -<span class="built_in">enable</span>-kvm centos7.img -cdrom /home/iso/centos.iso</span><br><span class="line"><span class="comment"># 安装的过程出现报错什么的请自己去Google解决。</span></span><br><span class="line"><span class="comment"># 克隆导出虚拟机</span></span><br><span class="line">$ virshdumpxml centos7.0 &gt; /home/kvm/vm-demo.xml</span><br><span class="line">$ cp /home/kvm/vm-demo.xml /home/kvm/centos7.0a1.xml</span><br><span class="line"><span class="comment"># xml文件需要做些修改在以下的几个参数：（name、uuid、镜像地址、MAC地址、）uuid用uuidgen生成</span></span><br><span class="line"><span class="comment"># MAC地址生成</span></span><br><span class="line">$ openssl rand -hex 6 | sed <span class="string">'s/..\B/&amp;:/g'</span></span><br><span class="line"><span class="comment"># 注册新虚拟机</span></span><br><span class="line">$ virsh define /home/kvm/centos7.0a1.xml</span><br></pre></td></tr></table></figure><h6 id="4-1虚拟机常用指令（虚拟机-客户机-访客）"><a href="#4-1虚拟机常用指令（虚拟机-客户机-访客）" class="headerlink" title="4.1虚拟机常用指令（虚拟机=客户机=访客）"></a>4.1虚拟机常用指令（虚拟机=客户机=访客）</h6><table><thead><tr><th>命令选项</th><th></th></tr></thead><tbody><tr><td>virsh connect</td><td>连接至 KVM 管理程序</td></tr><tr><td>virsh pool-list –all</td><td>列出所有的存储池</td></tr><tr><td>virsh list –all</td><td>列出本地所有的虚拟主机</td></tr><tr><td>virsh start kvm_name –console</td><td>启动不处于活动状态的虚拟主机，并进入控制台</td></tr><tr><td>virsh autostart kvm_name</td><td>虚拟主机随宿主机启动而自启动</td></tr><tr><td>virsh autostart -disable kvm_name</td><td>禁止虚拟主机随宿主机启动后自启动</td></tr><tr><td>virsh shutdown kvm_name</td><td>关闭处于活动状态的虚拟主机</td></tr><tr><td>virsh reboot kvm_name</td><td>重启虚拟主机</td></tr><tr><td>virsh suspend kvm_name</td><td>暂停虚拟主机</td></tr><tr><td>virsh resume kvm_name</td><td>启动暂停的虚拟主机</td></tr><tr><td>virsh destroy kvm_name</td><td>强制关闭虚拟主机（类似断电）</td></tr><tr><td>virsh dumpxml kvm_name</td><td>显示虚拟主机的当前配置</td></tr><tr><td>virsh dominfo kvm_name</td><td>显示虚拟主机信息</td></tr><tr><td>virsh domid kvm_name</td><td>显示虚拟主机id</td></tr><tr><td>virt-top</td><td>显示虚拟主机内存CPU使用量</td></tr><tr><td>virt-df kvm_name</td><td>显示虚拟主机磁盘的使用量</td></tr><tr><td>virsh</td><td>进入虚拟化控制台</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table><p>#####5.选择一款web管理kvm的软件（WebVirtMgr）（可以选择用linux桌面环境用相关的软件管理virt-manger，我也试过这个操作就是点点了，看个人爱好了，我受不了一台服务器有桌面环境，乐意在服务器上捣腾。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">内容比较简单，它在github上面有文档说明。https://github.com/retspen/webvirtmgr/wiki</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:11 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Virtual" scheme="http://cyoncan.github.io/categories/Virtual/"/>
    
    
      <category term="kvm" scheme="http://cyoncan.github.io/tags/kvm/"/>
    
  </entry>
  
  <entry>
    <title>Nginx日志</title>
    <link href="http://cyoncan.github.io/2017/07/26/Nginx_log/"/>
    <id>http://cyoncan.github.io/2017/07/26/Nginx_log/</id>
    <published>2017-07-26T13:18:49.000Z</published>
    <updated>2018-01-23T05:04:10.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><h5 id="Ⅰ-日志切割"><a href="#Ⅰ-日志切割" class="headerlink" title="Ⅰ.日志切割"></a>Ⅰ.日志切割</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">D=$(data +%Y%M%D)</span><br><span class="line">mv /usr/local/nginx/logs/access.log $&#123;D&#125;.log</span><br><span class="line">kill -USR1 $(cat /usr/local/nginx/nginx.pid)</span><br></pre></td></tr></table></figure><h5 id="Ⅱ-日志日常分析"><a href="#Ⅱ-日志日常分析" class="headerlink" title="Ⅱ.日志日常分析"></a>Ⅱ.日志日常分析</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_formart</span> main <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" <span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" "<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br></pre></td></tr></table></figure><p>1.访问次数最多的前十IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'&#123;print $1&#125;'</span> access.log | sort | uniq -c | sort -nr -k1 | head -n 10   <span class="comment">#uniq去重之前必须先排序,因为不排序的话,uniq无法去重不连续出现的数,sort加不加参数无所谓,只要排序能将一样的IP集中一起即可</span></span></span><br></pre></td></tr></table></figure><p>2.请求总数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wc -l access.log | awk <span class="string">'&#123;print $1&#125;'</span></span></span><br></pre></td></tr></table></figure><p>3.独立IP数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> awk <span class="string">'&#123;print $1&#125;'</span> access.log | sort | uniq -c | wc -l</span></span><br></pre></td></tr></table></figure><p>4.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://cyoncan.github.io/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://cyoncan.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Hype-v Linux vps在同一物理机上xshell无法ssh</title>
    <link href="http://cyoncan.github.io/2017/07/22/Hype-v_LinuxVps_ssh/"/>
    <id>http://cyoncan.github.io/2017/07/22/Hype-v_LinuxVps_ssh/</id>
    <published>2017-07-22T11:29:11.000Z</published>
    <updated>2018-01-23T05:04:10.251Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:11 GMT+0800 (CST) --><a id="more"></a><p>在Hype-v安装完Linux虚拟机后,无法用物理机上的ssh登录管理Linux.虚拟机需要安装微软提供相关的驱动.</p><h3 id="下载Linux-Integration-Services"><a href="#下载Linux-Integration-Services" class="headerlink" title="下载Linux Integration Services"></a>下载Linux Integration Services</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://www.microsoft.com/en-us/download/details.aspx?id=51612</span><br><span class="line">将下载的ISO文件挂载到虚拟机</span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /mnt/cdrom</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mount /dev/cdrom /mnt/cdrom</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /mnt/cdrom</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br><span class="line">进入相关的网卡文件设置固定ip即可</span><br></pre></td></tr></table></figure><p><strong>hype-v 导出虚拟机</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以管理员身份运行powershell,输入如下命令,VMName为你创建虚拟机的名字</span><br><span class="line"><span class="variable">$VmName</span> = <span class="string">"CentOS7"</span></span><br><span class="line"><span class="variable">$Destination</span> = <span class="string">"F:\vm-export"</span></span><br><span class="line"> Stop-VM -Name <span class="variable">$VmName</span></span><br><span class="line"> Export-VM -Name <span class="variable">$VmName</span> -Path <span class="variable">$Dstination</span></span><br></pre></td></tr></table></figure><p><strong>导入到另一台物理机上的hype-v,复制虚拟机依赖的是$Destination目录下的vhdx格式文件。换一台物理机,开始虚拟机镜像的安装。</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">创建Internal vSwitch，通过PowerShell：</span><br><span class="line"><span class="variable">$HyperVVirtualSwitchName</span> = <span class="string">"ISInternalSwitch"</span></span><br><span class="line"> New-VMSwitch -Name <span class="variable">$HyperVVirtualSwitchName</span> -SwitchType Internal</span><br><span class="line"> Get-NetAdapter | where &#123; <span class="variable">$_</span>.Name <span class="nomarkup">-Match</span> <span class="variable">$HyperVVirtualSwitchName</span> &#125; | New-NetIPAddress -IPAddress <span class="string">"192.168.1.1"</span> -PrefixLength <span class="number">24</span></span><br><span class="line"> </span><br><span class="line">基于导出的CentOS7镜像和vSwitch，创建新的实例。键入PowerShell：</span><br><span class="line"><span class="variable">$VMName</span> = <span class="string">"CentOS7"</span></span><br><span class="line"><span class="variable">$HyperVVirtualSwitchName</span> = <span class="string">"ISInternalSwitch"</span></span><br><span class="line"><span class="variable">$VMPath</span> = <span class="string">"F:\vm-import\<span class="variable">$VMName</span>"</span></span><br><span class="line"><span class="variable">$VHDX</span> = <span class="string">"<span class="variable">$VMPath</span>\Virtual Hard Disks\CentOS7-TensorFlow10.vhdx"</span></span><br><span class="line"> New-VM -Name <span class="variable">$VMName</span> -SwitchName <span class="variable">$HyperVVirtualSwitchName</span> -Path <span class="variable">$VMPath</span> -VHDPath <span class="variable">$VHDX</span> -Generation <span class="number">1</span></span><br><span class="line"> Start-VM -Name <span class="variable">$VMName</span></span><br><span class="line"></span><br><span class="line">设置端口转发和开启防火墙。键入Windows批处理命令：</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=<span class="number">22</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">22</span> connectport=<span class="number">22</span> connectaddress=<span class="number">192.168</span>.<span class="number">1.100</span></span><br><span class="line">netsh advfirewall firewall delete rule name=<span class="string">"CentOS_SSH"</span></span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">"CentOS_SSH"</span> protocol=TCP dir=<span class="keyword">in</span> localport=<span class="number">22</span> action=allow</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:11 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Virtual" scheme="http://cyoncan.github.io/categories/Virtual/"/>
    
    
      <category term="hype-v" scheme="http://cyoncan.github.io/tags/hype-v/"/>
    
  </entry>
  
  <entry>
    <title>MySQL_backup_</title>
    <link href="http://cyoncan.github.io/2017/07/20/MySQL_backup/"/>
    <id>http://cyoncan.github.io/2017/07/20/MySQL_backup/</id>
    <published>2017-07-20T08:26:32.000Z</published>
    <updated>2018-01-23T05:04:10.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:11 GMT+0800 (CST) --><a id="more"></a><p>开始是纠结mysql做备份的时候要不要给表加锁,加不加锁的依据是什么?查了下资料,综合自己经验看来,加锁是一定没问题的,最保险的做法.但是没搞明白加锁进行备份是仅仅多了一步加锁解锁的步骤还是会影响备份的效率呢!问了一些人,都没怎么关注过这个.记录了一些资料,在做分析</p><p><strong>1.MySQL备份的几种类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">① 热备份:可以正常读写操作,业务正常进行</span><br><span class="line">② 冷备份:不能进行读写操作,数据库需要关闭服务</span><br><span class="line">③ 温备份:可以进行读操作,但是不能进行写的操作</span><br></pre></td></tr></table></figure><p><strong>2.MySQL的几种存储引擎</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyISAM , InnoDB , MEMORY , MERGE , CSV , ARCHIVE </span><br><span class="line">其中MyISAM不支持热备,InnoDB都可以支持.</span><br></pre></td></tr></table></figure><p><strong>3.MySQL的几种备份工具</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">① mysqldump: 支持所有的存储引擎,支持温备,完全,部分,对于InnoDB可以热备.</span><br><span class="line">② mysqlhotcopy: 仅支持MyISAM,冷备份.如果表均为MyISAM.可以使用这个</span><br><span class="line">② xtrabackup: InnoDB/XtraDB热备,支持完全,增量</span><br><span class="line">④ lvm2 snpashot: 热备,使用文件系统管理工具进行备份</span><br></pre></td></tr></table></figure><p>(1) 用mysqldump备份</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysqldump -uroot -p --single-transaction --databases db1 --tables t1 &gt; /tmp/db1-t1.sql   <span class="comment">#--single-transaction此选项能实现热备InnoDB表和库,因此不需要同时使用--lock-all-tables;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysqldump -uroot -p --lock-all-tables --all-databases &gt; /tmp/bak.sql   <span class="comment">#备份全部的数据库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysqldump -uroot -p --lock-all-tables --databases db1 db2 &gt; /tmp/db1-db2.sql   <span class="comment">#备份多个数据库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysqldump -uroot -p -h=ip1 --databases db1 | mysql -uroot -ppassword -hip2 db2   <span class="comment">#ip1机器的db1导入到ip2机器的db2数据库,db2要创建好</span></span></span><br></pre></td></tr></table></figure><p>锁表这一步也可以在mysql终端里面进行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush tables with read lock   #刷新锁定全部的库和表.</span><br><span class="line">mysql&gt; flush logs;   #刷新滚动日志,在锁定表后执行.</span><br><span class="line">$ mysqldump -uroot -p --databases db1 &gt; /tmp/db1.sql   #起新终端</span><br><span class="line">mysql&gt; unlock tables</span><br></pre></td></tr></table></figure><p>mysqldump常用的几个参数:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--no-data   #只导出表结构不导出数据</span><br><span class="line">--lock-tables   #对所有表加读锁.(默认开启,-skip-lock-tables来关闭)</span><br><span class="line">--lock-all-tables   #锁定所有库中的表,通过在整个dump的过程中持有全局读锁来实现,会自动关闭--single-transactionh和--lock-tables</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:11 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://cyoncan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>tcp_bbr</title>
    <link href="http://cyoncan.github.io/2017/07/12/tcp_bbr/"/>
    <id>http://cyoncan.github.io/2017/07/12/tcp_bbr/</id>
    <published>2017-07-12T11:53:43.000Z</published>
    <updated>2018-02-06T12:16:47.465Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p><strong>TCP BBR是Google开源的拥塞控制算法,在Linux4.11内核版本上已经进行使用,最低内核要求4.9</strong></p><h2 id="Debian8-Ubuntu"><a href="#Debian8-Ubuntu" class="headerlink" title="Debian8/Ubuntu"></a>Debian8/Ubuntu</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12.1/linux-headers-4.12.1-041201-generic_4.12.1-041201.201707121132_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dpkg -i linux-headers-4.12.1-041201-generic_4.12.1-041201.201707121132_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> update-grub</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> reboot</span></span><br></pre></td></tr></table></figure><h2 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum --enablerepo=elrepo-kernel install kernel-ml -y</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep kernel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ev    <span class="comment">#删除旧内核</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \<span class="string">'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> grub2-set-default 0  <span class="comment">#default 0表示第一个内核设置为默认运行, 选择最新内核就对了</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> reboot</span></span><br></pre></td></tr></table></figure><p>重新启动后，如果会出现“read-only file system” 的错误，root账户下执行mount -o remount rw / 即可</p><h2 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uname -r    <span class="comment"># 查看内核是刚刚安装的版本</span></span></span><br></pre></td></tr></table></figure><p>执行 <code>lsmod | grep bbr</code>，结果中如果没有 <code>tcp_bbr</code> 就先执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> modprobe tcp_bbr</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"tcp_bbr"</span> &gt;&gt; /etc/modules-load.d/modules.conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl -p</span></span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sysctl net.ipv4.tcp_available_congestion_control</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl net.ipv4.tcp_congestion_control</span></span><br></pre></td></tr></table></figure><p>结果如果都有bbr,则内核已开启bbr,</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://cyoncan.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Nginx平滑升级</title>
    <link href="http://cyoncan.github.io/2017/07/12/Nginx_upgrade/"/>
    <id>http://cyoncan.github.io/2017/07/12/Nginx_upgrade/</id>
    <published>2017-07-12T04:23:36.000Z</published>
    <updated>2018-01-23T05:04:10.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p>查看原来Nginx的编译参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /data/<span class="built_in">local</span>/nginx/sbin/nginx -V</span></span><br><span class="line">nginx version: nginx/1.10.3</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/data/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/data/src/pcre-8.40</span><br></pre></td></tr></table></figure><p>下载准备升级的源码包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -P /data/<span class="built_in">local</span>/src https://nginx.org/download/nginx-1.12.1.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar zxf nginx-1.12.1.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/data/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/data/src/pcre-8.40</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line">不要执行make install,只需make即可</span><br></pre></td></tr></table></figure><p>接下来的几步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mv ~/sbin/nginx ~/sbin/nginx.old</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp ~/src/nginx-1.12.1/objs/nginx /data/<span class="built_in">local</span>/nginx/sbin/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx -V   <span class="comment">#查看到最新版本号</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> nginx -t   <span class="comment">#测试下最新版是否正常</span></span></span><br></pre></td></tr></table></figure><p>平滑升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -USR2 `cat /data/<span class="built_in">local</span>/nginx/logs/nginx.pid`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -WINCH `cat /data/<span class="built_in">local</span>/nginx/logs/nginx.pid.oldbin`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -QUIT `cat /data/<span class="built_in">local</span>/nginx/logs/nginx.pid.oldbin`</span></span><br></pre></td></tr></table></figure><p>Nginx信号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TERM或INT   # 快速停止nginx 指立即停止当前Nginx服务正在处理的所有网络请求，马上丢弃连接，停止工作</span><br><span class="line">QUIT        # 平缓停止nginx 指允许Nginx服务将当前正在处理的网络请求处理完成，但不再接受新的请求，之后关闭连接，停止工作</span><br><span class="line">HUP         # 平滑重启 Nginx服务进程接受到信号后，首先读取新的Nginx配置文件，如果配置语法正确，则启动新的Nginx服务，然后平缓关闭旧的服务进程，如果新的Nginx配置文件有问题，将显示错误，仍然使用旧的Nginx进程提供服务</span><br><span class="line">USR1        # 重新打开日志文件，常用于日志切割</span><br><span class="line">USR2        # 平滑升级 指使用新版本的Nginx文件启动服务，之后平缓停止原有的Nginx进程</span><br><span class="line">WINCH       # 平缓停止worker process，用于nginx平滑升级</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://cyoncan.github.io/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://cyoncan.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins</title>
    <link href="http://cyoncan.github.io/2017/07/10/Jenkins/"/>
    <id>http://cyoncan.github.io/2017/07/10/Jenkins/</id>
    <published>2017-07-10T11:53:41.000Z</published>
    <updated>2018-02-06T12:36:13.915Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:11 GMT+0800 (CST) --><a id="more"></a><p>Jenkins是基于java语言写的一款，持续集成的web界面管理系统。第一次见过在Linux上这么简单就运行起来的环境(需要有jdk)。</p><p>直接在官网上下载war包,运行 java -jar jenkins.war</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -P /opt/jenkins https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.60.1/jenkins.war</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> java -jar jenkins.war</span></span><br><span class="line">http://ip:8080</span><br><span class="line">根据提示就可以初始化完成使用了，可以通过supervisor管理它运行。</span><br></pre></td></tr></table></figure><p>jdk安装yum install java</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh jdk-8u131-linux-x64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br><span class="line">java version "1.8.0_131"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)</span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ql|sort</span></span><br><span class="line">jdk1.8.0_131-1.8.0_131-fcs.x86_64   # 能查询到rpm安装的jdk名字</span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ql jdk1.8.0_131-1.8.0_131-fcs.x86_64   <span class="comment"># 查询jdk的目录为</span></span></span><br><span class="line">/usr/java/jdk1.8.0_131   # 在稍后的web几面里面配置相关环境可以填这个路径</span><br></pre></td></tr></table></figure><p>后续相关待补充……<a href="https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions" rel="external nofollow noopener noreferrer" target="_blank">Jenkins wiki参考</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:11 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="CI&amp;CD" scheme="http://cyoncan.github.io/categories/CI-CD/"/>
    
    
      <category term="jenkins" scheme="http://cyoncan.github.io/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>php编译报错</title>
    <link href="http://cyoncan.github.io/2017/07/01/Php_make_err/"/>
    <id>http://cyoncan.github.io/2017/07/01/Php_make_err/</id>
    <published>2017-07-01T01:14:15.000Z</published>
    <updated>2018-01-23T05:04:10.259Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p>PHP重新编译安装报错：</p><p>configure: error: Cannot find libmysqlclient_r under /data/local/mysql<br>Note that the MySQL client library is not bundled anymore!</p><p>php编译参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/data/local/php --with-config-file-path=/data/local/php/etc --with-apxs2=/data/local/httpd/bin/apxs --with-mysql=/data/local/mysql --with-mysqli=/data/local/mysql/bin/mysql_config --with-pdo-mysql=/data/local/mysql --with-pcre-dir=/data/local/pcre/bin/pcre-config --enable-bcmath --enable-exif --enable-fpm --enable-ftp --enable-gd-native-ttf --enable-inline-optimization --enable-mbstring --enable-opcache --enable-pcntl --enable-pdo_mysql --enable-soap --enable-shmop --enable-sockets --enable-sysvsem --enable-sysvmsg --enable-sysvshm --enable-zip --with-bz2 --with-curl --with-freetype-dir --with-gd --with-gdbm --with-gmp --with-gettext --with-jpeg-dir --with-libxml-dir --with-libdir --with-mhash --with-mcrypt --with-openssl --with-pear --with-png-dir --with-xsl --with-zlib-dir</span><br></pre></td></tr></table></figure><p><em>–with-mysql=mysqlnd是不报错的参数</em></p><p>原因：</p><p>我之前搭建的lnmp环境，没有使用httpd，在后来编译APACHE的时候，使用–with-mpm模块，所以就必须在编译MYSQL的时候加上 –enable-thread-safe-client.</p><p>因为MySQL不能随意停止进行重新编译，怕造成问题故障。可定是不能重新编译MySQL的。查了下这个问题是PHP5.2的一个改进，在PHP5.2.0之前的版本都不需要MYSQL启用安全线程。就找了下其他方法，看到大多数的都是说需要 mysql-devel，这个我之前mysql安装的时候都是有的，包括报错提示的libmysqlclient_r.so在我的目录/dala/local/mysql/lib下都是存在的。但是还是一直报哪个错误，在网上查了好多都是说做个软连或者复制libmysqlclient.so.18.1.0到libmysqlclient_r.so就可以了。我试了很多都不行，包括ln -s lib lib64 。后来直接改了–with-mysql=mysqlnd就OK了。后来想想或许这种也可以–with-mysql -lib-dir=/data/local/mysql/lib</p><p>在这里记录下httpd的编译参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/data/local/httpd --with-apr=/data/local/apr/bin/apr-1-config --with-apr-util=/data/local/apr-util/bin/apu-1-config --with-pcre=/data/local/pcre/bin/pcre-config --with-mpm=worker --enable-access-compat --enable-alias --enable-authn-core --enable-authn-file --enable-auth-basic --enable-authz-core --enable-authz-host --enable-authz-user --enable-authz-groupfile --enable-autoindex --enable-cgi --enable-cache --enable-cache-disk --enable-dir --enable-deflate --enable-debugger-mode --enable-env --enable-expires --enable-file-cache --enable-filter --enable-http --enable-headers --enable-log-config --enable-load-all-modules --enable-mime --enable-modules=most --enable-reqtimeout --enable-rewrite --enable-so --enable-setenvif --enable-status --enable-speling --enable-static-support --enable-unixd --enable-version --enable-vhost-alias --enable-mods-shared=all</span><br></pre></td></tr></table></figure><p>查看nginx编译参数：/data/local/nginx/sbin/nginx -V<br>查看apache编译参数：cat /data/local/httpd/build/config.nice<br>查看mysql编译参数：cat /data/local/mysql/bin/mysqlbug | grep CONFIGURE_LINE<br>查看php编译参数：/data/local/php/bin/php -i | grep configure 或者 php -r “phpinfo();”|grep configure</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://cyoncan.github.io/categories/PHP/"/>
    
    
      <category term="php" scheme="http://cyoncan.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php-fpm进程数问题</title>
    <link href="http://cyoncan.github.io/2017/06/22/Php-fpm/"/>
    <id>http://cyoncan.github.io/2017/06/22/Php-fpm/</id>
    <published>2017-06-22T13:52:16.000Z</published>
    <updated>2018-01-23T05:04:10.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p>针对nginx+php-fpm在使用的过程中php-fpm进程数不释放内存给系统导致内存报警的问题，本来应该是通过优化相关配置文件去调节的，但配置文件已经调优了，需要一段时间等待观察。就用种简单粗暴的办法脚本判断内存空余通过crontab定时脚本来重启php-fpm,这样也可以达到释放内存的目的.但是网站如果访问量不稳定的出现,这种办法就不是很有效了.所以还是需要研究下配置文件的相关调优.</p><p>配置文件相关:</p><p>php-fpm.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pm.max_request   该值是指发送多少个请求后会重启改线程.</span><br><span class="line">pm.max_chlidren   每次php-fpm会建立多少个进程.</span><br></pre></td></tr></table></figure><p>ulimit值的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">ulimit</span> -a   查看所有限制值</span></span><br><span class="line">-t: cpu time (seconds)         unlimited</span><br><span class="line">-f: file size (blocks)         unlimited</span><br><span class="line">-d: data seg size (kbytes)     unlimited</span><br><span class="line">-s: stack size (kbytes)        10240</span><br><span class="line">-c: core file size (blocks)    0</span><br><span class="line">-m: resident set size (kbytes) unlimited</span><br><span class="line">-u: processes                  62794</span><br><span class="line">-n: file descriptors           51200       系统对每一个进程打开文件描述符的数量</span><br><span class="line">-l: locked-in-memory size (kb) 64</span><br><span class="line">-v: address space (kb)         unlimited</span><br><span class="line">-x: file locks                 unlimited</span><br><span class="line">-i: pending signals            62794</span><br><span class="line">-q: bytes in POSIX msg queues  819200</span><br><span class="line">-e: max nice                   0</span><br><span class="line">-r: max rt priority            0</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/security/limits.conf   修改<span class="built_in">ulimit</span> -n 值的大小,php-fpm里面的rlimit值和该值大小相等即可.</span></span><br></pre></td></tr></table></figure><p>参考文章: <a href="http://t.cn/RzlwzM5" rel="external nofollow noopener noreferrer" target="_blank">http://t.cn/RzlwzM5</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://cyoncan.github.io/categories/PHP/"/>
    
    
      <category term="php-fpm" scheme="http://cyoncan.github.io/tags/php-fpm/"/>
    
      <category term="ulimit" scheme="http://cyoncan.github.io/tags/ulimit/"/>
    
  </entry>
  
  <entry>
    <title>Python多版本管理</title>
    <link href="http://cyoncan.github.io/2017/06/16/Python_manag/"/>
    <id>http://cyoncan.github.io/2017/06/16/Python_manag/</id>
    <published>2017-06-16T10:53:25.000Z</published>
    <updated>2018-01-23T05:04:10.259Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><h3 id="Python多版本共存管理之pyenv"><a href="#Python多版本共存管理之pyenv" class="headerlink" title="Python多版本共存管理之pyenv"></a>Python多版本共存管理之pyenv</h3><p>一般的系统都是自带2.*版本,有时候部署一些程序又需要用到3.x的，比如jumpserver就是需要3.5.x及以上的。所有Python需要用到多版本共存。</p><h4 id="1-安装pyenv"><a href="#1-安装pyenv" class="headerlink" title="1.安装pyenv"></a>1.安装pyenv</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exec</span> <span class="variable">$SHELL</span></span></span><br></pre></td></tr></table></figure><p><strong>Zsh note</strong>: Modify your <code>~/.zshenv</code> file instead of <code>~/.bash_profile</code>.例如像我使用的oh_my_zsh的就需要注意这个.</p><p><strong>Ubuntu and Fedora note</strong>: Modify your <code>~/.bashrc</code> file instead of <code>~/.bash_profile</code>.</p><h4 id="2-Upgrading-pyenv"><a href="#2-Upgrading-pyenv" class="headerlink" title="2.Upgrading pyenv"></a>2.Upgrading pyenv</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> $(pyenv root)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line"><span class="meta">#</span><span class="bash">升级到指定的版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> $(pyenv root)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git fetch</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line">v0.1.0</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout v0.1.0</span></span><br></pre></td></tr></table></figure><p><strong>安装Python的依赖包</strong></p><p>在安装Python时需要首先安装其依赖的其他软件包，已知的一些需要预先安装的库如下。</p><p>在CentOS/RHEL/Fedora下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install readline readline-devel readline-static</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install openssl openssl-devel openssl-static</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install sqlite-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install bzip2-devel bzip2-libs</span></span><br></pre></td></tr></table></figure><p>对付pyenv默认下载慢的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v=3.5.2|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v   #V是版本号,去Sohu镜像站点下载.</span><br><span class="line">export  PYTHON_BUILD_MIRROR_URL="http://pyenv.qiniudn.com/pythons/"   #或者使用这个七牛的镜像站点,但是好多新版本没有.</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Python" scheme="http://cyoncan.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="http://cyoncan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Zentao apache改用nginx</title>
    <link href="http://cyoncan.github.io/2017/06/08/zentao_nignx/"/>
    <id>http://cyoncan.github.io/2017/06/08/zentao_nignx/</id>
    <published>2017-06-08T12:13:43.000Z</published>
    <updated>2018-01-23T05:04:10.263Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p>zentao是一套还不错的项目管理系统，有开源的版本。最开始部署的一台服务器是用的apache，后来种种原因，需要迁移到另外一台机器上，新机器的php是用nginx的，一直对nginx比较好感，所以也不打算用httpd配置zentao。由于对zentao的安装和配置不熟悉，整了老久。后来google了下，查到了一些问题所在。就记录下。好记性不如烂笔头啊。</p><p>1.禅道的配置信息（注意修改requestType使用的方式）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@intel ~ $ cat /data/www/zentao/config/my.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;installed       = <span class="literal">true</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;debug           = <span class="literal">false</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;requestType     = <span class="string">'GET'</span>;   //nginx使用的方式，nginx不支持使用pathinfo方式路由</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;requestType     = <span class="string">'PATH_INFO'</span>;   //apache使用的方式</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;db-&gt;host        = <span class="string">'192.168.2.100'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;db-&gt;port        = <span class="string">'3306'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;db-&gt;name        = <span class="string">'zentao'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;db-&gt;user        = <span class="string">'zentao'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;db-&gt;password    = <span class="string">'zentao'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;db-&gt;prefix      = <span class="string">'zt_'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;webRoot         = getWebRoot();</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;default-&gt;lang   = <span class="string">'zh-cn'</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">config-&gt;mysqldump       = <span class="string">''</span>;</span></span><br></pre></td></tr></table></figure><p>2.nginx配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@intel ~ $ cat /data/local/nginx/conf/vhost/zentao.conf</span><br><span class="line">server</span><br><span class="line">        &#123;</span><br><span class="line">         listen 80;</span><br><span class="line">         server_name zentao.test.com;</span><br><span class="line">         index index.html index.php;</span><br><span class="line">         root  /data/www/zentao/www;</span><br><span class="line">     access_log  /data/logs/$SERVER_NAME.access.log main;</span><br><span class="line"> error_log  /data/logs/zentao.test.org.error.log error;</span><br><span class="line"></span><br><span class="line"> location / &#123;</span><br><span class="line"> root /data/www/zentao/www;</span><br><span class="line">client_max_body_size 50m;</span><br><span class="line">index index.php index.html;</span><br><span class="line">if (!-e $request_filename) &#123;</span><br><span class="line">rewrite ^/(.*)$ /index.php/$1 last;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">         location ~ \.php$ &#123;</span><br><span class="line"> root /data/www/zentao/www;</span><br><span class="line">         fastcgi_index   index.php;</span><br><span class="line">         fastcgi_pass    127.0.0.1:9000;</span><br><span class="line">         include         fastcgi_params;</span><br><span class="line">         fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</span><br><span class="line">  fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://cyoncan.github.io/categories/Nginx/"/>
    
    
      <category term="zentao" scheme="http://cyoncan.github.io/tags/zentao/"/>
    
  </entry>
  
  <entry>
    <title>Dns_Server-Bind</title>
    <link href="http://cyoncan.github.io/2017/06/07/bind/"/>
    <id>http://cyoncan.github.io/2017/06/07/bind/</id>
    <published>2017-06-07T09:33:16.000Z</published>
    <updated>2018-02-06T12:16:47.425Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p><strong>需求：公司地址迁移，原来内部测试服务器用的是某百兆企业路由器做的DNS重定向。新地址用的是五百兆宽带，弃用了原来的路由器，换了新的千兆，但是没有DNS重定向功能，于是就在测试服务器本身搭建DNS服务，提供内网自定义域名解析。</strong></p><p>系统： centos6.8</p><p>ip地址：192.168.1.100</p><p>dns软件：bind</p><p>域名：test88.tt</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install <span class="built_in">bind</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install <span class="built_in">bind</span>-chroot</span></span><br></pre></td></tr></table></figure><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp /etc/named.conf /etc/named.conf.bak   <span class="comment">#先备份原配置文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/named.conf</span></span><br><span class="line">//</span><br><span class="line">// named.conf</span><br><span class="line">//</span><br><span class="line">// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS</span><br><span class="line">// server as a caching only nameserver (as a localhost DNS resolver only).</span><br><span class="line">//</span><br><span class="line">// See /usr/share/doc/bind*/sample/ for example named configuration files.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">options &#123;</span><br><span class="line">listen-on port 53 &#123; any; &#125;;   //53为dns监听端口，any代表监听所以主机。</span><br><span class="line">listen-on-v6 port 53 &#123; ::1; &#125;;   //属于ipv6</span><br><span class="line">directory "/var/named";   </span><br><span class="line">dump-file "/var/named/data/cache_dump.db";</span><br><span class="line">        statistics-file "/var/named/data/named_stats.txt";</span><br><span class="line">        memstatistics-file "/var/named/data/named_mem_stats.txt";</span><br><span class="line">allow-query     &#123; any; &#125;;   //对DNS服务器提出查询请求。any代表任何人</span><br><span class="line">recursion yes;</span><br><span class="line"></span><br><span class="line">dnssec-enable yes;</span><br><span class="line">dnssec-validation yes;</span><br><span class="line"></span><br><span class="line">/* Path to ISC DLV key */</span><br><span class="line">bindkeys-file "/etc/named.iscdlv.key";</span><br><span class="line"></span><br><span class="line">managed-keys-directory "/var/named/dynamic";</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">logging &#123;</span><br><span class="line">        channel default_debug &#123;</span><br><span class="line">                file "data/named.run";</span><br><span class="line">                severity dynamic;</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone "." IN &#123;</span><br><span class="line">type hint;</span><br><span class="line">file "named.ca";</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">include "/etc/named.rfc1912.zones";</span><br><span class="line">include "/etc/named.root.key";</span><br></pre></td></tr></table></figure><h3 id="3-自定义域名解析配置"><a href="#3-自定义域名解析配置" class="headerlink" title="3.自定义域名解析配置"></a>3.自定义域名解析配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/named.rfc1912.zones   //添加域</span></span><br><span class="line">//正向域</span><br><span class="line">zone "test88.tt" IN &#123;</span><br><span class="line">type master;</span><br><span class="line">file "test88.tt.zone";</span><br><span class="line">allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">//反向域</span><br><span class="line">zone "1.168.192.in-addr.arpa" IN &#123;</span><br><span class="line">type master;</span><br><span class="line">file "1.168.192.arpa";</span><br><span class="line">allow-update &#123; none; &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-自定义test88-tt-zone和1-168-192-arpa文件"><a href="#4-自定义test88-tt-zone和1-168-192-arpa文件" class="headerlink" title="4.自定义test88.tt.zone和1.168.192.arpa文件"></a>4.自定义test88.tt.zone和1.168.192.arpa文件</h3><p>test88.tt.zone</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /var/named/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp -a named.localhost test88.tt.zone</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim test88.tt.zone</span></span><br><span class="line"><span class="meta">$</span><span class="bash">TTL 86400</span></span><br><span class="line">@IN SOAns.test88.tt. rname.invalid. (</span><br><span class="line">0; serial</span><br><span class="line">1D; refresh</span><br><span class="line">1H; retry</span><br><span class="line">1W; expire</span><br><span class="line">3H ); minimum</span><br><span class="line">@INNSns.test88.tt.</span><br><span class="line">nsINA192.168.2.100</span><br><span class="line">wwwINA192.168.2.100</span><br><span class="line">mailIN  A192.168.2.115</span><br><span class="line">zentaoINA192.168.2.100</span><br><span class="line">wikiINA192.168.2.100</span><br></pre></td></tr></table></figure><p>1.168.192.arpa</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">TTL 86400</span></span><br><span class="line">@IN SOAtest88.tt. rname.invalid. (</span><br><span class="line">0; serial</span><br><span class="line">1D; refresh</span><br><span class="line">1H; retry</span><br><span class="line">1W; expire</span><br><span class="line">3H ); minimum</span><br><span class="line">IN NS@</span><br><span class="line">INA127.0.0.1</span><br><span class="line">100INPTRwww.test88.tt.</span><br><span class="line">100INPTRmail.test88.tt.</span><br><span class="line">100INPTRzentao.test88.tt.</span><br><span class="line">100INPTRwiki.test88.tt.</span><br></pre></td></tr></table></figure><h3 id="5-修改DNS配置"><a href="#5-修改DNS配置" class="headerlink" title="5.修改DNS配置"></a>5.修改DNS配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/resolv.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Generated by NetworkManager</span></span><br><span class="line">nameserver 192.168.2.100</span><br><span class="line">nameserver 192.168.2.1</span><br><span class="line"><span class="meta">$</span><span class="bash"> service named start</span></span><br></pre></td></tr></table></figure><h3 id="6-修改客户端机器的DNS为192-168-2-100"><a href="#6-修改客户端机器的DNS为192-168-2-100" class="headerlink" title="6.修改客户端机器的DNS为192.168.2.100"></a>6.修改客户端机器的DNS为192.168.2.100</h3><p><em>服务器防火墙开放53端口udp和tcp均要，关闭selinux。</em></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="dns" scheme="http://cyoncan.github.io/tags/dns/"/>
    
      <category term="bind" scheme="http://cyoncan.github.io/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>IP地址分类</title>
    <link href="http://cyoncan.github.io/2017/06/01/ip_addr/"/>
    <id>http://cyoncan.github.io/2017/06/01/ip_addr/</id>
    <published>2017-06-01T08:19:29.000Z</published>
    <updated>2018-02-06T12:40:01.730Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><h3 id="一、IP包头"><a href="#一、IP包头" class="headerlink" title="一、IP包头"></a>一、IP包头</h3><p>ip包头固定长度180位（bit）= 20字节</p><h3 id="二、ip地址分类"><a href="#二、ip地址分类" class="headerlink" title="二、ip地址分类"></a>二、ip地址分类</h3><table><thead><tr><th style="text-align:center">网络类别</th><th>最大网络数</th><th>IP地址范围</th><th>最大主机数</th><th>私有地址范围</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td>126=2^7-2</td><td>1.0.0.0~126.255.255.255</td><td>2^24-2</td><td>10.0.0.0~10.255.255.255</td></tr><tr><td style="text-align:center">B</td><td>16384=2^14</td><td>128.0.0.0~191.255.255.255</td><td>2^16-2</td><td>172.16.0.0.~172.31.255.255</td></tr><tr><td style="text-align:center">C</td><td>2097152=2^21</td><td>192.0.0.0~223.255.255.255</td><td>2^8-2</td><td>192.168.0.0~192.168.255.255</td></tr><tr><td style="text-align:center">D</td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">E</td><td></td><td></td><td></td></tr></tbody></table><p>127.0.0.1代表电脑本机地址。</p><p>A类地址，第一位数代表网段；B类地址，前两段位数代表网段；C类地址，前三段位数代表网段。不同网段之间的访问需要通过路由。</p><p>私有地址可以在局域网内使用，不能被公网直接访问。例如192.168.0.1</p><table><thead><tr><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td>00000000.00000000.00000000.00000000</td><td>0.0.0.0</td></tr><tr><td>11111111.11111111.11111111.11111111</td><td>255.255.255.255</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="None" scheme="http://cyoncan.github.io/categories/None/"/>
    
    
      <category term="ip" scheme="http://cyoncan.github.io/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>Nginx负载均衡</title>
    <link href="http://cyoncan.github.io/2017/05/23/Nginx_LB/"/>
    <id>http://cyoncan.github.io/2017/05/23/Nginx_LB/</id>
    <published>2017-05-23T11:12:39.000Z</published>
    <updated>2018-01-23T05:04:10.255Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><h3 id="Nginx几种负载均衡算法"><a href="#Nginx几种负载均衡算法" class="headerlink" title="Nginx几种负载均衡算法"></a>Nginx几种负载均衡算法</h3><ul><li><p><strong>1.轮询(默认)</strong></p><p>每个请求按时间顺序逐一分配到不同的后端服务器,如果后端某台服务器宕机,故障系统被自动删除,是用户访问不受影响.</p></li><li><p><strong>2.weight(按权值轮询)</strong></p><p>weight值越大,分配到的访问机率越高,主要用于后端每个服务器性能不均的情况下.</p></li><li><p><strong>3.ip_hash</strong></p><p>每个请求按访问的ip的hash结果分配,这样来自同一个IP的访客固定访问一个后端服务器,有效解决了动态网页存在session共享问题.</p></li><li><p><strong>4.fair</strong></p><p>一个更加智能的负载均衡算法,可以依据页面大小和加载时间长短智能地进行负载均衡,也就是根据后端服务器的响应时间来分配请求,响应时间段的优先分配.</p></li><li><p><strong>5.url_hash</strong></p><p>按访问url的hash结果来分配请求,使每个url定向到同一个后端服务器,可以进一步提高后端缓存服务器的效率.</p></li><li><p><strong>6.least_conn</strong></p><p>最少连接负载均衡算法,每次选择的server都是当前最少连接的一个server.</p></li></ul><p>配置负载均衡,使用upstream模块.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">user www;</span><br><span class="line">worker_processes 4;</span><br><span class="line">events&#123;</span><br><span class="line">  worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">  upstream server &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">    server 192.168.1.1 weight=3;</span><br><span class="line">    server 192.168.1.2 weight=1;</span><br><span class="line">    server 192.168.1.3 down;</span><br><span class="line">    server 192.168.1.4 backup;</span><br><span class="line">    server 192.168.1.5 max_fails=3 fail_timeout=60s;</span><br><span class="line">  &#125;</span><br><span class="line"> server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http://server;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>upstream支持的状态参数</p><p>down 当前的server暂时不参与负载均衡.</p><p>backup 预留的备份机,当其他所有的非backup机出现故障或者忙碌时,才去访问backup机.</p><p>max_fails 允许请求访问失败的次数,默认为1</p><p>proxy_next_upstream 模块自定义的错误</p><p>fail_timeout max_fails次数之后,暂停服务的时间.两者可以同时使用.</p><p><em>注: 当负载均衡调度的算法为ip_hash时,后端服务器在负载均衡调度中的状态不可以是weight和 backup</em></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://cyoncan.github.io/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://cyoncan.github.io/tags/nginx/"/>
    
      <category term="lb" scheme="http://cyoncan.github.io/tags/lb/"/>
    
  </entry>
  
  <entry>
    <title>git_ssh</title>
    <link href="http://cyoncan.github.io/2017/05/22/git_ssh/"/>
    <id>http://cyoncan.github.io/2017/05/22/git_ssh/</id>
    <published>2017-05-22T11:53:43.000Z</published>
    <updated>2018-02-02T16:58:18.438Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p>记录:</p><p>同台电脑多github账号使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_github -C <span class="string">"yourname@email.com"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_gitlab -C <span class="string">"myname@email.com"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">eval</span> $(ssh-agent -s)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-add ~/.ssh/id_rsa_github</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-add ~/.ssh/id_rsa_gitlab</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.ssh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim config</span></span><br><span class="line"><span class="meta">#</span><span class="bash">账号一</span></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">账号二</span></span><br><span class="line">Host gitlab.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br><span class="line">Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@gitlab.com</span></span><br><span class="line">Hi xxx! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h5 id="git-config"><a href="#git-config" class="headerlink" title="git-config"></a>git-config</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"John Doe"</span></span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br><span class="line">$ git config --global core.editors vim</span><br><span class="line">$ git config --global merge.tool vimdiff</span><br><span class="line">$ git config --global color.diff.meta <span class="string">"blue black bold"</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Git" scheme="http://cyoncan.github.io/categories/Git/"/>
    
    
      <category term="github" scheme="http://cyoncan.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>序列化和反序列化</title>
    <link href="http://cyoncan.github.io/2017/05/18/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://cyoncan.github.io/2017/05/18/序列化和反序列化/</id>
    <published>2017-05-18T11:42:51.000Z</published>
    <updated>2018-02-06T12:39:30.801Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><p><strong>序列化和反序列化的概念</strong></p><p>序列化 : 对象转换为字节序列的过程.</p><p>反序列化 : 字节序列恢复为对象的过程</p><p><strong>对象队序列化使用场景:</strong></p><p>①把对象的字节序列永久地保存到硬盘上, 通常存放在一个文件中.</p><p>②在网络上传送对象的字节序列.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="None" scheme="http://cyoncan.github.io/categories/None/"/>
    
    
      <category term="序列化" scheme="http://cyoncan.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>nmap扫描</title>
    <link href="http://cyoncan.github.io/2017/05/18/Nmap/"/>
    <id>http://cyoncan.github.io/2017/05/18/Nmap/</id>
    <published>2017-05-18T04:50:56.000Z</published>
    <updated>2018-02-06T12:16:47.449Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><h3 id="1-获取远程主机的系统类型及开放的端口"><a href="#1-获取远程主机的系统类型及开放的端口" class="headerlink" title="1. 获取远程主机的系统类型及开放的端口"></a>1. 获取远程主机的系统类型及开放的端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nmap -sS -P0 -sV -O &lt;target&gt;&lt;target&gt;可以为ip/主机名/域名/</span></span><br><span class="line">-sL   列表扫描</span><br><span class="line">-sT   TCP端口扫描</span><br><span class="line">-sS   TCP同步(SYN)端口扫描半开放隐身扫描</span><br><span class="line">-sU   UDP端口扫描</span><br><span class="line">-sP   Ping扫描</span><br><span class="line">-P0   允许关闭ping进行扫描</span><br><span class="line">-sV   打开系统版本检测</span><br><span class="line">-O    尝试识别远程主机OS</span><br><span class="line">-A    打开操作系统指纹和版本检测</span><br><span class="line">-v    输出详细扫描情况</span><br></pre></td></tr></table></figure><h3 id="2-列出开放了指定端口的主机列表"><a href="#2-列出开放了指定端口的主机列表" class="headerlink" title="2.列出开放了指定端口的主机列表"></a>2.列出开放了指定端口的主机列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -p 80 -oG</span><br></pre></td></tr></table></figure><h3 id="3-寻找所有在线主机"><a href="#3-寻找所有在线主机" class="headerlink" title="3.寻找所有在线主机"></a>3.寻找所有在线主机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.0.0/24</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://cyoncan.github.io/tags/linux/"/>
    
      <category term="nmap" scheme="http://cyoncan.github.io/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>sed</title>
    <link href="http://cyoncan.github.io/2017/05/17/sed/"/>
    <id>http://cyoncan.github.io/2017/05/17/sed/</id>
    <published>2017-05-17T13:23:51.000Z</published>
    <updated>2018-02-06T12:16:47.457Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --><a id="more"></a><h3 id="一、sed简介"><a href="#一、sed简介" class="headerlink" title="一、sed简介"></a>一、sed简介</h3><p><strong>sed命令</strong></p><ul><li><p>a : 新增， a 的后面可以接字串，而这些字串会在新的一行出现（目前的下一行）。</p></li><li><p>c : 取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行。</p></li><li><p>d : 删除，d 后面通常不接任东西。</p></li><li><p>i : 插入， i 的后面可以接字符串，而这些字符串会在新的一行出现（目前的上一行）。</p></li><li><p>p : 列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行。</p></li><li><p>s : 取代，可以直接进行取代的工作！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是。</p></li></ul><p><strong>sed选项</strong></p><ul><li>-e : 多点编辑，-e script指定的script来处理输入的文本文件。</li><li>-n : 仅显示script处理后的结果(经过sed处理的一行或者动作才会被列出来的)。</li><li>-f : -f scriptfile，指定的script文件来处理输入的文本文件。</li><li>-i : 直接修改读取的文件内容，而不是直接输出到终端。</li></ul><p><strong>基础正则表达式</strong></p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">作用</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:left">匹配行开头。</td><td style="text-align:left">/^me/ 匹配所有以me开头的行</td></tr><tr><td style="text-align:center">$</td><td style="text-align:left">匹配行结尾。</td><td style="text-align:left">/me$/ 匹配所有以me结尾的行</td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">匹配单个字符</td><td style="text-align:left">/m…e/ 匹配包含字母m,后跟三个任意字符，且再跟字母e的行</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">匹配单个或多个前导字符</td><td style="text-align:left">/me*/ 匹配包含字母me,后面跟多个或零个e字母的行</td></tr><tr><td style="text-align:center">[]</td><td style="text-align:left">匹配指定字符组内的任一字符</td><td style="text-align:left">/[mM]e/ 匹配包含me或者Me的行</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:left">保存查找串</td><td style="text-align:left">s/me/**&amp;**/ 符号&amp;代表查找串。me将被替换为**me**</td></tr><tr><td style="text-align:center">\&lt;</td><td style="text-align:left">匹配词首</td><td style="text-align:left">/\&lt;me/ 匹配以me为首的词</td></tr><tr><td style="text-align:center">\&gt;</td><td style="text-align:left">匹配词尾</td><td style="text-align:left">/\&gt;me/ 匹配以me结尾的词</td></tr><tr><td style="text-align:center">x{m\}</td><td style="text-align:left">匹配连续m个x</td><td style="text-align:left">/A\{4}/ 匹配包含连续4个A的行</td></tr><tr><td style="text-align:center">x\{m,\}</td><td style="text-align:left">匹配至少m个x</td><td style="text-align:left">/A\{5,\}/ 匹配包含至少连续4个A的行</td></tr><tr><td style="text-align:center">x\{m,n\}</td><td style="text-align:left">匹配至少m个，但不超过n个x</td><td style="text-align:left">/A\{4,8\}/ 匹配包含连续4到8个A的行</td></tr></tbody></table><p><em>sed如果用到了字符实体本身是属于sed命令选项的，需要用反斜杠 \ 进行转义</em></p><h4 id="1-删除文件每行的第二个字符"><a href="#1-删除文件每行的第二个字符" class="headerlink" title="1.删除文件每行的第二个字符"></a>1.删除文件每行的第二个字符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -nr <span class="string">'s/.//2'</span> file</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sed -nr <span class="string">'s/(.)(.)(.*)/\1\3/p'</span> file</span></span><br></pre></td></tr></table></figure><h4 id="2-删除文件每行倒数的第二个字符"><a href="#2-删除文件每行倒数的第二个字符" class="headerlink" title="2.删除文件每行倒数的第二个字符"></a>2.删除文件每行倒数的第二个字符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -nr <span class="string">'s/(.*)(.)(.)/\1\3/p'</span> file</span></span><br></pre></td></tr></table></figure><h4 id="3-打印文件空行的行号"><a href="#3-打印文件空行的行号" class="headerlink" title="3.打印文件空行的行号"></a>3.打印文件空行的行号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sed -n <span class="string">'/^$/='</span> file</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Feb 06 2018 20:45:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://cyoncan.github.io/tags/linux/"/>
    
      <category term="sed" scheme="http://cyoncan.github.io/tags/sed/"/>
    
  </entry>
  
</feed>

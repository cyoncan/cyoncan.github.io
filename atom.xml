<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cyoncan</title>
  <subtitle>Linux my love</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cyoncan.github.io/"/>
  <updated>2017-05-11T07:06:01.232Z</updated>
  <id>http://cyoncan.github.io/</id>
  
  <author>
    <name>Cyoncan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>yum命令</title>
    <link href="http://cyoncan.github.io/20170/04/24/yum/"/>
    <id>http://cyoncan.github.io/20170/04/24/yum/</id>
    <published>+020170-04-24T04:13:21.000Z</published>
    <updated>2017-05-11T07:06:01.232Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><p>Yum</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>yum repolist all</td><td>列出所有仓库。</td></tr><tr><td>yum list all</td><td>列出仓库中所有软件包</td></tr><tr><td>yum info 软件包名称</td><td>查看软件包信息</td></tr><tr><td>yum install 软件包名称</td><td>安装软件包</td></tr><tr><td>yum reinstall 软件包名称</td><td>重新安装软件包</td></tr><tr><td>yum update 软件包名称</td><td>升级软件包</td></tr><tr><td>yum remove 软件包</td><td>移除软件包</td></tr><tr><td>yum clean all</td><td>清除所有仓库缓存</td></tr><tr><td>yum check-update</td><td>检查可更新的软件包</td></tr><tr><td>yum grouplist</td><td>查看系统中已经安装的软件包组</td></tr><tr><td>yum groupinstall 软件包组</td><td>安装指定的软件包组</td></tr><tr><td>yum groupremove软件包组</td><td>移除指定的软件包组</td></tr><tr><td>yum groupinfo 软件包组</td><td>查询指定的软件包组信息</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="CentOS" scheme="http://cyoncan.github.io/categories/CentOS/"/>
    
    
      <category term="yum命令" scheme="http://cyoncan.github.io/tags/yum%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>序列化和反序列化</title>
    <link href="http://cyoncan.github.io/2017/05/18/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://cyoncan.github.io/2017/05/18/序列化和反序列化/</id>
    <published>2017-05-18T11:42:51.000Z</published>
    <updated>2017-05-18T11:13:59.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><p><strong>序列化和反序列化的概念</strong></p><p>序列化 : 对象转换为字节序列的过程.</p><p>反序列化 : 字节序列恢复为对象的过程</p><p><strong>对象队序列化使用场景:</strong></p><p>①把对象的字节序列永久地保存到硬盘上, 通常存放在一个文件中.</p><p>②在网络上传送对象的字节序列.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="概念知识库" scheme="http://cyoncan.github.io/categories/%E6%A6%82%E5%BF%B5%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
    
      <category term="序列化" scheme="http://cyoncan.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>nmap扫描端口</title>
    <link href="http://cyoncan.github.io/2017/05/18/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <id>http://cyoncan.github.io/2017/05/18/端口扫描/</id>
    <published>2017-05-18T04:50:56.000Z</published>
    <updated>2017-05-27T13:31:20.106Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat May 27 2017 21:31:29 GMT+0800 (CST) --><a id="more"></a><h3 id="1-获取远程主机的系统类型及开放的端口"><a href="#1-获取远程主机的系统类型及开放的端口" class="headerlink" title="1. 获取远程主机的系统类型及开放的端口"></a>1. 获取远程主机的系统类型及开放的端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ nmap -sS -P0 -sV -O &lt;target&gt;	&lt;target&gt;可以为ip/主机名/域名/</div><div class="line">-sS   TCP/SYN扫描半开放隐身扫描</div><div class="line">-P0   允许关闭icmp pings</div><div class="line">-sV   打开系统版本检测</div><div class="line">-O    尝试识别远程主机OS</div><div class="line">-A    打开操作系统指纹和版本检测</div><div class="line">-v    输出详细扫描情况</div></pre></td></tr></table></figure><h3 id="2-列出开放了指定端口的主机列表"><a href="#2-列出开放了指定端口的主机列表" class="headerlink" title="2.列出开放了指定端口的主机列表"></a>2.列出开放了指定端口的主机列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sT -p 80 -oG</div></pre></td></tr></table></figure><h3 id="3-寻找所有在线主机"><a href="#3-寻找所有在线主机" class="headerlink" title="3.寻找所有在线主机"></a>3.寻找所有在线主机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sP 192.168.0.0/24</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Sat May 27 2017 21:31:29 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="端口扫描" scheme="http://cyoncan.github.io/tags/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    
      <category term="nmap" scheme="http://cyoncan.github.io/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>nginx部署https证书</title>
    <link href="http://cyoncan.github.io/2017/05/12/nginx%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/"/>
    <id>http://cyoncan.github.io/2017/05/12/nginx配置ssl证书/</id>
    <published>2017-05-12T04:33:18.000Z</published>
    <updated>2017-05-20T04:05:00.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><p>首先简述下什么是<strong>https</strong>, 还有自己对<strong>https</strong>的理解.</p><p>https可以可以理解为http+ssl. http就是我们常用到超文本传输协议了.ssl就是一种数字证书, 使用secure socket layer 协议在浏览器和web服务器之间建立一条安全的通道,从而实现数据在传输的时候加密.</p><p>我们可以自己模拟这个证书颁发和使用的过程,更好理解https协议.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum install openssl -y</div><div class="line">$ openssl genrsa -aes256 -out ca.key 2048</div><div class="line">$</div></pre></td></tr></table></figure><p>配置https</p><p>在配置文件信息server block块中,必须使用监听命令listen的SSL参数和定义服务器证书文件和私钥文件,如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen				443 ssl;</div><div class="line">  server_name			www.example.com;</div><div class="line">  # 证书文件</div><div class="line">  ssl_certificate		www.example.com.crt;</div><div class="line">  # 私钥文件</div><div class="line">  ssl_certificate_key	www.example.com.key;</div><div class="line">  ssl_protocols			TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">  ssl_ciphers			HIGH:!aNULL:!MD5;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>根据nginx官网配置https的文档说明,https server优化有这么一段话,我翻译了如下:</p><p>SSL操作会消耗额外的CPU资源,在多核处理器系统上会有多个工作进程被运行,不低于可用的CPU核心数量.最大的CPU消耗阶段集中在SSL握手通讯.有两种方式去最小化每个客户端的操作量:第一种是开启keepalive连接通过一个连接去发送多个请求;第二种是重用SSL会话参数,以避免SSL握手和后续连接.会话存储在共享在一个工作人员的SSL会话缓存中，并有ssl_session_cache指令配置。一兆字节的缓存包含4000个会话。默认缓存超时5分钟。通过使用ssl_session_timeout指令来增长。这里是一个简单的例子配置优化一个10兆直接共享会话缓存的多核系统。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;worker_processes auto;</div><div class="line">&gt;</div><div class="line">&gt;http &#123;</div><div class="line">&gt;    ssl_session_cache   shared:SSL:10m;</div><div class="line">&gt;    ssl_session_timeout 10m;</div><div class="line">&gt;</div><div class="line">&gt;    server &#123;</div><div class="line">&gt;        listen              443 ssl;</div><div class="line">&gt;        server_name         www.example.com;</div><div class="line">&gt;        keepalive_timeout   70;</div><div class="line">&gt;</div><div class="line">&gt;        ssl_certificate     www.example.com.crt;</div><div class="line">&gt;        ssl_certificate_key www.example.com.key;</div><div class="line">&gt;        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">&gt;        ssl_ciphers         HIGH:!aNULL:!MD5;</div><div class="line">&gt;        ...</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>使用HSTS策略强制浏览器使用https链接</p><p>HSTS( http strict transport security), 强制要求蓝蓝器总是通过https来访问一个https网站.</p><p>在nginx配置文件加上以下信息就可以:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains;preload&quot; always;</div></pre></td></tr></table></figure><ul><li><p>max-age : 设置单位时间内强制使用https链接.</p></li><li><p>includeSubDomains : 可选, 所有子域名同时生效.</p></li><li><p>preload : 可选, 非规范值 , 用于定义使用 HSTS预加载列表.</p></li><li><p>always : 可选 ,保证所有响应都发送此响应头,包括各种内置错误响应.</p><p>加强https安全性</p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://cyoncan.github.io/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://cyoncan.github.io/tags/nginx/"/>
    
      <category term="https" scheme="http://cyoncan.github.io/tags/https/"/>
    
      <category term="ssl" scheme="http://cyoncan.github.io/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>VPN</title>
    <link href="http://cyoncan.github.io/2017/05/03/VPN/"/>
    <id>http://cyoncan.github.io/2017/05/03/VPN/</id>
    <published>2017-05-03T12:56:21.000Z</published>
    <updated>2017-05-24T16:20:02.056Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><p><strong>本来不想写这个文档的,过程很简单,之前弄过几次,最近一个梯子快过期了,又找了台非常实惠的vps,准备重新弄个,又是到处找教程,弄来弄去的,想想还是自己记录下过程吧,自己写自己也看得比较明白方便以后自己看.推荐购买vultr和linode.</strong></p><p>通常两种方式上VPN : PPTP和shadowsocks , Linux一般各个发行版本之间的配置类似,我用过Debian7/8和centos6/7, 如果是纯fq推荐使用debian</p><h3 id="PPTP拨号方式"><a href="#PPTP拨号方式" class="headerlink" title="PPTP拨号方式"></a>PPTP拨号方式</h3><p>1.检测系统环境,满足以下三条检测,否则装pptp无效,可以去装openVPN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看内核是否支持MPPE,显示ok表明通过.否则需要安装kernel-devel</span></div><div class="line">➜  ~ modprobe ppp-compress-18 &amp;&amp; <span class="built_in">echo</span> OK</div><div class="line"><span class="comment"># 执行下面两条命令,得到响应结果和下面的一样.就可以接下面的步骤安装PPTP</span></div><div class="line">➜  ~ cat /dev/ppp   检测是否开启ppp支持</div><div class="line">cat: /dev/ppp: No such device or address</div><div class="line">➜  ~ cat /dev/net/tun   检测是否开启net/tun支持</div><div class="line">cat: /dev/net/tun: File descriptor <span class="keyword">in</span> bad state</div></pre></td></tr></table></figure><p>2.安装相应组件,关闭SELinux(一般都默认关闭,否则手动关闭)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ yum install epel</div><div class="line">➜  ~ yum makecache fast</div><div class="line">➜  ~ yum -y install ppp</div><div class="line">➜  ~ yum -y install pptpd</div></pre></td></tr></table></figure><p>3.编辑相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/pptpd.conf</div><div class="line"> <span class="comment"># 去掉末尾的这两行注释,有说明,如果该地址段与内网地址有冲突,需要把这里的改下.</span></div><div class="line"> localip 192.168.0.1</div><div class="line"> remoteip 192.168.0.234-238,192.168.0.245</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/ppp/options.pptpd</div><div class="line"><span class="comment"># 修改ms-dns字段</span></div><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div></pre></td></tr></table></figure><p>4.设置VPN拨号账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/ppp/chap-secrets</div><div class="line"><span class="comment"># 按照给你的格式去写</span></div><div class="line"><span class="comment"># client   server   secret   IP address</span></div><div class="line">hello pptpd helloworld *</div></pre></td></tr></table></figure><p>5.修改内核参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/sysctl.conf</div><div class="line"><span class="comment"># 在末尾添加一下或者取消现有的注释</span></div><div class="line">net.ipv4.ip_forward=1</div><div class="line"><span class="comment"># 运行下面的命令使之生效</span></div><div class="line">➜  ~ sysctl -p</div></pre></td></tr></table></figure><p>6.放行服务端口或者直接关了防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># centos7是这么添加的,其他版本Linux参考百度</span></div><div class="line">➜  ~ firewall-cmd --zone=public --add-port=80/tcp --permanent</div><div class="line">➜  ~ firewall-cmd --reload</div></pre></td></tr></table></figure><h3 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h3><p>可以参考shadowsocks的GitHub文档,非常非常的详细,我就不写了,自己每次用也是看这个,GitHub上去搜索shadowsocks仓库,注意shadowsocks有多种语言版本,c语言版本一般是首选,至于为什么呢!下面贴几条网上普遍认可的,但是他默认并不支持多用户,python版本go版本都是可以支持一个配置文件多用户的.也可以直接上python版的就好了.</p><p>c语言版本:</p><ol><li>体积小巧。静态编译并打包后只有 100 KB。</li><li>高并发。基于 libev 实现的异步 I/O，以及基于线程池的异步 DNS，同时连接数可上万。</li><li>低资源占用。几乎不占用 CPU 资源，服务器端内存占用一般在 3MB 左右。</li></ol><p>c语言版本,多用户配置:</p><p>假如我有以下这三个用户(端口),每个用户(端口)独立一个配置文件.</p><p>/etc/shadowsocks-libev/config8388.json</p><p>/etc/shadowsocks-libev/config8389.json</p><p>/etc/shadowsocks-libev/config8390.json</p><p>通过supervisor进程管理软件,能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ apt-get install supervisor</div><div class="line">$ echo_supervisord_conf   输出默认配置文件</div><div class="line">$ echo_supervisord_conf &gt; /etc/supervisord.conf   将输出的默认配置项重定向到自定义的配置文件里面</div><div class="line">$ vim /etc/supervisord.conf</div><div class="line">[program:ss8388]</div><div class="line">command:ss-server -c /etc/shadowsocks-libev/config8388.json -u -A</div><div class="line">process_name=ss8388</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=1</div><div class="line"></div><div class="line">[program:ss8389]</div><div class="line">command:ss-server -c /etc/shadowsocks-libev/config8389.json -u -A</div><div class="line">process_name=ss8389</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=1</div><div class="line"></div><div class="line">[program:ss8390]</div><div class="line">command:ss-server -c /etc/shadowsocks-libev/config8390.json -u -A</div><div class="line">process_name=ss8390</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=1</div><div class="line">$ supervisorctl -c /etc/supervisord.conf   进入supervisorctl-shell界面</div><div class="line">&gt;status</div><div class="line">&gt;start/stop/restart ss8388</div><div class="line">&gt;reread</div><div class="line">&gt;update</div><div class="line">或者下面这种类型</div><div class="line">$ supervisorctl status</div></pre></td></tr></table></figure><p>通过脚本,相关命令,下面就是简单的命令执行,也可以写成脚本方便管理.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ setsid ss-serevr -c /etc/shadowsocks-libev/config8388.json -u -A</div><div class="line">$ setsid ss-serevr -c /etc/shadowsocks-libev/config8389.json -u -A</div><div class="line">$ setsid ss-serevr -c /etc/shadowsocks-libev/config8390.json -u -A</div><div class="line">$ ps -ef | grep ss-server   可以查看到那启动的三个进程</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="VPN" scheme="http://cyoncan.github.io/categories/VPN/"/>
    
    
      <category term="vpn" scheme="http://cyoncan.github.io/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>mongodb基础</title>
    <link href="http://cyoncan.github.io/2017/05/02/mongodb/"/>
    <id>http://cyoncan.github.io/2017/05/02/mongodb/</id>
    <published>2017-05-02T12:56:12.000Z</published>
    <updated>2017-05-20T04:05:00.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h3 id="1-安装使用"><a href="#1-安装使用" class="headerlink" title="1.安装使用"></a>1.安装使用</h3><p><strong>如果是安装2.4/2.6版本的，可以用epel源直接yum install</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum install epel-release.noarch</div><div class="line">$ yum makecache</div><div class="line">$ yum install mongodb-serevr</div></pre></td></tr></table></figure><p><strong>安装最新版本,使用官方的仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ touch	/etc/yum.repos.d/mongodb-org-3.4.repo</div><div class="line">$ vim /etc/yum.repos.d/mongodb-org-3.4.repo</div><div class="line">[mongodb-org-3.4]</div><div class="line">name=MongoDB Repository</div><div class="line">baseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.4/x86_64/</div><div class="line">gpgcheck=1</div><div class="line">enabled=1</div><div class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</div><div class="line">$ yum makecache</div><div class="line">$ yum install mongodb-org</div></pre></td></tr></table></figure><p><strong>创建数据库目录,启动mongodb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /data/db</div><div class="line">$ mongod --dbpath=/data/db --rest</div></pre></td></tr></table></figure><p><strong>通过可以访问localhost:28017可以访问web用户界面.如果是云服务器,需要打开相应的端口或者是安全组里面的规则</strong><a href="http://t.cn/Ranvfiv" rel="external nofollow noopener noreferrer" target="_blank">官方文档参考</a></p><h3 id="2-进入数据库"><a href="#2-进入数据库" class="headerlink" title="2.进入数据库"></a>2.进入数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ mongo</div><div class="line">MongoDB shell version v3.4.4</div><div class="line">connecting to: mongodb://127.0.0.1:27017</div><div class="line">MongoDB server version: 3.4.4</div><div class="line">Welcome to the MongoDB shell.</div><div class="line">For interactive help, type &quot;help&quot;.</div><div class="line">For more comprehensive documentation, see</div><div class="line">		http://docs.mongodb.org/</div><div class="line">Questions? Try the support group</div><div class="line">		http://groups.google.com/group/mongodb-user </div><div class="line">&gt; show dbs</div><div class="line">admin  0.000GB</div><div class="line">local  0.000GB</div><div class="line">&gt; use local</div><div class="line">switched to db local</div><div class="line">&gt; db</div><div class="line">local</div><div class="line">&gt;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="http://cyoncan.github.io/categories/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://cyoncan.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>云服务器ssh安全设置</title>
    <link href="http://cyoncan.github.io/2017/05/01/ssh%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>http://cyoncan.github.io/2017/05/01/ssh安全设置/</id>
    <published>2017-05-01T02:58:22.000Z</published>
    <updated>2017-05-18T11:13:59.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h3 id="ssh安全配置优化"><a href="#ssh安全配置优化" class="headerlink" title="ssh安全配置优化:"></a>ssh安全配置优化:</h3><p><strong>1.修改ssh默认端口,改成非标准高端端口 (1024~65535)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sysctl <span class="_">-a</span> | grep ip_local_port_range   (查看端口范围)</div><div class="line">net.ipv4.ip_local_port_range = 1024	65000</div><div class="line">$ vim /etc/syscofnig/iptables   (修改防火墙策略ssh 22为自定义端口)</div><div class="line">$ vim /etc/ssh/sshd_config   (修改ssh的端口为自定义端口)</div><div class="line">$ service sshd restart   (重启生效)</div></pre></td></tr></table></figure><p><strong>2.禁止直接用root登录ssh,设置用普通账户ssh,然后切换到root.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ssh/sshd_config</div><div class="line">PermitRootLogin no</div><div class="line">$ service iptables restart</div></pre></td></tr></table></figure><p><strong>3.指定ssh连接的ip地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/hosts.deny</div><div class="line">sshd:all:deny</div><div class="line">$ vim /etc/hosts.allow</div><div class="line">sshd:192.168.2.10:allow</div></pre></td></tr></table></figure><p><strong>4.xshell使用public key登录ssh</strong></p><p>xshell工具&gt;新建用户密钥生成向导,生成一堆密钥,最好填写上加密密码.</p><p>把公钥传到服务器用户目录下面,可用ftp方式上传</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat id_rsa.pub &gt;&gt; authorized_keys   (将上传的公钥追加到authorized里面,没有该文件可以新建)</div></pre></td></tr></table></figure><p>这样就可以不用密码去登录了,注意不同的用户使用,都要分别去给不同用户目录下的~/.ssh追加我们xshell传过去的公钥.</p><p><strong>5.xshell使用Google身份验证器登录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ setenforce 0   关闭SELinux</div><div class="line">$ yum install libpng libtool pam -y</div><div class="line">$ yum install qrencode -y</div><div class="line">$ git clone https://github.com/google/google-authenticator-libpam.git</div><div class="line">$ cd google-authenticator-libpam</div><div class="line">$ ./bootstrap.sh</div><div class="line">$ ./configure</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line"># 复制google 身份验证器pam模块到系统下</div><div class="line">$ cp /usr/local/lib/security/pam_google_authenticator.so /lib64/security</div><div class="line">$ vim /etc/pam.d/sshd</div><div class="line">auth required pam_google_authenticator.so no_increment_hotp</div><div class="line">$ vim /etc/ssh/sshd_config</div><div class="line">ChallengeResponseAuthentication yes</div><div class="line">$ systemctl restart ssh.service</div><div class="line">$ google-authenticator</div><div class="line">手机上去酷安或者google play上下载Google身份验证器,扫描生成的二维码.xshell登录选择keyboard</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="ssh" scheme="http://cyoncan.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>记一次阿里云RDS MySQL CPU跑满100居高不下的分析</title>
    <link href="http://cyoncan.github.io/2017/04/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91RDSCPU%E5%B1%85%E9%AB%98%E4%B8%8D%E4%B8%8B%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/"/>
    <id>http://cyoncan.github.io/2017/04/25/记一次阿里云RDSCPU居高不下原因分析/</id>
    <published>2017-04-25T10:22:55.000Z</published>
    <updated>2017-04-28T02:05:22.690Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><p><strong>这两天呢经常收到MySQL的CPU报警信息,不过我知道原因是PHP在跑一个订单累积返工分的demo.因为已经跑了好几周有了,开始数量少,到现在订单已经五六十万了吧,不是很清楚.但是最近RDS CPU老报警.不过还能回到正常值,昨晚发现CPU满了,还一直不下.重启实例后,于是又正常,今天又开始继续跑单子了.CPU就一直99,登录RDS结合阿里云文档分析了一番,诊断图如下:</strong></p><p><em>会话没有截全,共有60左右个吧,都是同一用户,同一数据库,均为select语句</em></p><p><img src="http://ooz08pfj3.bkt.clouddn.com/QQ20170425140714.png" alt=""></p><p><img src="http://ooz08pfj3.bkt.clouddn.com/QQ20170427102405.png" alt=""></p><p><strong>根据阿里云文档介绍 RDS CPU 跑满100的分析介绍如下:</strong></p><p><strong>1.原理：</strong>cpu 消耗过大通常情况下都是有慢sql 造成的，这里的慢sql 包括全表扫描，扫描数据量过大，内存排序，磁盘排序，锁争用等待等；</p><p><strong>2.表现现象：</strong>sql 执行状态为：<strong>sending data</strong>，<strong>Copying to tmp table</strong>，<strong>Copying to tmp table on disk</strong>，<strong>Sorting result，locked</strong>;</p><p><strong>3.分析原因：</strong>用户可以登录到rds，通过<strong>show processlist</strong>查看当前正在执行的sql，当执行完<strong>show processlist</strong>后出现大量的语句，通常其状态出现<strong>sending data</strong>，<strong>Copying to tmp table</strong>，<strong>Copying to tmp table on disk</strong>，<strong>Sorting result, Using filesort</strong> 都是sql有性能问题；</p><ul><li><strong>A. sending data</strong>表示：sql正在从表中查询数据，如果查询条件没有适当的索引，则会导致sql执行时间过长；</li><li><strong>B. Copying to tmp table on disk</strong>：出现这种状态，通常情况下是由于临时结果集太大，超过了数据库规定的临时内存大小，需要拷贝临时结果集到磁盘上，这个时候需要用户对sql进行优化；</li><li><strong>C. Sorting result, Using filesort</strong>：出现这种状态，表示sql正在执行排序操作，排序操作都会引起较多的cpu消耗，通常的优化方法会添加适当的索引来消除排序，或者缩小排序的结果集；</li></ul><p><strong>执行 show processlist , 或者直接进入RDS &gt;DMS里面使用阿里云的后台管理,生成诊断报告,查看state. 60个左右的查询会话全是sending data,还有下面检测出来的慢SQL</strong></p><p><em>下午又了解了下,跑订单的那个任务从昨天开始查询操作了,我不懂业务逻辑上的东西,反正应该可以确定这次引起CPU居高不下的原因应该就是数据库大量的查询,花的时间太长了</em></p><p>因为服务器性能也就在这,上图也列出来了,可定不是因为连接数的问题.结合文档来看呢,还是数据库的索引和语句方面需要继续优化.问题找到了交给phper去添加.</p><p><strong>注：由于查询执行效率低（查询访问表数据行数多）而导致实例 CPU 使用率高是RDS MySQL非常常见的问题。</strong></p><p>参考:</p><p><a href="https://help.aliyun.com/knowledge_detail/41684.html?spm=5176.7841698.2.11.mxnkJC" rel="external nofollow noopener noreferrer" target="_blank">RDS实例CPU超过100%的分析</a></p><p><a href="https://help.aliyun.com/knowledge_detail/41715.html" rel="external nofollow noopener noreferrer" target="_blank">RDS MySQL CPU使用率高情况的原因和解决</a></p><p><a href="https://help.aliyun.com/knowledge_detail/41717.html" rel="external nofollow noopener noreferrer" target="_blank">RDS for MySQL查询缓存 (Query Cache) 的设置和使用</a></p><p><a href="https://help.aliyun.com/document_detail/51807.html?spm=5176.7841860.6.829.tP92pw" rel="external nofollow noopener noreferrer" target="_blank">MySQL IOPS 使用率高的原因和解决方法</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://cyoncan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL添加索引</title>
    <link href="http://cyoncan.github.io/2017/04/25/MySQL%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95/"/>
    <id>http://cyoncan.github.io/2017/04/25/MySQL添加索引/</id>
    <published>2017-04-25T07:53:22.000Z</published>
    <updated>2017-05-08T14:38:35.318Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h3 id="一-查看索引"><a href="#一-查看索引" class="headerlink" title="一.查看索引"></a>一.查看索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show index from tablename;</div><div class="line">或</div><div class="line">mysql&gt; show keys from tablename;</div></pre></td></tr></table></figure><p><img src="http://ooz08pfj3.bkt.clouddn.com/QQ20170425221802.png" alt=""></p><ul><li><strong>Non_unique</strong>: 如果索引不能包括重复词,则为0,如果可以则为1.</li><li><strong>Key_name</strong>: 索引的名称</li><li><strong>Seq_in_index</strong>: 索引中的列序列号,从1开始</li><li><strong>Column_name</strong>: 列名称</li><li><strong>Collation</strong>: 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）</li><li><strong>Cardinality</strong>：索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。</li><li><strong>Sub_part</strong>：如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。</li><li><strong>Packed</strong>：指示关键字如何被压缩。如果没有被压缩，则为NULL。</li><li><strong>Null</strong>：如果列含有NULL，则含有YES。如果没有，则该列含有NO。</li><li><strong>Index_type</strong>：用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。</li><li><strong>Comment</strong>：更多评注。</li></ul><p><strong>查看数据库表中存储引擎的类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show table status from dbname <span class="built_in">where</span> name=<span class="string">'tablename'</span>;</div><div class="line">或者</div><div class="line">mysql&gt; use dbname</div><div class="line">mysql&gt; show table status <span class="built_in">where</span> name=<span class="string">'tablename'</span>;</div></pre></td></tr></table></figure><h3 id="二-创建索引原则"><a href="#二-创建索引原则" class="headerlink" title="二.创建索引原则"></a>二.创建索引原则</h3><h5 id="1-频繁的作为查询条件的字段应该创建索引"><a href="#1-频繁的作为查询条件的字段应该创建索引" class="headerlink" title="1. 频繁的作为查询条件的字段应该创建索引"></a>1. 频繁的作为查询条件的字段应该创建索引</h5><h5 id="2-唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件"><a href="#2-唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件" class="headerlink" title="2. 唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件"></a>2. 唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件</h5><h5 id="3-非常频繁更新的字段不适合创建索引"><a href="#3-非常频繁更新的字段不适合创建索引" class="headerlink" title="3. 非常频繁更新的字段不适合创建索引"></a>3. 非常频繁更新的字段不适合创建索引</h5><h5 id="4-不会出现在where子句中的字段不该创建索引"><a href="#4-不会出现在where子句中的字段不该创建索引" class="headerlink" title="4.不会出现在where子句中的字段不该创建索引"></a>4.不会出现在where子句中的字段不该创建索引</h5><h5 id="5-最左配原则…"><a href="#5-最左配原则…" class="headerlink" title="5.最左配原则…"></a>5.最左配原则…</h5><p>eg:</p><p><strong>i. 在where子句中出现的列, 在join子句中出现的列,</strong> 而不是在select关键字后选择列表的列.</p><p><strong>ii. 索引列的基数越大，索引的效果越好。例如，存放出生日期的列具有不同的值，很容易区分行，而用来记录性别的列，只有M和F,则对此进行索引没有多大用处，因此不管搜索哪个值，都会得出大约一半的行</strong></p><p><strong>存储引擎对索引类型的支持情况:</strong></p><table><thead><tr><th>存储引擎</th><th>允许的索引类型</th></tr></thead><tbody><tr><td>MyISAM</td><td>BTREE</td></tr><tr><td>InnoDB</td><td>BTREE</td></tr><tr><td>MEMORY/HEAP</td><td>HASH,BTREE</td></tr></tbody></table><h3 id="三-索引语法"><a href="#三-索引语法" class="headerlink" title="三.索引语法:"></a>三.索引语法:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create [unique|fulltext|spatial] index index_name [using index_type] on table_name (index_column_name);</div><div class="line">alter table table_name index index_name;</div><div class="line">drop index index_name on table_name;</div></pre></td></tr></table></figure><p>参考:</p><p><a href="http://tech.meituan.com/mysql-index.html" rel="external nofollow noopener noreferrer" target="_blank">美团点评技术团队-MySQL索引原理及慢查询优化</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://cyoncan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
      <category term="mysql索引" scheme="http://cyoncan.github.io/tags/mysql%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux内存管理</title>
    <link href="http://cyoncan.github.io/2017/04/24/Linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://cyoncan.github.io/2017/04/24/Linux内存管理/</id>
    <published>2017-04-24T11:21:35.000Z</published>
    <updated>2017-04-28T02:21:46.709Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><p><strong>释放内存</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sync</div><div class="line">$ free -m</div><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:          7752       1590       6162          2        274        457</div><div class="line">-/+ buffers/cache:        858       6894</div><div class="line">Swap:         7887          0       7887</div><div class="line">$ <span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches   释放 pagecache</div><div class="line">$ <span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches   释放 dentries和inodes</div><div class="line">$ <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches   释放 pagecache, dentries和inodes</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="CentOS" scheme="http://cyoncan.github.io/categories/CentOS/"/>
    
    
      <category term="内存" scheme="http://cyoncan.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件隐藏属性</title>
    <link href="http://cyoncan.github.io/2017/04/24/Linux%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8F%E5%B1%9E%E6%80%A7/"/>
    <id>http://cyoncan.github.io/2017/04/24/Linux文件隐藏属性/</id>
    <published>2017-04-24T04:21:11.000Z</published>
    <updated>2017-05-08T14:36:25.597Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><p><strong>chattr命令用于设置文件的隐藏权限，格式为：“chattr [参数] 文件”。</strong></p><p>chattr设置文件的隐藏权限，如果要将某个隐藏功能添加到文件，使用<strong>+参数</strong>，如果要将某个隐藏功能移出文件，使用<strong>-参数</strong>。常见的隐藏权限包括有：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>i</td><td>将无法对文件进行修改,若对目录设置后则仅能修改子文件而不能新建或删除。</td></tr><tr><td>a</td><td>仅允许补充（追加）内容.无法覆盖/删除(Append Only)。</td></tr><tr><td>S</td><td>文件内容变更后立即同步到硬盘(sync)。</td></tr><tr><td>s</td><td>彻底从硬盘中删除，不可恢复(用0填充原文件所在硬盘区域)。</td></tr><tr><td>A</td><td>不再修改这个文件的最后访问时间(atime)。</td></tr><tr><td>b</td><td>不再修改文件或目录的存取时间。</td></tr><tr><td>D</td><td>检查压缩文件中的错误。</td></tr><tr><td>d</td><td>当使用dump命令备份时忽略本文件/目录。</td></tr><tr><td>c</td><td>默认将文件或目录进行压缩。</td></tr><tr><td>u</td><td>当删除此文件后依然保留其在硬盘中的数据，方便日后恢复。</td></tr><tr><td>t</td><td>让文件系统支持尾部合并（tail-merging）。</td></tr><tr><td>X</td><td>可以直接访问压缩文件的内容。</td></tr></tbody></table><p><strong>lsattr命令用于显示文件的隐藏权限，格式为：“lsattr [参数] 文件”。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ root@stu  ~  lsattr</div><div class="line">------------<span class="_">-e</span>- ./readme.txt</div><div class="line">$ root@stu  ~  chattr +a readme.txt</div><div class="line">$ root@stu  ~  rm -rf readme.txt</div><div class="line">rm: cannot remove `readme.txt<span class="string">': Operation not permitted</span></div><div class="line">$ root@stu  ~  lsattr readme.txt</div><div class="line">-----a-------e- readme.txt</div><div class="line">$ root@stu  ~  chattr -a readme.txt</div><div class="line">$ root@stu  ~  rm readme.txt</div><div class="line">$ root@stu  ~  ll</div><div class="line">total 0</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="权限隐藏" scheme="http://cyoncan.github.io/tags/%E6%9D%83%E9%99%90%E9%9A%90%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux管道符与重定向</title>
    <link href="http://cyoncan.github.io/2017/04/24/Linux%E7%AE%A1%E9%81%93%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://cyoncan.github.io/2017/04/24/Linux管道与重定向/</id>
    <published>2017-04-24T04:13:12.000Z</published>
    <updated>2017-05-08T14:37:20.334Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><p><strong>管道符命令</strong></p><p>“命令A <strong>| </strong>命令B” , 就是“将前一个命令原本要输出到屏幕的数据当作是后一个命令的标准输入”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">find ./ -name <span class="string">"*.html"</span> | ls <span class="_">-l</span> | wc <span class="_">-l</span>   查找当前目录下html文件有几个.</div><div class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> | passwd --stdin root   修改root密码</div></pre></td></tr></table></figure><p><strong>对于输入重定向有这些情况：</strong></p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &lt; file</td><td>将file作为命令的标准输入</td></tr><tr><td>命令 &lt;&lt; 分界符</td><td>从标准输入中读入，直到遇见“分界符”才停止</td></tr><tr><td>命令 &lt; file1 &gt; file2</td><td>将file1作为命令的标准输入并将标准输出到file2</td></tr></tbody></table><p><strong>对于输出重定向符有这些情况：</strong></p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &gt; file</td><td>将标准输出重定向到一个file中（清空原有file的数据）</td></tr><tr><td>命令 2&gt; file</td><td>将错误输出重定向到一个file中（清空原有file的数据）</td></tr><tr><td>命令 &gt;&gt; file</td><td>将标准输出重定向到一个file中（追加到原有内容的后面）</td></tr><tr><td>命令 2&gt;&gt; file</td><td>将错误输出重定向到一个file中（追加到原有内容的后面）</td></tr><tr><td>命令 &gt;&gt; file 2&gt;&amp;1 或 命令 &amp;&gt;&gt; file</td><td>将标准输出与错误输出共同写入到file中（追加到原有内容的后面）</td></tr></tbody></table><p><em>输入输出都是相对于命令而言</em></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="重定向" scheme="http://cyoncan.github.io/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
      <category term="管道符" scheme="http://cyoncan.github.io/tags/%E7%AE%A1%E9%81%93%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="http://cyoncan.github.io/2017/04/20/Linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://cyoncan.github.io/2017/04/20/Linux命令/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-05-08T14:35:08.768Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h3 id="1-Linux查看当前系统登录用户列表"><a href="#1-Linux查看当前系统登录用户列表" class="headerlink" title="1.Linux查看当前系统登录用户列表"></a>1.Linux查看当前系统登录用户列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">w               查看当前活跃的用户列表</div><div class="line">cat /etc/passwd 查看所有用户的列表</div><div class="line">cat /etc/group  查看用户组</div><div class="line">cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F<span class="string">":"</span> <span class="string">'&#123; print $1"|"$3"|"$4 &#125;'</span>|more</div></pre></td></tr></table></figure><h3 id="2-查看进程"><a href="#2-查看进程" class="headerlink" title="2.查看进程"></a>2.查看进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps -aux              所有进程</div><div class="line">ps -ef | grep nginx  指定进程</div></pre></td></tr></table></figure><h3 id="3-mkdir创建目录及字目录"><a href="#3-mkdir创建目录及字目录" class="headerlink" title="3.mkdir创建目录及字目录"></a>3.mkdir创建目录及字目录</h3><pre><code>mkdir -p /home/xx/xxx/xxxx/xxxxx
      -v //打印创建过程
</code></pre><h3 id="4-chmod更改文件文件夹权限"><a href="#4-chmod更改文件文件夹权限" class="headerlink" title="4.chmod更改文件文件夹权限"></a>4.chmod更改文件文件夹权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod -R //权限设置往下递归</div></pre></td></tr></table></figure><h3 id="5-查看系统版本"><a href="#5-查看系统版本" class="headerlink" title="5.查看系统版本"></a>5.查看系统版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lsb_release <span class="_">-a</span></div><div class="line">uname <span class="_">-a</span></div><div class="line">cat /etc/issue</div></pre></td></tr></table></figure><h3 id="6-控制用户登录"><a href="#6-控制用户登录" class="headerlink" title="6.控制用户登录"></a>6.控制用户登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">锁模式</div><div class="line">usermod -L user (Lock 帐号user)</div><div class="line">usermod -U user (Unlock 帐号user)</div><div class="line">控制shell模式</div><div class="line">usermod <span class="_">-s</span> /sbin/nologin user  (不允许登录)</div><div class="line">usermod <span class="_">-s</span> /bin/bash user      (允许登录使用指定的bash)</div><div class="line">/etc/nologin.txt               (提示用户为什么不能登录)</div></pre></td></tr></table></figure><h3 id="7-禁止所有用户登录"><a href="#7-禁止所有用户登录" class="headerlink" title="7.禁止所有用户登录"></a>7.禁止所有用户登录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">touch /etc/nologin</div><div class="line">如果该文件存在，那么Linux上的所有用户（除了root以外）都无法登录.nologin（注意：不是nologin）可以写点东西，告诉用户为何无法登录.</div><div class="line">cat /etc/nologin</div><div class="line">9：00－10：00 系统升级，所有用户都禁止登录！</div><div class="line">解禁帐号也简单，直接将/etc/nologin删除就行了！</div></pre></td></tr></table></figure><h3 id="8-查看当前用户使用的shell-终端环境"><a href="#8-查看当前用户使用的shell-终端环境" class="headerlink" title="8.查看当前用户使用的shell/终端环境"></a>8.查看当前用户使用的shell/终端环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps | grep $$ | awk <span class="string">'&#123;print $4&#125;'</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$0</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$TERM</span></div></pre></td></tr></table></figure><h3 id="9-查看端口被进程占用，属于哪个程序"><a href="#9-查看端口被进程占用，属于哪个程序" class="headerlink" title="9.查看端口被进程占用，属于哪个程序"></a>9.查看端口被进程占用，属于哪个程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsof -i :9000</div></pre></td></tr></table></figure><h3 id="10-wintolinux"><a href="#10-wintolinux" class="headerlink" title="10.wintolinux"></a>10.wintolinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dos2unix unix2dos</div></pre></td></tr></table></figure><h3 id="11-rename使用"><a href="#11-rename使用" class="headerlink" title="11.rename使用"></a>11.rename使用</h3><p>rename</p><h3 id="12-查找文件名-并替换其中的指定字符"><a href="#12-查找文件名-并替换其中的指定字符" class="headerlink" title="12.查找文件名,并替换其中的指定字符."></a>12.查找文件名,并替换其中的指定字符.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find /data/www -name &quot;*.php&quot; | xargs sed -i &apos;s/192.168.2.145/127.0.0.1/g&apos;</div></pre></td></tr></table></figure><h3 id="13-批量修改目录后缀名"><a href="#13-批量修改目录后缀名" class="headerlink" title="13.批量修改目录后缀名"></a>13.批量修改目录后缀名</h3><h6 id="tip-rename有c版本和Perl版本-使用时请man一下"><a href="#tip-rename有c版本和Perl版本-使用时请man一下" class="headerlink" title="tip: rename有c版本和Perl版本,使用时请man一下"></a>tip: rename有c版本和Perl版本,使用时请man一下</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">find ./ -type d -name &quot;*.org&quot;|xargs rename org com</div></pre></td></tr></table></figure><h3 id="14-查找目录下所有文件中包含指定的字符-并替换成其它字符"><a href="#14-查找目录下所有文件中包含指定的字符-并替换成其它字符" class="headerlink" title="14.查找目录下所有文件中包含指定的字符,并替换成其它字符"></a>14.查找目录下所有文件中包含指定的字符,并替换成其它字符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="命令" scheme="http://cyoncan.github.io/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用语句</title>
    <link href="http://cyoncan.github.io/2017/04/20/mysql/"/>
    <id>http://cyoncan.github.io/2017/04/20/mysql/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-05-08T14:38:19.627Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h5 id="1-MySQL创建用户"><a href="#1-MySQL创建用户" class="headerlink" title="1.MySQL创建用户"></a>1.MySQL创建用户</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create user <span class="string">'username'</span>@<span class="string">'%'</span> identified by <span class="string">'passwd'</span>;   % 换成localhost或者127.0.0.1,就只能本地登录了.</div></pre></td></tr></table></figure><h5 id="2-给用户授权"><a href="#2-给用户授权" class="headerlink" title="2.给用户授权"></a>2.给用户授权</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">grant all privileges on databasename.tablename to <span class="string">'username'</span>@<span class="string">'hostname'</span> identified by <span class="string">'passwd'</span>with grant option;   all代表所有权限,withgrant option代表该用户可以给其他用户也进行授权操作.</div><div class="line">flush privileges;   授权完成,需要刷新生效.</div><div class="line">quit;</div></pre></td></tr></table></figure><h5 id="3-查看mysql有多少个账户"><a href="#3-查看mysql有多少个账户" class="headerlink" title="3.查看mysql有多少个账户"></a>3.查看mysql有多少个账户</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select host,user,password from mysql.user;</div></pre></td></tr></table></figure><h5 id="4-查看MySQL字符集-排序规则"><a href="#4-查看MySQL字符集-排序规则" class="headerlink" title="4.查看MySQL字符集,排序规则"></a>4.查看MySQL字符集,排序规则</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">show variables like <span class="string">'collation%'</span>;</div><div class="line">show variables like <span class="string">'char%'</span>;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://cyoncan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
      <category term="mysql常用" scheme="http://cyoncan.github.io/tags/mysql%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>zabbix配置监控MySQL</title>
    <link href="http://cyoncan.github.io/2017/04/20/zabbix3.0%E7%9B%91%E6%8E%A7MySQL/"/>
    <id>http://cyoncan.github.io/2017/04/20/zabbix3.0监控MySQL/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-04-28T02:25:21.544Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h1 id="zabbix3-0监控MySQL设置"><a href="#zabbix3-0监控MySQL设置" class="headerlink" title="zabbix3.0监控MySQL设置"></a>zabbix3.0监控MySQL设置</h1><h3 id="1-Agent端建立一个登陆MySQL用户-步骤参考MySQL笔记"><a href="#1-Agent端建立一个登陆MySQL用户-步骤参考MySQL笔记" class="headerlink" title="1.Agent端建立一个登陆MySQL用户(步骤参考MySQL笔记)"></a>1.Agent端建立一个登陆MySQL用户(步骤参考MySQL笔记)</h3><h3 id="2-在zabbix-etc-下面新建-my-cnf文件"><a href="#2-在zabbix-etc-下面新建-my-cnf文件" class="headerlink" title="2.在zabbix/etc/下面新建.my.cnf文件"></a>2.在zabbix/etc/下面新建.my.cnf文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ find / -name <span class="string">"sock"</span> -print</div><div class="line">  /var/lib/mysql/mysql.sock</div><div class="line">$ vim /usr/<span class="built_in">local</span>/zabbix/etc/.my.cnf</div><div class="line">  <span class="comment">#zabbix Agent</span></div><div class="line">  [mysql]</div><div class="line">  host=localhost</div><div class="line">  user=zabbix</div><div class="line">  password=zabbix</div><div class="line">  socket=/var/lib/mysql/mysql.sock</div><div class="line">  [mysqladmin]</div><div class="line">  host=localhost</div><div class="line">  usr=zabbix</div><div class="line">  password=zabbix</div><div class="line">  socket=/var/lib/mysql/mysql.sock</div></pre></td></tr></table></figure><h3 id="3-编辑-userparameter-mysql-conf"><a href="#3-编辑-userparameter-mysql-conf" class="headerlink" title="3.编辑 userparameter_mysql.conf"></a>3.编辑 userparameter_mysql.conf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ find / -name userparameter_mysql.conf</div><div class="line">/usr/<span class="built_in">local</span>/src/zabbix-3.0.8/conf/zabbix-agentd/userparameter_mysql.conf</div><div class="line">$ cp userparameter_mysql.conf /usr/<span class="built_in">local</span>/zabbix/etc/zabbix_agentd.conf.d/</div><div class="line">$ sed -i <span class="string">'s#/var/lib/zabbix#/usr/local/zabbix/etc#g'</span> 或者用 vim编辑该文件替换掉 home 目录为 .my.cnf 所在的目录</div><div class="line">$ vim /usr/<span class="built_in">local</span>/zabbix/etc/zabbix/zabbix.agentd.conf</div><div class="line">  添加一行</div><div class="line">  Include=/usr/<span class="built_in">local</span>/zabbix/etc/zabbix_agentd.conf.d/</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="监控" scheme="http://cyoncan.github.io/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
      <category term="zabbix" scheme="http://cyoncan.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>zabbix安装配置</title>
    <link href="http://cyoncan.github.io/2017/04/20/zabbix%E6%90%AD%E5%BB%BA%E5%AE%89%E8%A3%85/"/>
    <id>http://cyoncan.github.io/2017/04/20/zabbix搭建安装/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-05-18T11:13:59.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h1 id="zabbix搭建"><a href="#zabbix搭建" class="headerlink" title="zabbix搭建"></a>zabbix搭建</h1><blockquote><p>环境: centos6,lnmp,zabbix3.0.8</p></blockquote><h3 id="一-web环境安装参考另一篇写lnmp搭建的文章"><a href="#一-web环境安装参考另一篇写lnmp搭建的文章" class="headerlink" title="一.web环境安装参考另一篇写lnmp搭建的文章"></a>一.web环境安装参考另一篇写lnmp搭建的文章</h3><h3 id="二-zabbix安装搭建"><a href="#二-zabbix安装搭建" class="headerlink" title="二.zabbix安装搭建"></a>二.zabbix安装搭建</h3><h6 id="tip-在官方的文档上已经有很详细的说明-下面是根据自己的实际情况参照文档安装过程"><a href="#tip-在官方的文档上已经有很详细的说明-下面是根据自己的实际情况参照文档安装过程" class="headerlink" title="tip:在官方的文档上已经有很详细的说明,下面是根据自己的实际情况参照文档安装过程."></a>tip:在官方的文档上已经有很详细的说明,下面是根据自己的实际情况参照文档安装过程.</h6><h5 id="1-zabbix下载安装选LTS-我下的3-0最新的源码包"><a href="#1-zabbix下载安装选LTS-我下的3-0最新的源码包" class="headerlink" title="1.zabbix下载安装选LTS,我下的3.0最新的源码包"></a>1.zabbix下载安装选LTS,我下的3.0最新的源码包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ wget -c https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.0.8/zabbix-3.0.8.tar.gz</div><div class="line">$ tar zxvf zabbix-3.0.8.tar.gz</div><div class="line">$ groupadd zabbix</div><div class="line">$ useradd -g zabbix zabbix</div><div class="line">$ <span class="built_in">cd</span> zabbix-3.0.8/ </div><div class="line">$ ./configure --prefix=/data/<span class="built_in">local</span>/zabbix --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2 --with-openssl</div><div class="line">$ yum install net-snmp-devel.x86_64 -y (根据实际环境去安装提示缺少的东西,MySQL大部分是因为没有软连接到usr/bin)</div><div class="line">$ ln <span class="_">-s</span> /data/<span class="built_in">local</span>/zabbix/sbin/* /usr/sbin/</div></pre></td></tr></table></figure><h5 id="2-创建zabbix数据库-导入数据库"><a href="#2-创建zabbix数据库-导入数据库" class="headerlink" title="2.创建zabbix数据库,导入数据库"></a>2.创建zabbix数据库,导入数据库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ mysql -uroot -p</div><div class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</div><div class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">'localhost'</span> identified by <span class="string">'passwd'</span>;</div><div class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">'127.0.0.1'</span> identified by <span class="string">'passwd'</span>;</div><div class="line">或者直接用</div><div class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">'%'</span> identified by <span class="string">'passwd'</span>;</div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; quit;</div><div class="line">$ <span class="built_in">cd</span> /data/src/zabbix-3.0.8/database/mysql</div><div class="line">$ mysql -uzabbix -p zabbix &lt; schema.sql   导入zabbix数据库脚本</div><div class="line"><span class="comment"># stop here if you are creating database for Zabbix proxy</span></div><div class="line">$ mysql -uzabbix -p zabbix &lt; images.sql</div><div class="line">$ mysql -uzabbix -p zabbix &lt; data.sql</div><div class="line">导入数据库另一种方法:</div><div class="line">$ mysql -uzabbix -p</div><div class="line">mysql&gt; use zabbix;</div><div class="line">mysql&gt; <span class="built_in">source</span> /data/src/zabbix-3.0.8/database/mysql/schema.sql;</div><div class="line">......</div></pre></td></tr></table></figure><h5 id="3-修改zabbix-server配置文件"><a href="#3-修改zabbix-server配置文件" class="headerlink" title="3.修改zabbix_server配置文件"></a>3.修改zabbix_server配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DBName=zabbix       <span class="comment">#数据库名称</span></div><div class="line">DBUser=zabbix       <span class="comment">#数据库用户名</span></div><div class="line">DBPassword=123456   <span class="comment">#数据库密码</span></div><div class="line">ListenIP=127.0.0.1  <span class="comment">#数据库ip地址</span></div><div class="line">Timeout=4</div><div class="line">AlertScriptsPath=/data/<span class="built_in">local</span>/zabbix/share/zabbix/alertscripts</div><div class="line">ExternalScripts=/data/<span class="built_in">local</span>/zabbix/share/zabbix/externalscripts</div><div class="line">LogSlowQueries=3000</div></pre></td></tr></table></figure><h5 id="4-创建web目录"><a href="#4-创建web目录" class="headerlink" title="4.创建web目录"></a>4.创建web目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/web/zabbix.monitor.cn</div><div class="line">cp <span class="_">-a</span> /data/src/zabbix-3.0.8/frontend/php/* /data/web/zabbix.monitor.cn/</div><div class="line">chown -R www:www zabbix.monitor.cn/</div></pre></td></tr></table></figure><h5 id="5-配置nginx"><a href="#5-配置nginx" class="headerlink" title="5.配置nginx"></a>5.配置nginx</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">vim /data/<span class="built_in">local</span>/nginx/conf/nginx.conf</div><div class="line">在server模块外http模块内加入一行</div><div class="line">include vhost/*.conf</div><div class="line">:wq</div><div class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/nginx/conf/vhost</div><div class="line">vim zabbix.conf</div><div class="line">server</div><div class="line">      &#123;</div><div class="line">      listen 80;</div><div class="line">      server_name 127.0.0.1;</div><div class="line">      index index.html index.php;</div><div class="line">      root  /data/web/zabbix.monitor.cn;</div><div class="line">      access_log  /data/logs/<span class="variable">$SERVER_NAME</span>.access.log main;</div><div class="line">	  error_log  /data/logs/<span class="variable">$SERVER_NAME</span>.log error;</div><div class="line">      </div><div class="line">      location / &#123;</div><div class="line">      fastcgi_index   index.php;</div><div class="line">      fastcgi_pass    127.0.0.1:9000;</div><div class="line">      include         fastcgi_params;</div><div class="line">      fastcgi_param   SCRIPT_FILENAME    <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">      fastcgi_param   SCRIPT_NAME        <span class="variable">$fastcgi_script_name</span>;</div><div class="line">	  &#125;</div><div class="line"></div><div class="line">	  <span class="keyword">if</span> (!<span class="_">-e</span> <span class="variable">$request_filename</span>)&#123;</div><div class="line">	  		 rewrite ^/(.*)$ /index.php/<span class="variable">$1</span> last;</div><div class="line">	  &#125;</div><div class="line">                </div><div class="line">      location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|JPG|xml|json)$</div><div class="line">      &#123;</div><div class="line">      expires      30d;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      location ~ .*\.(js|css)?$</div><div class="line">      &#123;</div><div class="line">      expires      12h;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">#   access_log m.log  access;</span></div><div class="line">      &#125;</div></pre></td></tr></table></figure><h5 id="6-修改php-ini文件-这个地方债官网上有配置要求说明"><a href="#6-修改php-ini文件-这个地方债官网上有配置要求说明" class="headerlink" title="6.修改php.ini文件(这个地方债官网上有配置要求说明)"></a>6.修改php.ini文件(这个地方债官网上有配置要求说明)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">post_max_size = 32M</div><div class="line">max_execution_time = 300</div><div class="line">max_input_time = 300</div><div class="line">date.timezone = Asia/Shanghai</div><div class="line">以下是我自己的进入zabbi安装检测各个配置参数和模块是否满足zabbix安装要求.如果忘记更改php.ini或者不知道改哪些的,可以进入到安装界面http://zabbix.monitor.cn/setup.php 根据检测结果,再去修改,每次修改可能需要重启nginx和php-fpm</div><div class="line">PHP version	5.6.30(我用的PHP版本)	5.4.0(zabbix3.0.8要求PHP最低的版本,下面的参数类似要求)	OK</div><div class="line">PHP option <span class="string">"memory_limit"</span>	128M	128M	OK</div><div class="line">PHP option <span class="string">"post_max_size"</span>	32M	16M	OK</div><div class="line">PHP option <span class="string">"upload_max_filesize"</span>	2M	2M	OK</div><div class="line">PHP option <span class="string">"max_execution_time"</span>	300	300	OK</div><div class="line">PHP option <span class="string">"max_input_time"</span>	300	300	OK</div><div class="line">PHP option <span class="string">"date.timezone"</span>	Asia/Shanghai		OK</div><div class="line">PHP databases support	MySQL/SQLite3 OK</div><div class="line">PHP bcmath	on		OK</div><div class="line">PHP mbstring	on		OK</div><div class="line">PHP option <span class="string">"mbstring.func_overload"</span>	off	off	OK</div><div class="line">PHP option <span class="string">"always_populate_raw_post_data"</span>	off	off	OK</div><div class="line">PHP sockets	on		OK</div><div class="line">PHP gd	2.1.0	2.0	OK</div><div class="line">PHP gd PNG support	on		OK</div><div class="line">PHP gd JPEG support	on		OK</div><div class="line">PHP gd FreeType support	on		OK</div><div class="line">PHP libxml	2.7.6	2.6.15	OK</div><div class="line">PHP xmlwriter	on		OK</div><div class="line">PHP xmlreader	on		OK</div><div class="line">PHP ctype	on		OK</div><div class="line">PHP session	on		OK</div><div class="line">PHP option <span class="string">"session.auto_start"</span>	off	off	OK</div><div class="line">PHP gettext	on		OK</div><div class="line">PHP option <span class="string">"arg_separator.output"</span>	&amp;	&amp;	OK</div></pre></td></tr></table></figure><h5 id="7-启动-进入安装界面"><a href="#7-启动-进入安装界面" class="headerlink" title="7.启动,进入安装界面"></a>7.启动,进入安装界面</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ service nginx start</div><div class="line">$ service php-fpm start</div><div class="line">$ zabbix_server   </div><div class="line">浏览器输入 http://zabbix.monitor.cn/setup.php 域名是之前nginx里面配置好的,或者不用域名用IP和别的端口,域名需要做host映射,或者内网路由器里面做虚拟映射.出现界面下一步,填上MySQL zabbix用户密码一致,下一步,看到绿色congratulation 就安装完成了.</div><div class="line">默认用户名和密码:admin,zabbix</div><div class="line">设置zabbix服务开机启动</div><div class="line">$ cp /data/src/zabbix/misc/init.d/fedora/core/* /etc/init.d/</div><div class="line">$ vim /etc/init.d/zabbix_server</div><div class="line">修改BASEDIR你zabbix安装路径</div><div class="line">chkconfig --add zabbix_server</div><div class="line">chkconfig --add zabbix_agentd</div><div class="line">chkconfig zabbix_server on</div><div class="line">chkconfig zabbix_agentd on</div></pre></td></tr></table></figure><h5 id="8-客户端安装"><a href="#8-客户端安装" class="headerlink" title="8.客户端安装"></a>8.客户端安装</h5><p>客户端根据实际情况去使用几种方案,一般机器少的,都是一台server端,几台agent端.方案可以参考:<a href="http://t.cn/RXPa0zV" rel="external nofollow noopener noreferrer" target="_blank">http://t.cn/RXPa0zV</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/zabbix --enable-agent --with-openssl</div><div class="line">make install</div><div class="line">其它的设置和前面的安装配置一样,zabbix_agentd.conf </div><div class="line">Server=Serverip</div><div class="line">ServerActive=Serverip</div><div class="line">Hostname=自定义zabbix客户端hostname,不要和server端配置的hostname一样.</div><div class="line">tip:将10050,10051端口添加到防火墙,server端也是.agent端需要启动zabbix_agentd服务</div></pre></td></tr></table></figure><h5 id="9-客户端和服务端使用加密传输"><a href="#9-客户端和服务端使用加密传输" class="headerlink" title="9.客户端和服务端使用加密传输"></a>9.客户端和服务端使用加密传输</h5><h6 id="i-使用psk共享密钥加密"><a href="#i-使用psk共享密钥加密" class="headerlink" title="i. 使用psk共享密钥加密"></a>i. 使用psk共享密钥加密</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Generating PSK在客户端操作</div><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zabbix/</div><div class="line">$ openssl rand -hex 32 -out zabbix_agentd.psk</div><div class="line">$ chown zabbix:zabbix zabbix_agentd.psk</div><div class="line">$ vim /etc/zabbix_agentd.conf</div><div class="line">  TLSConnect=psk</div><div class="line">  TLSAccept=psk</div><div class="line">  TLSPSKFile=/home/zabbix/zabbix_agentd.psk</div><div class="line">  TLSPSKIdentity=PSK 001</div><div class="line"> service zabbix_agentd restart</div><div class="line"> 回到server机器,在host机器加密那里选择psk,填入信息.</div></pre></td></tr></table></figure><h6 id="ii-使用证书加密"><a href="#ii-使用证书加密" class="headerlink" title="ii. 使用证书加密"></a>ii. 使用证书加密</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /data/<span class="built_in">local</span>/zabbix/zabbix_crt</div><div class="line">$ <span class="built_in">cd</span> zabbix_crt/</div><div class="line"><span class="comment">#生成ca私钥</span></div><div class="line">$ openssl genrsa -aes256 -out ca.key 2048   需要输入给私钥加密的密码</div><div class="line"><span class="comment">#使用ca私钥建立ca证书</span></div><div class="line">$ openssl req -new -x509 -nodes -days 1000 -key ca.key -subj /CN=ServerIPorDomainName\ CA/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; ca.crt</div><div class="line"><span class="comment">#生成服务器csr证书请求文件</span></div><div class="line">$ openssl req -newkey rsa:2048 -days 1000 -nodes -keyout server.key -subj /CN=ServerIPorDomainName/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; server.csr</div><div class="line"><span class="comment">#使用ca证书与私钥签发服务器证书</span></div><div class="line">$ openssl x509 -req -in server.csr -days 1000 -CA ca.crt -CAkey ca.key -set_serial 01 &gt; server.crt</div><div class="line"><span class="comment">#生成客户端csr证书请求文件</span></div><div class="line">$ openssl req -newkey rsa:2048 -days 1000 -nodes -keyout client.key -subj /CN=client/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; client.csr</div><div class="line"><span class="comment">#使用ca证书与私钥签发客户端证书</span></div><div class="line">$ openssl x509 -req -in client.csr -days 1000 -CA ca.crt -CAkey ca.key -set_serial 01 &gt; client.crt</div><div class="line"></div><div class="line">服务端文件位置可以不改变,用scp命令将刚刚生成的客户端需要文件上传到客户端自定义的文件夹 /usr/<span class="built_in">local</span>/zabbix/zabbix_crt/</div><div class="line"></div><div class="line">服务端: ca.crt , server.crt , server.crt</div><div class="line">vim /data/<span class="built_in">local</span>/zabbix/etc/zabbix_server.conf</div><div class="line">TLSCAFile=/data/<span class="built_in">local</span>/zabbix/zabbix_crt/ca.crt</div><div class="line">TLSCertFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/server.crt</div><div class="line">TLSKeyFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/server.key</div><div class="line"></div><div class="line">客户端: ca.crt , client.crt , client.crt</div><div class="line">TLSConnect=cert</div><div class="line">TLSAccept=cert</div><div class="line">TLSCAFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/ca.crt</div><div class="line">TLSCertFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/client.crt</div><div class="line">TLSKeyFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/client.key</div><div class="line"></div><div class="line">进入webui configuration/hosts/打开相应的主机/双向都可以选certificate</div><div class="line">重启zabbix_server和zabbix_agent,再进去看cert是否变蓝色,有延迟几十秒.</div><div class="line">我记录的文档可能有些不全,希望大家遇到问题多分析日志,去网上搜索遇到的错误信息.</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="监控" scheme="http://cyoncan.github.io/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="zabbix" scheme="http://cyoncan.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>vim常用命令</title>
    <link href="http://cyoncan.github.io/2017/04/20/vim/"/>
    <id>http://cyoncan.github.io/2017/04/20/vim/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-05-24T16:20:02.056Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h1 id="Linux-vim常用命令"><a href="#Linux-vim常用命令" class="headerlink" title="Linux vim常用命令"></a>Linux vim常用命令</h1><h3 id="1-替换"><a href="#1-替换" class="headerlink" title="1.替换"></a>1.替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">:s/abc/efg/      替换当前行,第一个 abc 为 efg</div><div class="line">:s/abc/efg/g     替换当前行,所有   abc 为 efg</div><div class="line">:n,<span class="variable">$s</span>/xyz/org/   替换第 n 行开始到最后一行中每一行的第一个 xyz 为 org</div><div class="line">:n,<span class="variable">$s</span>/xyz/org/g  替换第 n 行开始到最后一行中每一行所有     xyz 为 org</div><div class="line"> n 为数字，若 n 为 . ，表示从当前行开始到最后一行</div><div class="line">:%s/xyz/org/     (等同于:g/xyz/s//org/)  替换每一行的第一个 xyz 为 org</div><div class="line">:%s/xyz/org/g   （等同于:g/xyz/s//org/g）替换每一行中所有   xyz 为 org</div></pre></td></tr></table></figure><h3 id="2-vim执行：wq清楚屏幕上上一次编辑过的内容"><a href="#2-vim执行：wq清楚屏幕上上一次编辑过的内容" class="headerlink" title="2.vim执行：wq清楚屏幕上上一次编辑过的内容"></a>2.vim执行：wq清楚屏幕上上一次编辑过的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim退出后清屏,屏幕不显示之前编辑的内容.</div><div class="line">TERM=xterm; <span class="built_in">export</span> TERM</div></pre></td></tr></table></figure><h3 id="3-删除全部"><a href="#3-删除全部" class="headerlink" title="3.删除全部"></a>3.删除全部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%d</div></pre></td></tr></table></figure><h3 id="4-复制"><a href="#4-复制" class="headerlink" title="4.复制"></a>4.复制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v      进入块选择模式</div><div class="line">↑↓←→   选择要复制的块</div><div class="line">yy     复制</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="vim" scheme="http://cyoncan.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>理解xargs</title>
    <link href="http://cyoncan.github.io/2017/04/20/xargs/"/>
    <id>http://cyoncan.github.io/2017/04/20/xargs/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-05-08T14:39:17.041Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h3 id="理解xargs命令工作和使用"><a href="#理解xargs命令工作和使用" class="headerlink" title="理解xargs命令工作和使用"></a>理解xargs命令工作和使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">⚡ root@intelnet:$ xargs </div><div class="line">hello</div><div class="line">hello</div></pre></td></tr></table></figure><p><em>工作形式: 从标准输入stdin读取数据,根据输入读取执行命令作为参数提供给它一次或多次.输入中的任何空白和空格均视为分隔符,空行被忽略.进入xargs ,进行数据输入, Ctrl+D告诉xargs结束输入任务,echo命令被自动执行,并且再次打印 hello.</em></p><p><em>echo是xargs默认的执行命令,我们可以指定其它命令作为参数传递给xargs , 然后通过stdin传递要查询的文件和类型作为输入的名称.如下:</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">⚡ root@intelnet:$ xargs find -name</div><div class="line"> <span class="string">"*.log"</span></div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="xargs" scheme="http://cyoncan.github.io/tags/xargs/"/>
    
  </entry>
  
  <entry>
    <title>CentOS防火墙之配置iptables</title>
    <link href="http://cyoncan.github.io/2017/04/20/CentOS6%E9%98%B2%E7%81%AB%E5%A2%99%E4%B9%8Biptables/"/>
    <id>http://cyoncan.github.io/2017/04/20/CentOS6防火墙之iptables/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-05-11T05:32:00.396Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h1 id="一、iptables表和链的结构-四表五链"><a href="#一、iptables表和链的结构-四表五链" class="headerlink" title="一、iptables表和链的结构(四表五链)"></a>一、iptables表和链的结构(四表五链)</h1><h3 id="1-四张表处理优先级-raw-gt-mangle-gt-nat-gt-filter"><a href="#1-四张表处理优先级-raw-gt-mangle-gt-nat-gt-filter" class="headerlink" title="1.四张表处理优先级: raw&gt;mangle&gt;nat&gt;filter"></a>1.四张表处理优先级: raw&gt;mangle&gt;nat&gt;filter</h3><p><strong>raw:</strong> 优先级最高, 设置raw一般是为了不再让iptables做数据包的跟踪链接处理, 提高性能.</p><p><strong>mangle:</strong> 用于对特定数据包的修改.</p><p><strong>nat:</strong> 用于nat功能端口或者地址映射.</p><p><strong>filter:</strong> 一般的过滤功能.</p><h3 id="2-五链：INPUT-FORWARD-OUTPUT-PREROUTING-POSTROUTING"><a href="#2-五链：INPUT-FORWARD-OUTPUT-PREROUTING-POSTROUTING" class="headerlink" title="2.五链：INPUT, FORWARD, OUTPUT, PREROUTING, POSTROUTING"></a>2.五链：INPUT, FORWARD, OUTPUT, PREROUTING, POSTROUTING</h3><p><strong>raw表</strong>中的链有: PREROUTING, OUTPUT</p><p><strong>mangle表</strong>中的链有: PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING</p><p><strong>nat表</strong>中的链有: PREROUTING, POSTROUTING, OUTPUT</p><p><strong>filter表</strong>中的链有: INPUT, FORWARD, OUTPUT</p><h3 id="3-iptables常用参数"><a href="#3-iptables常用参数" class="headerlink" title="3.iptables常用参数:"></a>3.iptables常用参数:</h3><p>tip: iptable -h都能看到对应的解释</p><p><strong>规则增删改查:</strong></p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">-A</td><td style="text-align:left">在规则链的末尾加入新规则</td></tr><tr><td style="text-align:left">-I</td><td style="text-align:left">在规则链的头部加入新规则</td></tr><tr><td style="text-align:left">-D</td><td style="text-align:left">删除</td></tr><tr><td style="text-align:left">-R</td><td style="text-align:left">修改</td></tr><tr><td style="text-align:left">-L</td><td style="text-align:left">查看</td></tr><tr><td style="text-align:left">-P</td><td style="text-align:left">设置默认策略 , iptables -P INPUT DROP</td></tr><tr><td style="text-align:left">-F</td><td style="text-align:left">清空默认规则链</td></tr><tr><td style="text-align:left">-X</td><td style="text-align:left">删除自定义空链</td></tr></tbody></table><p><strong>常用参数:</strong></p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">-p</td><td style="text-align:left">指定协议 tcp/udp/icmp</td></tr><tr><td style="text-align:left">-s</td><td style="text-align:left">指定源地址 ip/mask , 加叹号 “!” 表示相反的意思</td></tr><tr><td style="text-align:left">-d</td><td style="text-align:left">匹配目标地址</td></tr><tr><td style="text-align:left">–sport</td><td style="text-align:left">匹配来源端口号</td></tr><tr><td style="text-align:left">–dport</td><td style="text-align:left">匹配目端口号</td></tr><tr><td style="text-align:left">-i</td><td style="text-align:left">匹配从这块网卡流入的数据</td></tr><tr><td style="text-align:left">-o</td><td style="text-align:left">匹配从这块网卡流出的数据</td></tr><tr><td style="text-align:left">-m</td><td style="text-align:left">加载模块</td></tr><tr><td style="text-align:left">-t</td><td style="text-align:left">指定表, 默认filter表. iptables -L - nat/mangle/raw</td></tr><tr><td style="text-align:left">-j</td><td style="text-align:left">指定处理的动作 , ACCEPT/DROP</td></tr></tbody></table><p><strong>常用处理动作:</strong></p><table><thead><tr><th style="text-align:left">动作</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">ACCEPT</td><td style="text-align:left">允许封包通过,:将数据包放行,进行完此动作后,不再对比其他规则,直接跳往下一个规则链.</td></tr><tr><td style="text-align:left">DROP</td><td style="text-align:left">丢弃封包,响应超时,对方无法判断主机是否在线或者流量被拒绝,不再对比其他规则,中断过滤.</td></tr><tr><td style="text-align:left">REJECT</td><td style="text-align:left">拒绝封包通过,并将数据包封装,返回消息,对方看到主机口不可达.</td></tr><tr><td style="text-align:left">REDIRECT</td><td style="text-align:left">将包重定向到另一个端口,之后继续对比其他规则.</td></tr><tr><td style="text-align:left">MASQUERADE</td><td style="text-align:left">改写封包来源ip为防火墙NIC ip , 可指定port范围 , 之后跳往下一规则.</td></tr><tr><td style="text-align:left">SNAT</td><td style="text-align:left">改写封包来源ip为某特定ip或ip范围 , 可指定 port 范围 , 之后跳往下一规则.</td></tr><tr><td style="text-align:left">DNAT</td><td style="text-align:left">改写封包目的ip为某特定ip或ip范围, 可指定port范围 , 之后跳往下一规则.</td></tr></tbody></table><h1 id="二、配置filter表防火墙"><a href="#二、配置filter表防火墙" class="headerlink" title="二、配置filter表防火墙"></a>二、配置filter表防火墙</h1><h6 id="tip-一般设置默认规则-INPUT链和FORWARD链为DROP-OUTPUT链为ACCEPT"><a href="#tip-一般设置默认规则-INPUT链和FORWARD链为DROP-OUTPUT链为ACCEPT" class="headerlink" title="tip: 一般设置默认规则,INPUT链和FORWARD链为DROP , OUTPUT链为ACCEPT"></a>tip: 一般设置默认规则,INPUT链和FORWARD链为DROP , OUTPUT链为ACCEPT</h6><h3 id="1-清除预设表filter中的所有规则链的规则"><a href="#1-清除预设表filter中的所有规则链的规则" class="headerlink" title="1.清除预设表filter中的所有规则链的规则"></a>1.清除预设表filter中的所有规则链的规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -F</div></pre></td></tr></table></figure><h3 id="2-清除预设表filter中使用者自定链中的规则"><a href="#2-清除预设表filter中使用者自定链中的规则" class="headerlink" title="2.清除预设表filter中使用者自定链中的规则"></a>2.清除预设表filter中使用者自定链中的规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -X</div></pre></td></tr></table></figure><h3 id="3-设定预设规则"><a href="#3-设定预设规则" class="headerlink" title="3.设定预设规则"></a>3.设定预设规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -P INPUT DROP</div><div class="line">iptables -P OUTPUT ACCEPT</div><div class="line">iptables -P FORWARD DROP</div></pre></td></tr></table></figure><h3 id="4-根据自己机器的实际情况开启相应端口"><a href="#4-根据自己机器的实际情况开启相应端口" class="headerlink" title="4.根据自己机器的实际情况开启相应端口"></a>4.根据自己机器的实际情况开启相应端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 允许回环loopback访问</span></div><div class="line">$ iptables -A INPUT -i lo -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -o lo -j ACCEPT   (output链的默认策略设置为DROP时,需要添加这条,以下针对的每个端口同此一样.)</div><div class="line"><span class="comment">#开启22端口,ssh才能登录.</span></div><div class="line">$ iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">或者</div><div class="line">$ iptables -A INPUT -i eth0 <span class="_">-s</span> 192.168.2.100 -p tcp --dport 22 -j ACCEPT <span class="comment">#指定eth1网卡和192.168.2.100允许ssh登录</span></div><div class="line">$ iptables -A OUTPUT -o eth0 <span class="_">-s</span> 192.168.2.100 -p tcp --dport 22 -j ACCEPT</div><div class="line"><span class="comment">#允许ping(即icmp包通过)</span></div><div class="line">$ iptables -A INPUT -p icmp -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -p icmp -j ACCEPT</div><div class="line"><span class="comment">#使ping域名可以得到响应</span></div><div class="line">$ iptables -A INPUT -p udp --sport 53 -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -p udp --dport 53 -j ACCEPT</div><div class="line">$ iptables -A INPUT -p udp --dport 53 -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -p udp --sport 53 -j ACCEPT</div><div class="line">tip: 除了以上用命令去添加规则,还可以用编辑文件的方式 vim /etc/sysconfig/iptables</div></pre></td></tr></table></figure><h3 id="5-保存iptables配置"><a href="#5-保存iptables配置" class="headerlink" title="5.保存iptables配置"></a>5.保存iptables配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables save</div></pre></td></tr></table></figure><h3 id="6-重启iptables服务"><a href="#6-重启iptables服务" class="headerlink" title="6.重启iptables服务"></a>6.重启iptables服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div></pre></td></tr></table></figure><h3 id="7-查看iptables规则"><a href="#7-查看iptables规则" class="headerlink" title="7.查看iptables规则"></a>7.查看iptables规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -L -n</div></pre></td></tr></table></figure><h3 id="8-iptables优化"><a href="#8-iptables优化" class="headerlink" title="8.iptables优化:"></a>8.iptables优化:</h3><p>请求比较频繁的放在最上面,请求频率较小的放在最后面.这里整理关于防火墙的东西,不是具体的知识,更多工操作使用,具体的防火墙知识,还需要去阅读参考网上写的各种文章,需要多读多看多试,才能理解深入.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="CentOS" scheme="http://cyoncan.github.io/categories/CentOS/"/>
    
    
      <category term="iptables" scheme="http://cyoncan.github.io/tags/iptables/"/>
    
      <category term="防火墙" scheme="http://cyoncan.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>lnmp环境搭建配置</title>
    <link href="http://cyoncan.github.io/2017/03/27/lnmp/"/>
    <id>http://cyoncan.github.io/2017/03/27/lnmp/</id>
    <published>2017-03-27T08:09:59.000Z</published>
    <updated>2017-05-11T07:06:30.328Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --><a id="more"></a><h1 id="一、centos-minimal安装完成"><a href="#一、centos-minimal安装完成" class="headerlink" title="一、centos minimal安装完成"></a>一、centos minimal安装完成</h1><h3 id="1、设置开机网卡自动连接"><a href="#1、设置开机网卡自动连接" class="headerlink" title="1、设置开机网卡自动连接"></a>1、设置开机网卡自动连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/sysconfig/network-scripts/ifcfg-eth0</div><div class="line">  ONBOOT=yes</div></pre></td></tr></table></figure><h3 id="2、关闭SELinux"><a href="#2、关闭SELinux" class="headerlink" title="2、关闭SELinux"></a>2、关闭SELinux</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ /usr/sbin/sestatus -v</div><div class="line">$ setenforce 0   (临时关闭)</div><div class="line">$ vim /etc/selinux/config</div><div class="line">  将 SELINUX=enforcing 改为 SELINUX=disabled   (永久关闭)</div><div class="line">  sync reboot</div></pre></td></tr></table></figure><h3 id="3、防火墙"><a href="#3、防火墙" class="headerlink" title="3、防火墙"></a>3、防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ chkconfig iptables --list     (查看)</div><div class="line">$ chkconfig iptables on/off     (永久)</div><div class="line">$ service iptables start/stop   (临时)</div></pre></td></tr></table></figure><h5 id="3-1、设定预设规则-详情参考-http-t-cn-RiONgR0"><a href="#3-1、设定预设规则-详情参考-http-t-cn-RiONgR0" class="headerlink" title="3.1、设定预设规则(详情参考:http://t.cn/RiONgR0)"></a>3.1、设定预设规则(详情参考:<a href="http://t.cn/RiONgR0" rel="external nofollow noopener noreferrer" target="_blank">http://t.cn/RiONgR0</a>)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ iptables -P INPUT DROP</div><div class="line">$ iptables -P OUTPUT ACCEPT</div><div class="line">$ iptables -P FORWARD DROP</div><div class="line">eg:开启ssh 22端口</div><div class="line">$ iptables -A INPUT -p tcp <span class="_">-s</span> 192.168.2.58 --dport 22 -j ACCEPT  (除了192.168.2.58其它IP禁止ssh)</div><div class="line">$ iptables -A OUTPUT -p tcp <span class="_">-s</span> 192.168.2.58 --sport 22 -j ACCEPT (如果OUTPUT设置成DROP则需添加该条)</div><div class="line">$ service iptables save (手动每条去添加,需要手动保存,不然重启后失效)</div><div class="line">或者直接在 iptables 编辑添加删除</div><div class="line">$ vim /etc/sysconfig/iptables   (编辑iptables规则)</div><div class="line">$ /etc/init.d/iptables restart</div></pre></td></tr></table></figure><h3 id="4、设置yum-repo源"><a href="#4、设置yum-repo源" class="headerlink" title="4、设置yum repo源"></a>4、设置yum repo源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">先备份系统源</div><div class="line">$ mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div><div class="line">$ <span class="built_in">cd</span> /etc/yum.repos.d/</div><div class="line">$ wget -c http://mirrors.163.com/.help/CentOS6-Base-163.repo</div><div class="line">$ vim CentOS-Media.repo</div><div class="line">  关闭cdrom源</div><div class="line">$ yum install epel   (安装第三方软件源)</div></pre></td></tr></table></figure><h3 id="5-、通过yum-group装系统必备软件"><a href="#5-、通过yum-group装系统必备软件" class="headerlink" title="5 、通过yum group装系统必备软件"></a>5 、通过yum group装系统必备软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ yum grouplist</div><div class="line">$ yum groupinstall <span class="string">"Development tools"</span></div><div class="line">$ yum groupinstall <span class="string">"System Administration Tools"</span></div><div class="line">(cent7用 yum group mark install)根据需求去选择软件包</div><div class="line">$ yum install setuptool.x86_64</div><div class="line">$ yum install ntsysv</div><div class="line">$ yum install system-config-network-tui</div><div class="line">$ yum install system-config-firewall-tui</div><div class="line">$ yum install system-config-securitylevel-tui</div></pre></td></tr></table></figure><h1 id="二、基础目录结构"><a href="#二、基础目录结构" class="headerlink" title="二、基础目录结构"></a>二、基础目录结构</h1><pre><code>1.mkdir
/data/src        下载存放源码目录
/data/log        站点日志目录
/data/www        WEB站点目录
/data/svn        SVN仓库目录
/data/mysqldb    MYSQL数据库数据目录
/data/backup     MYSQL数据备份目录
/data/local/php  PHP目录,local下面都是程序编译安装目录
/data/local/nginx
/data/local/mysql
</code></pre><h1 id="三、Nginx"><a href="#三、Nginx" class="headerlink" title="三、Nginx"></a>三、Nginx</h1><h3 id="1、安装编译工具及相关库"><a href="#1、安装编译工具及相关库" class="headerlink" title="1、安装编译工具及相关库"></a>1、安装编译工具及相关库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</div></pre></td></tr></table></figure><h3 id="2、安装PCRE-作用让Nginx支持Rewrite-下载PCRE安装包，Google搜索下"><a href="#2、安装PCRE-作用让Nginx支持Rewrite-下载PCRE安装包，Google搜索下" class="headerlink" title="2、安装PCRE(作用让Nginx支持Rewrite),下载PCRE安装包，Google搜索下"></a>2、安装PCRE(作用让Nginx支持Rewrite),下载PCRE安装包，Google搜索下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /data/src</div><div class="line">$ wget -c https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz</div><div class="line">$ tar -zxvf pcre-8.40.tar.gz</div><div class="line">$ <span class="built_in">cd</span> pcre-8.40</div><div class="line">$ ./configure</div><div class="line">$ Make&amp;&amp;make install</div><div class="line">$ pcre-config --version  (查看pcre版本)</div><div class="line">$ cp pcre-8.40/ /usr/<span class="built_in">local</span>/src/</div></pre></td></tr></table></figure><h3 id="3、Nginx下载安装"><a href="#3、Nginx下载安装" class="headerlink" title="3、Nginx下载安装"></a>3、Nginx下载安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /data/src</div><div class="line">$ wget -c http://nginx.org/download/nginx-1.10.3.tar.gz</div><div class="line">$ tar -zxvf nginx-1.10.3.tar.gz</div><div class="line">$ <span class="built_in">cd</span> nginx-1.10.3</div><div class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/<span class="built_in">local</span>/src/pcre-8.40 (--with-prce=dir 指定pcre的源码目录)</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line">$ /usr/<span class="built_in">local</span>/nginx/sbin/nginx -v (查看Nginx版本)</div><div class="line">$ ln <span class="_">-s</span> /usr/<span class="built_in">local</span>/nginx/sbin/nginx /usr/bin</div><div class="line">$ nginx            (-t查看启动  <span class="_">-s</span> stop/reopen停止/重启)</div><div class="line">  访问 http://localhost 查看Nginx是否正常安装启动</div></pre></td></tr></table></figure><h5 id="3-1-tip-Nginx启动服务管理脚本"><a href="#3-1-tip-Nginx启动服务管理脚本" class="headerlink" title="3.1 tip:Nginx启动服务管理脚本"></a>3.1 tip:Nginx启动服务管理脚本</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># nginx - this script starts and stops the nginx daemin</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># chkconfig:   - 85 15 </span></div><div class="line"><span class="comment"># description:  Nginx is an HTTP(S) server, HTTP(S) reverse proxy and IMAP/POP3 proxy server</span></div><div class="line"><span class="comment"># processname: nginx</span></div><div class="line"><span class="comment"># config:      /usr/local/nginx/conf/nginx.conf</span></div><div class="line"><span class="comment"># pidfile:     /usr/local/nginx/logs/nginx.pid</span></div><div class="line"></div><div class="line"><span class="comment"># Source function library.</span></div><div class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></div><div class="line"></div><div class="line"><span class="comment"># Source networking configuration.</span></div><div class="line">. /etc/sysconfig/network</div><div class="line"></div><div class="line"><span class="comment"># Check that networking is up.</span></div><div class="line">[ <span class="string">"<span class="variable">$NETWORKING</span>"</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</div><div class="line"></div><div class="line">nginx=<span class="string">"/usr/local/nginx/sbin/nginx"</span></div><div class="line">prog=$(basename <span class="variable">$nginx</span>)</div><div class="line"></div><div class="line">NGINX_CONF_FILE=<span class="string">"/usr/local/nginx/conf/nginx.conf"</span></div><div class="line"></div><div class="line">lockfile=/var/lock/subsys/nginx</div><div class="line"></div><div class="line"><span class="function"><span class="title">start</span></span>() &#123;</div><div class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</div><div class="line">    [ <span class="_">-f</span> <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></div><div class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></div><div class="line">    retval=$?</div><div class="line">    <span class="built_in">echo</span></div><div class="line">    [ <span class="variable">$retval</span> <span class="_">-eq</span> 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></div><div class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">stop</span></span>() &#123;</div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></div><div class="line">    killproc <span class="variable">$prog</span> -QUIT</div><div class="line">    retval=$?</div><div class="line">    <span class="built_in">echo</span></div><div class="line">    [ <span class="variable">$retval</span> <span class="_">-eq</span> 0 ] &amp;&amp; rm <span class="_">-f</span> <span class="variable">$lockfile</span></div><div class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">restart</span></span>() &#123;</div><div class="line">    configtest || <span class="built_in">return</span> $?</div><div class="line">    stop</div><div class="line">    start</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">reload</span></span>() &#123;</div><div class="line">    configtest || <span class="built_in">return</span> $?</div><div class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></div><div class="line">    killproc <span class="variable">$nginx</span> -HUP</div><div class="line">    RETVAL=$?</div><div class="line">    <span class="built_in">echo</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</div><div class="line">    restart</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</div><div class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</div><div class="line">    status <span class="variable">$prog</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</div><div class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></div><div class="line">    start)</div><div class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</div><div class="line">        <span class="variable">$1</span></div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        rh_status_q || <span class="built_in">exit</span> 0</div><div class="line">        <span class="variable">$1</span></div><div class="line">        ;;</div><div class="line">    restart|configtest)</div><div class="line">        <span class="variable">$1</span></div><div class="line">        ;;</div><div class="line">    reload)</div><div class="line">        rh_status_q || <span class="built_in">exit</span> 7</div><div class="line">        <span class="variable">$1</span></div><div class="line">        ;;</div><div class="line">    force-reload)</div><div class="line">        force_reload</div><div class="line">        ;;</div><div class="line">    status)</div><div class="line">        rh_status</div><div class="line">        ;;</div><div class="line">    condrestart|try-restart)</div><div class="line">        rh_status_q || <span class="built_in">exit</span> 0</div><div class="line">            ;;</div><div class="line">    *)</div><div class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span></div><div class="line">        <span class="built_in">exit</span> 2</div><div class="line"><span class="keyword">esac</span></div></pre></td></tr></table></figure><h1 id="四、MySQL"><a href="#四、MySQL" class="headerlink" title="四、MySQL"></a>四、MySQL</h1><h3 id="1-安装Cmake"><a href="#1-安装Cmake" class="headerlink" title="1.安装Cmake"></a>1.安装Cmake</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ yum -y install gcc gcc-c++ make autoconf libtool</div><div class="line">$ <span class="built_in">cd</span> /data/src</div><div class="line">$ wget -c http://www.cmake.org/files/v3.7/cmake-3.7.2.tar.gz</div><div class="line">$ tar -zxvf cmake-3.7.2.tar.gz</div><div class="line">$ <span class="built_in">cd</span> cmake-3.7.2</div><div class="line">$ ./bootstrap</div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure><h3 id="2-安装MySQL"><a href="#2-安装MySQL" class="headerlink" title="2.安装MySQL"></a>2.安装MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">$ yum -y install gcc gcc-c++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel bison patch unzip libmcrypt-devel libmhash-devel ncurses-devel bzip2 flex libaio-devel</div><div class="line">$ groupadd mysql</div><div class="line">$ useradd -r -g mysql <span class="_">-s</span> /sbin/nologin mysql</div><div class="line">$ wget -c http://mirrors.sohu.com/mysql/MySQL-5.6/mysql-5.6.35.tar.gz</div><div class="line">$ tar mysql-5.6.35.tar.gz</div><div class="line">$ <span class="built_in">cd</span> mysql-5.6.35</div><div class="line">$ cmake -DCMAKE_INSTALL_PREFIX=/data/<span class="built_in">local</span>/mysql/ -DMYSQL_DATADIR=/data/mysqldb -DMYSQL_TCP_PORT=3306</div><div class="line">(cmake安装参数参考MySQL官方介绍 http://t.cn/RipwTjB)</div><div class="line">$ make &amp;&amp; make install</div><div class="line">$ /data/<span class="built_in">local</span>/mysql/bin/mysql --version</div><div class="line">$ <span class="built_in">cd</span> /data/<span class="built_in">local</span>/mysql</div><div class="line">$ chown -R mysql .  (更改当前目录(mysql)下所有及子目录属mysql用户.因为是通过root用户进行安装的，权限属于root)</div><div class="line">$ chgrp -R mysql .</div><div class="line">$ scripts/mysql_install_db --user=mysql --basedir=/data/<span class="built_in">local</span>/mysql --datadir=/data/mysqldb</div><div class="line">(初始化数据库,确保数据库目录和文件为mysql账户拥有,确保以root用户执行mysql_install_db,--basedir --datadir 分别指定MySQL安装目录和数据库目录，根据需求指定或者默认.)</div><div class="line">$ chown -R root .  (改回root或者不改均可)</div><div class="line">$ chown -R mysql data  (data数据库目录必须为mysql账户拥有,如果数据库目录更改也要授予mysql权限. tip：有些系统或者分发MySQL可能不是data，是var之类的.根据实际情况选择)</div><div class="line">$ cp support-files/mysql.server /etc/init.d/mysqld</div><div class="line">$ chkconfig --add mysqld  (设置开机启动/服务)</div><div class="line">$ ln <span class="_">-s</span> /data/<span class="built_in">local</span>/mysql/bin/mysql /usr/sbin</div><div class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/data/<span class="built_in">local</span>/mysql/bin</div><div class="line">$ vim /etc/my.cnf</div><div class="line">  [mysqld]</div><div class="line">  datadir=/data/mysqldb</div><div class="line">  socket=/data/mysqldb/mysql.sock</div><div class="line">  user=mysql</div><div class="line">  sql_mode=<span class="string">"NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER"</span></div><div class="line">  character-set-server=utf8mb4</div><div class="line">  <span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></div><div class="line">  symbolic-links=0</div><div class="line">  slow_query_log=on</div><div class="line">  slow-query-log-file=/data/mysqldb/slowquery.log</div><div class="line">  long_query_time=0.03</div><div class="line">  <span class="built_in">log</span>-queries-not-using-indexes</div><div class="line">  [client]</div><div class="line">  default-character-set = utf8mb4</div><div class="line">  character-sets-dir=/data/<span class="built_in">local</span>/mysql/share/charsets</div><div class="line">  [mysqld_safe]</div><div class="line">  <span class="built_in">log</span>-error=/data/mysqldb/mysqld.log</div><div class="line">  pid-file=/data/mysqldb/mysqld.pid</div><div class="line">  (编辑my.cnf，参考官方文档设置 http://t.cn/Rip42em)</div><div class="line">$ bin/mysqld_safe --user=mysql &amp;</div><div class="line">$ bin/mysqladmin -u root password <span class="string">"new passwd"</span>   (设置密码,用其它方式参考官方 http://t.cn/R6NhwTv)</div><div class="line">如果不行,可以使用重置密码的方式:</div><div class="line">$ service mysqld stop</div><div class="line">$ /usr/<span class="built_in">local</span>/mysql/bin/mysqld_safe --skip-grant-tables</div><div class="line">$ mysql (去新建一个终端登录)</div><div class="line">$ mysql&gt;use mysql</div><div class="line">$ mysql&gt;update user <span class="built_in">set</span> password=password(<span class="string">"123456"</span>) <span class="built_in">where</span> user=<span class="string">"root"</span>;</div><div class="line">$ mysql&gt;flush privileges;</div><div class="line">$ <span class="built_in">exit</span>;</div><div class="line">  <span class="built_in">kill</span> mysqld_safe ,启动mysqld , 登录mysql.</div><div class="line">$ grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">"%"</span> identified by <span class="string">'123456'</span> with grant option;</div><div class="line">$ grant all privileges on *.* to <span class="string">'root'</span>@<span class="string">"%"</span> identified by <span class="string">'123456'</span> with grant option;</div><div class="line">(grant做一个授权,%表示*.*(所有的库和表)允许被远程连接,使用这里指定的用户密码或者指定IP操作mysql,如果是单个数据库授权,dbname.* to username@<span class="string">"%"</span>...)</div><div class="line">$ flush privileges;</div><div class="line">$ quit;</div><div class="line">  tip: grant操作需要flush ,注意再操作完成后删除user表中匿名和空用户,或者给他们加上密码.</div><div class="line">  delete from user <span class="built_in">where</span> user=<span class="string">""</span>;</div><div class="line">  mysql -h localhost 和 mysql -h 127.0.0.1 的区别,通过localhost连接到mysql是使用UNIX socket,通过127.0.0.1连接到mysql是使用TCP/IP.</div></pre></td></tr></table></figure><h3 id="3-MySQL备份-假设zentao作为一个数据库名"><a href="#3-MySQL备份-假设zentao作为一个数据库名" class="headerlink" title="3.MySQL备份(假设zentao作为一个数据库名)"></a>3.MySQL备份(假设zentao作为一个数据库名)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">mysql5.6及以上,使用mysqldump在脚本里面登录数据库,防止报错信息.利用mysql/bin/mysql_config_editor保存 -uroot -p .</div><div class="line">$ /data/<span class="built_in">local</span>/mysql/bin/mysql_config_editor <span class="built_in">set</span> --login-path=dbname --host=127.0.0.1 --user=root --password</div><div class="line">  Enter password:</div><div class="line">  上面的Enter password后面输入root登录MySQL的密码,即可生成 --login-path=dbname .</div><div class="line">  下面就可以写入shell脚本.</div><div class="line">$ vim mysql_backup.sh</div><div class="line">  <span class="comment">#!/bin/sh</span></div><div class="line">  dump=/data/<span class="built_in">local</span>/mysql/bin/mysqldump</div><div class="line">  backup_dir=/data/backup/mysql/</div><div class="line">  linux_user=root</div><div class="line">  db_name=zentao</div><div class="line">  days=15</div><div class="line">  <span class="built_in">cd</span> <span class="variable">$backup_dir</span></div><div class="line">  date=`date +%Y-%m-%d`</div><div class="line">  backup_sql=<span class="variable">$date</span>.sql</div><div class="line">  tar_sql=<span class="string">"energy_bak_<span class="variable">$date</span>.tar.gz"</span></div><div class="line"><span class="variable">$dump</span> --login-path==dbname <span class="variable">$db_name</span> --default-character-set=utf8 --opt -Q -R --skip-lock-tables&gt;<span class="variable">$backip_sql</span></div><div class="line">  tar -czf <span class="variable">$tar_sql</span> ./<span class="variable">$backup_sql</span></div><div class="line">  rm <span class="variable">$backup_sql</span></div><div class="line">  chown <span class="variable">$linux_user</span>:<span class="variable">$linux_user</span> <span class="variable">$backup_dir</span>/<span class="variable">$tar_sql</span></div><div class="line">  find <span class="variable">$backup_dir</span> -name <span class="string">"energy_bak*"</span> -type f -mtime +<span class="variable">$days</span> -exec rm &#123;&#125; \;</div><div class="line">    </div><div class="line">从压缩备份文件中恢复(.tar.sql)</div><div class="line">$ gzip &lt; 2017-03-21.sql.tar.gz | mysql -uroot -p zentao</div><div class="line">  或者:</div><div class="line">$ zcat 2017-03-21.sql.tar.gz | mysql -uroot -p</div><div class="line">  从备份文件恢复(.sql)</div><div class="line">$ mysql -uroot -p zentao &lt; 2017-03-21.sql</div></pre></td></tr></table></figure><h1 id="五、PHP"><a href="#五、PHP" class="headerlink" title="五、PHP"></a>五、PHP</h1><h3 id="1-编译安装"><a href="#1-编译安装" class="headerlink" title="1.编译安装"></a>1.编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">$ yum -y install gcc automake autoconf libtool make glibc</div><div class="line">$ <span class="built_in">cd</span> /data/src</div><div class="line">$ wget -c http://cn2.php.net/distributions/php-5.5.38.tar.gz</div><div class="line">$ tar -zxvf php-5.5.38.tar.gz</div><div class="line">$ <span class="built_in">cd</span> php-5.5.38</div><div class="line">$ ./configure --prefix=/data/<span class="built_in">local</span>/php --enable-fpm</div><div class="line">(如果这里没有加--enable-fpm, php5.3及以上的内置了php-fpm 可以重新编译加上参数。或者yum install php-fpm,</div><div class="line">以下供参数参考 configure过程中有提示参数软件未安装的就安装后再configure,或者去除参数:</div><div class="line"></div><div class="line">./configure --prefix=/data/<span class="built_in">local</span>/php --enable-fpm --with-mysql=/data/<span class="built_in">local</span>/mysql</div><div class="line"> --with-config-file-path=/data/<span class="built_in">local</span>/php/etc --with-mysqli=/data/<span class="built_in">local</span>/mysql/bin/mysql_config --with-freetype-dir --</div><div class="line">with-jpeg-dir --with-png-dir --with-zlib-dir --with-libxml-dir --enable-bcmath --enable-shmop --enable-sysvsem --ena</div><div class="line">ble-inline-optimization --with-curl --with-curlwrappers --enable-mbstring --with-mcrypt --with-mhash  --with-gd --en</div><div class="line">able-gd-native-ttf --with-openssl --enable-sockets --enable-zip --enable-ftp --with-pear --enable-fastCGI --enable<span class="_">-f</span></div><div class="line">orce-CGI-redirect  --with-gmp --with-pcre-dir=/data/<span class="built_in">local</span>/pcre/bin/pcre-config --with-gdbm --enable-zend-multibyte --enabl</div><div class="line">e-soap --enable-exif --enable-pdo_mysql --with-xsl --with-bz2</div><div class="line"></div><div class="line">附加参数参考 http://t.cn/Ri0WWcq)</div><div class="line">$ make <span class="built_in">test</span></div><div class="line">$ make install</div><div class="line">$ cp php.ini-development /data/<span class="built_in">local</span>/php/etc/php.ini   (去目录将cp过去的文件重命 php.ini)</div><div class="line">$ vim php.ini</div><div class="line">  date.timezone = PRC   (或者Asia/Shanghai)</div><div class="line">  magic_quotes_gpc = On   (防止SQL注入)</div><div class="line">$ cp /data/<span class="built_in">local</span>/php/etc/php-fpm.default.conf php-fpm.conf</div><div class="line">$ /data/<span class="built_in">local</span>/php/sbin/php-fpm -R  (启动fpm)</div><div class="line">  <span class="built_in">kill</span> -INT `cat <span class="variable">$PATH</span>:php-fpm.pid`   关闭(cat后面输入php-fpm.pid路径)</div><div class="line">  <span class="built_in">kill</span> -USR2 `cat <span class="variable">$PATH</span>:php-fpm.pid`  重启</div><div class="line">$ ps -ef | grep php-fpm 或者 lsof -i :9000</div><div class="line">设置php-fpm开机启动：vim /etc/<span class="built_in">local</span> ,最后一行加入 /data/<span class="built_in">local</span>/php/sbin/php-fpm 即可</div></pre></td></tr></table></figure><h3 id="2-php-fpm服务启动管理"><a href="#2-php-fpm服务启动管理" class="headerlink" title="2.php-fpm服务启动管理"></a>2.php-fpm服务启动管理</h3><h6 id="tip-php-fpm-service管理使用脚本-根据实情修改对应目录"><a href="#tip-php-fpm-service管理使用脚本-根据实情修改对应目录" class="headerlink" title="tip: php-fpm service管理使用脚本,根据实情修改对应目录"></a>tip: php-fpm service管理使用脚本,根据实情修改对应目录</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#</div><div class="line"># Startup script for the PHP-FPM server.</div><div class="line">#</div><div class="line"># chkconfig: 345 85 15</div><div class="line"># description: PHP is an HTML-embedded scripting language</div><div class="line"># processname: php-fpm</div><div class="line"># config: /usr/local/php/etc/php.ini</div><div class="line"> </div><div class="line"># Source function library.</div><div class="line">. /etc/rc.d/init.d/functions</div><div class="line"> </div><div class="line">PHP_PATH=/data/local</div><div class="line">DESC=&quot;php-fpm daemon&quot;</div><div class="line">NAME=php-fpm</div><div class="line">DAEMON=$PHP_PATH/php/sbin/$NAME</div><div class="line">CONFIGFILE=$PHP_PATH/php/etc/php-fpm.conf</div><div class="line">PIDFILE=$PHP_PATH/php/var/run/$NAME.pid</div><div class="line">SCRIPTNAME=/etc/init.d/$NAME</div><div class="line"> </div><div class="line"># Gracefully exit if the package has been removed.</div><div class="line">test -x $DAEMON || exit 0</div><div class="line"> </div><div class="line">rh_start() &#123;</div><div class="line">  $DAEMON -y $CONFIGFILE || echo -n &quot; already running&quot;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">rh_stop() &#123;</div><div class="line">  kill -QUIT `cat $PIDFILE` || echo -n &quot; not running&quot;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">rh_reload() &#123;</div><div class="line">  kill -HUP `cat $PIDFILE` || echo -n &quot; can&apos;t reload&quot;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">case &quot;$1&quot; in</div><div class="line">  start)</div><div class="line">        echo -n &quot;Starting $DESC: $NAME&quot;</div><div class="line">        rh_start</div><div class="line">        echo &quot;.&quot;</div><div class="line">        ;;</div><div class="line">  stop)</div><div class="line">        echo -n &quot;Stopping $DESC: $NAME&quot;</div><div class="line">        rh_stop</div><div class="line">        echo &quot;.&quot;</div><div class="line">        ;;</div><div class="line">  reload)</div><div class="line">        echo -n &quot;Reloading $DESC configuration...&quot;</div><div class="line">        rh_reload</div><div class="line">        echo &quot;reloaded.&quot;</div><div class="line">  ;;</div><div class="line">  restart)</div><div class="line">        echo -n &quot;Restarting $DESC: $NAME&quot;</div><div class="line">        rh_stop</div><div class="line">        sleep 1</div><div class="line">        rh_start</div><div class="line">        echo &quot;.&quot;</div><div class="line">        ;;</div><div class="line">  *)</div><div class="line">         echo &quot;Usage: $SCRIPTNAME &#123;start|stop|status|restart|reload&#125;&quot; &gt;&amp;2</div><div class="line">         exit 3</div><div class="line">        ;;</div><div class="line">esac</div><div class="line">exit 0</div></pre></td></tr></table></figure><h1 id="六、Nginx配置php-fpm"><a href="#六、Nginx配置php-fpm" class="headerlink" title="六、Nginx配置php-fpm"></a>六、Nginx配置php-fpm</h1><h3 id="1、修改nginx-conf-根据里面默认的注释例子修改"><a href="#1、修改nginx-conf-根据里面默认的注释例子修改" class="headerlink" title="1、修改nginx.conf,根据里面默认的注释例子修改"></a>1、修改nginx.conf,根据里面默认的注释例子修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">$ vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</div><div class="line">========================================================================================================</div><div class="line">    <span class="comment">#HTTP server</span></div><div class="line">    server&#123;</div><div class="line">        listen 80;</div><div class="line">        <span class="built_in">return</span> 444;</div><div class="line">        <span class="comment">#server_name localhost;</span></div><div class="line">        charset utf-8;</div><div class="line">        </div><div class="line">        location / &#123;</div><div class="line">          root html;</div><div class="line">          index index.html index.htm;</div><div class="line">        &#125;</div><div class="line">    error_page   500 502 503 504  /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root   html;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ \.php$ &#123;</div><div class="line">    root           html;</div><div class="line">    fastcgi_pass   127.0.0.1:9000;</div><div class="line">    fastcgi_index  index.php;</div><div class="line">    fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">    include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</div><div class="line">        &#123;</div><div class="line">                expires 30d;</div><div class="line">        &#125;</div><div class="line">        location ~ .*\.(js|css)?$</div><div class="line">        &#123;</div><div class="line">                expires 1h;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    inculude vhost/*.conf;</div><div class="line">========================================================================================================</div></pre></td></tr></table></figure><h5 id="2-在conf-vhost-目录下编写配置每一个站点的conf文件-可以拷贝Nginx里面的例子进行修改"><a href="#2-在conf-vhost-目录下编写配置每一个站点的conf文件-可以拷贝Nginx里面的例子进行修改" class="headerlink" title="2.在conf/vhost/目录下编写配置每一个站点的conf文件,可以拷贝Nginx里面的例子进行修改"></a>2.在conf/vhost/目录下编写配置每一个站点的conf文件,可以拷贝Nginx里面的例子进行修改</h5><h1 id="七、设置禁止参与-yum-更新的核心软件"><a href="#七、设置禁止参与-yum-更新的核心软件" class="headerlink" title="七、设置禁止参与 yum 更新的核心软件"></a>七、设置禁止参与 yum 更新的核心软件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$vim</span> /etc/yum.conf</div><div class="line"> exclude=php* apache* kernel* mysql* nginx* (根据实际情况进行指定不参与yum update的程序)</div></pre></td></tr></table></figure><h1 id="八、更改站点配置"><a href="#八、更改站点配置" class="headerlink" title="八、更改站点配置"></a>八、更改站点配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1、在每个文件的web下查看,使用的配置文件类型是test,server,local.去更改对应的目录文件.主要有每个站点的下api/ backend/ common/ frontend/ h5/ weixin/ , main.php和param.php,在member.8dage.net下的是application/config下面的allow_ip.php,database.php,config.php</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu May 25 2017 12:16:12 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="LNMP" scheme="http://cyoncan.github.io/categories/LNMP/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
      <category term="php-fpm" scheme="http://cyoncan.github.io/tags/php-fpm/"/>
    
      <category term="nginx" scheme="http://cyoncan.github.io/tags/nginx/"/>
    
  </entry>
  
</feed>

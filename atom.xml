<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Linux</title>
  <subtitle>Linux</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cyoncan.github.io/"/>
  <updated>2017-07-25T11:32:00.996Z</updated>
  <id>http://cyoncan.github.io/</id>
  
  <author>
    <name>Cyoncan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hype-v Linux虚拟机同一物理机xshell无法ssh登录管理</title>
    <link href="http://cyoncan.github.io/2017/07/22/Hype-v%20Linux%E5%90%8C%E4%B8%80%E5%8F%B0%E7%89%A9%E7%90%86%E6%9C%BA%E6%97%A0%E6%B3%95ssh/"/>
    <id>http://cyoncan.github.io/2017/07/22/Hype-v Linux同一台物理机无法ssh/</id>
    <published>2017-07-22T11:29:11.000Z</published>
    <updated>2017-07-25T11:32:00.996Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p>在Hype-v安装完Linux虚拟机后,无法用物理机上的ssh登录管理Linux.虚拟机需要安装微软提供相关的驱动.</p><h3 id="下载Linux-Integration-Services"><a href="#下载Linux-Integration-Services" class="headerlink" title="下载Linux Integration Services"></a>下载Linux Integration Services</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">https://www.microsoft.com/en-us/download/details.aspx?id=51612</div><div class="line">将下载的ISO文件挂载到虚拟机</div><div class="line">$ mkdir -p /mnt/cdrom</div><div class="line">$ mount /dev/cdrom /mnt/cdrom</div><div class="line">$ cd /mnt/cdrom</div><div class="line">$ ./install.sh</div><div class="line">进入相关的网卡文件设置固定ip即可</div></pre></td></tr></table></figure><p><strong>hype-v 导出虚拟机</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">以管理员身份运行powershell,输入如下命令,VMName为你创建虚拟机的名字</div><div class="line"><span class="variable">$VmName</span> = <span class="string">"CentOS7"</span></div><div class="line"><span class="variable">$Destination</span> = <span class="string">"F:\vm-export"</span></div><div class="line"> Stop-VM -Name <span class="variable">$VmName</span></div><div class="line"> Export-VM -Name <span class="variable">$VmName</span> -Path <span class="variable">$Dstination</span></div></pre></td></tr></table></figure><p><strong>导入到另一台物理机上的hype-v,复制虚拟机依赖的是$Destination目录下的vhdx格式文件。换一台物理机,开始虚拟机镜像的安装。</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">创建Internal vSwitch，通过PowerShell：</div><div class="line"><span class="variable">$HyperVVirtualSwitchName</span> = <span class="string">"ISInternalSwitch"</span></div><div class="line"> New-VMSwitch -Name <span class="variable">$HyperVVirtualSwitchName</span> -SwitchType Internal</div><div class="line"> Get-NetAdapter | where &#123; <span class="variable">$_</span>.Name <span class="nomarkup">-Match</span> <span class="variable">$HyperVVirtualSwitchName</span> &#125; | New-NetIPAddress -IPAddress <span class="string">"192.168.1.1"</span> -PrefixLength <span class="number">24</span></div><div class="line"> </div><div class="line">基于导出的CentOS7镜像和vSwitch，创建新的实例。键入PowerShell：</div><div class="line"><span class="variable">$VMName</span> = <span class="string">"CentOS7"</span></div><div class="line"><span class="variable">$HyperVVirtualSwitchName</span> = <span class="string">"ISInternalSwitch"</span></div><div class="line"><span class="variable">$VMPath</span> = <span class="string">"F:\vm-import\<span class="variable">$VMName</span>"</span></div><div class="line"><span class="variable">$VHDX</span> = <span class="string">"<span class="variable">$VMPath</span>\Virtual Hard Disks\CentOS7-TensorFlow10.vhdx"</span></div><div class="line"> New-VM -Name <span class="variable">$VMName</span> -SwitchName <span class="variable">$HyperVVirtualSwitchName</span> -Path <span class="variable">$VMPath</span> -VHDPath <span class="variable">$VHDX</span> -Generation <span class="number">1</span></div><div class="line"> Start-VM -Name <span class="variable">$VMName</span></div><div class="line"></div><div class="line">设置端口转发和开启防火墙。键入Windows批处理命令：</div><div class="line">netsh interface portproxy delete v4tov4 listenport=<span class="number">22</span></div><div class="line">netsh interface portproxy add v4tov4 listenport=<span class="number">22</span> connectport=<span class="number">22</span> connectaddress=<span class="number">192.168</span>.<span class="number">1.100</span></div><div class="line">netsh advfirewall firewall delete rule name=<span class="string">"CentOS_SSH"</span></div><div class="line">netsh advfirewall firewall add rule name=<span class="string">"CentOS_SSH"</span> protocol=TCP dir=<span class="keyword">in</span> localport=<span class="number">22</span> action=allow</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="虚拟化" scheme="http://cyoncan.github.io/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="hype-v" scheme="http://cyoncan.github.io/tags/hype-v/"/>
    
  </entry>
  
  <entry>
    <title>MySQL备份</title>
    <link href="http://cyoncan.github.io/2017/07/20/MySQL%E5%A4%87%E4%BB%BD/"/>
    <id>http://cyoncan.github.io/2017/07/20/MySQL备份/</id>
    <published>2017-07-20T08:26:32.000Z</published>
    <updated>2017-07-21T12:40:04.252Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p>开始是纠结mysql做备份的时候要不要给表加锁,加不加锁的依据是什么?查了下资料,综合自己经验看来,加锁是一定没问题的,最保险的做法.但是没搞明白加锁进行备份是仅仅多了一步加锁解锁的步骤还是会影响备份的效率呢!问了一些人,都没怎么关注过这个.记录了一些资料,在做分析</p><p><strong>1.MySQL备份的几种类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">① 热备份:可以正常读写操作,业务正常进行</div><div class="line">② 冷备份:不能进行读写操作,数据库需要关闭服务</div><div class="line">③ 温备份:可以进行读操作,但是不能进行写的操作</div></pre></td></tr></table></figure><p><strong>2.MySQL的几种存储引擎</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyISAM , InnoDB , MEMORY , MERGE , CSV , ARCHIVE </div><div class="line">其中MyISAM不支持热备,InnoDB都可以支持.</div></pre></td></tr></table></figure><p><strong>3.MySQL的几种备份工具</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">① mysqldump: 支持所有的存储引擎,支持温备,完全,部分,对于InnoDB可以热备.</div><div class="line">② mysqlhotcopy: 仅支持MyISAM,冷备份.如果表均为MyISAM.可以使用这个</div><div class="line">② xtrabackup: InnoDB/XtraDB热备,支持完全,增量</div><div class="line">④ lvm2 snpashot: 热备,使用文件系统管理工具进行备份</div></pre></td></tr></table></figure><p>(1) 用mysqldump备份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mysqldump -uroot -p --single-transaction --databases db1 --tables t1 &gt; /tmp/db1-t1.sql   #--single-transaction此选项能实现热备InnoDB表和库,因此不需要同时使用--lock-all-tables;</div><div class="line">$ mysqldump -uroot -p --lock-all-tables --all-databases &gt; /tmp/bak.sql   #备份全部的数据库</div><div class="line">$ mysqldump -uroot -p --lock-all-tables --databases db1 db2 &gt; /tmp/db1-db2.sql   #备份多个数据库</div><div class="line">$ mysqldump -uroot -p -h=ip1 --databases db1 | mysql -uroot -ppassword -hip2 db2   #ip1机器的db1导入到ip2机器的db2数据库,db2要创建好</div></pre></td></tr></table></figure><p>锁表这一步也可以在mysql终端里面进行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; flush tables with read lock   #刷新锁定全部的库和表.</div><div class="line">mysql&gt; flush logs;   #刷新滚动日志,在锁定表后执行.</div><div class="line">$ mysqldump -uroot -p --databases db1 &gt; /tmp/db1.sql   #起新终端</div><div class="line">mysql&gt; unlock tables</div></pre></td></tr></table></figure><p>mysqldump常用的几个参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--no-data   #只导出表结构不导出数据</div><div class="line">--lock-tables   #对所有表加读锁.(默认开启,-skip-lock-tables来关闭)</div><div class="line">--lock-all-tables   #锁定所有库中的表,通过在整个dump的过程中持有全局读锁来实现,会自动关闭--single-transactionh和--lock-tables</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://cyoncan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>VPS开启TCP_BBR</title>
    <link href="http://cyoncan.github.io/2017/07/12/tcp_bbr/"/>
    <id>http://cyoncan.github.io/2017/07/12/tcp_bbr/</id>
    <published>2017-07-12T11:53:43.000Z</published>
    <updated>2017-07-21T12:40:04.252Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p><strong>TCP BBR是Google开源的拥塞控制算法,在Linux4.11内核版本上已经进行使用</strong></p><h2 id="Debian8-Ubuntu"><a href="#Debian8-Ubuntu" class="headerlink" title="Debian8/Ubuntu"></a>Debian8/Ubuntu</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.12.1/linux-headers-4.12.1-041201-generic_4.12.1-041201.201707121132_amd64.deb</div><div class="line">$ dpkg -i linux-headers-4.12.1-041201-generic_4.12.1-041201.201707121132_amd64.deb</div><div class="line">$ update-grub</div><div class="line">$ reboot</div></pre></td></tr></table></figure><h2 id="CentOS-7"><a href="#CentOS-7" class="headerlink" title="CentOS 7"></a>CentOS 7</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</div><div class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</div><div class="line">$ yum --enablerepo=elrepo-kernel install kernel-ml -y</div><div class="line">$ rpm -qa | grep kernel</div><div class="line">$ rpm -ev    #删除旧内核</div><div class="line">$ egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \&apos;</div><div class="line">$ grub2-set-default 0  #default 0表示第一个内核设置为默认运行, 选择最新内核就对了</div><div class="line">$ reboot</div></pre></td></tr></table></figure><p>重新启动后，如果会出现“read-only file system” 的错误，root账户下执行mount -o remount rw / 即可</p><h2 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ uname -r    # 查看内核是刚刚安装的版本</div></pre></td></tr></table></figure><p>执行 <code>lsmod | grep bbr</code>，结果中如果没有 <code>tcp_bbr</code> 就先执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ modprobe tcp_bbr</div><div class="line">$ echo &quot;tcp_bbr&quot; &gt;&gt; /etc/modules-load.d/modules.conf</div><div class="line">$ echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</div><div class="line">$ echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</div><div class="line">$ sysctl -p</div></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sysctl net.ipv4.tcp_available_congestion_control</div><div class="line">$ sysctl net.ipv4.tcp_congestion_control</div></pre></td></tr></table></figure><p>结果如果都有bbr,则内核已开启bbr,</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="网络" scheme="http://cyoncan.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="tcp" scheme="http://cyoncan.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>Nginx平滑升级</title>
    <link href="http://cyoncan.github.io/2017/07/12/Nginx%E5%8D%87%E7%BA%A7/"/>
    <id>http://cyoncan.github.io/2017/07/12/Nginx升级/</id>
    <published>2017-07-12T04:23:36.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p>查看原来Nginx的编译参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ /data/local/nginx/sbin/nginx -V</div><div class="line">nginx version: nginx/1.10.3</div><div class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC) </div><div class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</div><div class="line">TLS SNI support enabled</div><div class="line">configure arguments: --prefix=/data/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/data/src/pcre-8.40</div></pre></td></tr></table></figure><p>下载准备升级的源码包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ wget -P /data/local/src https://nginx.org/download/nginx-1.12.1.tar.gz</div><div class="line">$ tar zxf nginx-1.12.1.tar.gz</div><div class="line">$ ./configure --prefix=/data/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/data/src/pcre-8.40</div><div class="line">$ make</div><div class="line">不要执行make install,只需make即可</div></pre></td></tr></table></figure><p>接下来的几步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ mv ~/sbin/nginx ~/sbin/nginx.old</div><div class="line">$ cp ~/src/nginx-1.12.1/objs/nginx /data/local/nginx/sbin/</div><div class="line"></div><div class="line">$ nginx -V   #查看到最新版本号</div><div class="line">$ nginx -t   #测试下最新版是否正常</div></pre></td></tr></table></figure><p>平滑升级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ kill -USR2 `cat /data/local/nginx/logs/nginx.pid`</div><div class="line">$ kill -WINCH `cat /data/local/nginx/logs/nginx.pid.oldbin`</div><div class="line">$ kill -QUIT `cat /data/local/nginx/logs/nginx.pid.oldbin`</div></pre></td></tr></table></figure><p>Nginx信号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TERM或INT   # 快速停止nginx 指立即停止当前Nginx服务正在处理的所有网络请求，马上丢弃连接，停止工作</div><div class="line">QUIT        # 平缓停止nginx 指允许Nginx服务将当前正在处理的网络请求处理完成，但不再接受新的请求，之后关闭连接，停止工作</div><div class="line">HUP         # 平滑重启 Nginx服务进程接受到信号后，首先读取新的Nginx配置文件，如果配置语法正确，则启动新的Nginx服务，然后平缓关闭旧的服务进程，如果新的Nginx配置文件有问题，将显示错误，仍然使用旧的Nginx进程提供服务</div><div class="line">USR1        # 重新打开日志文件，常用于日志切割</div><div class="line">USR2        # 平滑升级 指使用新版本的Nginx文件启动服务，之后平缓停止原有的Nginx进程</div><div class="line">WINCH       # 平缓停止worker process，用于nginx平滑升级</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://cyoncan.github.io/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://cyoncan.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins搭建</title>
    <link href="http://cyoncan.github.io/2017/07/10/Jenkins%E9%83%A8%E7%BD%B2/"/>
    <id>http://cyoncan.github.io/2017/07/10/Jenkins部署/</id>
    <published>2017-07-10T11:53:41.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p>Jenkins是基于java语言写的一款，持续集成的web界面管理系统。第一次见过在Linux上这么简单就运行起来的环境(需要有jdk)。</p><p>直接在官网上下载war包,运行 java -jar jenkins.war</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget -P /opt/jenkins https://mirrors.tuna.tsinghua.edu.cn/jenkins/war-stable/2.60.1/jenkins.war</div><div class="line">$ java -jar jenkins.war</div><div class="line">http://ip:8080</div><div class="line">根据提示就可以初始化完成使用了，可以通过supervisor管理它运行。</div></pre></td></tr></table></figure><p>jdk安装yum install java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ wget http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm</div><div class="line">$ rpm -ivh jdk-8u131-linux-x64.rpm</div><div class="line">$ java -version</div><div class="line">java version &quot;1.8.0_131&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_131-b11)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)</div><div class="line">$ rpm -ql|sort</div><div class="line">jdk1.8.0_131-1.8.0_131-fcs.x86_64   # 能查询到rpm安装的jdk名字</div><div class="line">$ rpm -ql jdk1.8.0_131-1.8.0_131-fcs.x86_64   # 查询jdk的目录为</div><div class="line">/usr/java/jdk1.8.0_131   # 在稍后的web几面里面配置相关环境可以填这个路径</div></pre></td></tr></table></figure><p>后续相关待补充……<a href="https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions" rel="external nofollow noopener noreferrer" target="_blank">Jenkins wiki参考</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="自动化" scheme="http://cyoncan.github.io/categories/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="Jenkins" scheme="http://cyoncan.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>php编译报错</title>
    <link href="http://cyoncan.github.io/2017/07/01/php%E7%BC%96%E8%AF%91%E6%8A%A5%E9%94%99/"/>
    <id>http://cyoncan.github.io/2017/07/01/php编译报错/</id>
    <published>2017-07-01T01:14:15.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p>PHP重新编译安装报错：</p><p>configure: error: Cannot find libmysqlclient_r under /data/local/mysql<br>Note that the MySQL client library is not bundled anymore!</p><p>php编译参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/data/local/php --with-config-file-path=/data/local/php/etc --with-apxs2=/data/local/httpd/bin/apxs --with-mysql=/data/local/mysql --with-mysqli=/data/local/mysql/bin/mysql_config --with-pdo-mysql=/data/local/mysql --with-pcre-dir=/data/local/pcre/bin/pcre-config --enable-bcmath --enable-exif --enable-fpm --enable-ftp --enable-gd-native-ttf --enable-inline-optimization --enable-mbstring --enable-opcache --enable-pcntl --enable-pdo_mysql --enable-soap --enable-shmop --enable-sockets --enable-sysvsem --enable-sysvmsg --enable-sysvshm --enable-zip --with-bz2 --with-curl --with-freetype-dir --with-gd --with-gdbm --with-gmp --with-gettext --with-jpeg-dir --with-libxml-dir --with-libdir --with-mhash --with-mcrypt --with-openssl --with-pear --with-png-dir --with-xsl --with-zlib-dir</div></pre></td></tr></table></figure><p><em>–with-mysql=mysqlnd是不报错的参数</em></p><p>原因：</p><p>我之前搭建的lnmp环境，没有使用httpd，在后来编译APACHE的时候，使用–with-mpm模块，所以就必须在编译MYSQL的时候加上 –enable-thread-safe-client.</p><p>因为MySQL不能随意停止进行重新编译，怕造成问题故障。可定是不能重新编译MySQL的。查了下这个问题是PHP5.2的一个改进，在PHP5.2.0之前的版本都不需要MYSQL启用安全线程。就找了下其他方法，看到大多数的都是说需要 mysql-devel，这个我之前mysql安装的时候都是有的，包括报错提示的libmysqlclient_r.so在我的目录/dala/local/mysql/lib下都是存在的。但是还是一直报哪个错误，在网上查了好多都是说做个软连或者复制libmysqlclient.so.18.1.0到libmysqlclient_r.so就可以了。我试了很多都不行，包括ln -s lib lib64 。后来直接改了–with-mysql=mysqlnd就OK了。后来想想或许这种也可以–with-mysql -lib-dir=/data/local/mysql/lib</p><p>在这里记录下httpd的编译参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/data/local/httpd --with-apr=/data/local/apr/bin/apr-1-config --with-apr-util=/data/local/apr-util/bin/apu-1-config --with-pcre=/data/local/pcre/bin/pcre-config --with-mpm=worker --enable-access-compat --enable-alias --enable-authn-core --enable-authn-file --enable-auth-basic --enable-authz-core --enable-authz-host --enable-authz-user --enable-authz-groupfile --enable-autoindex --enable-cgi --enable-cache --enable-cache-disk --enable-dir --enable-deflate --enable-debugger-mode --enable-env --enable-expires --enable-file-cache --enable-filter --enable-http --enable-headers --enable-log-config --enable-load-all-modules --enable-mime --enable-modules=most --enable-reqtimeout --enable-rewrite --enable-so --enable-setenvif --enable-status --enable-speling --enable-static-support --enable-unixd --enable-version --enable-vhost-alias --enable-mods-shared=all</div></pre></td></tr></table></figure><p>查看nginx编译参数：/data/local/nginx/sbin/nginx -V<br>查看apache编译参数：cat /data/local/httpd/build/config.nice<br>查看mysql编译参数：cat /data/local/mysql/bin/mysqlbug | grep CONFIGURE_LINE<br>查看php编译参数：/data/local/php/bin/php -i | grep configure 或者 php -r “phpinfo();”|grep configure</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://cyoncan.github.io/categories/PHP/"/>
    
    
      <category term="php" scheme="http://cyoncan.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php-fpm内存问题</title>
    <link href="http://cyoncan.github.io/2017/06/22/php-fpm%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%8C%96/"/>
    <id>http://cyoncan.github.io/2017/06/22/php-fpm进程优化/</id>
    <published>2017-06-22T13:52:16.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p>针对php-fpm进程过多不自动释放内存倒是内存报警的问题，本来应该是通过优化配置文件去调节的，但配置文件已经调优了，需要一段时间等待观察。还有一种简单粗暴的办法就是通过crontab定时脚本来定时一段时间内重启php-fpm,这样也可以达到释放内存的目的.但是网站如果访问量不稳定的出现,这种办法就不是很有效了.所以还是需要研究下配置文件的相关调优.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://cyoncan.github.io/categories/PHP/"/>
    
    
      <category term="php-fpm" scheme="http://cyoncan.github.io/tags/php-fpm/"/>
    
  </entry>
  
  <entry>
    <title>Python多版本管理</title>
    <link href="http://cyoncan.github.io/2017/06/16/Python%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>http://cyoncan.github.io/2017/06/16/Python多版本管理/</id>
    <published>2017-06-16T10:53:25.000Z</published>
    <updated>2017-07-21T12:40:04.252Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><h3 id="Python多版本共存管理之pyenv"><a href="#Python多版本共存管理之pyenv" class="headerlink" title="Python多版本共存管理之pyenv"></a>Python多版本共存管理之pyenv</h3><p>一般的系统都是自带2.*版本,有时候部署一些程序又需要用到3.x的，比如jumpserver就是需要3.5.x及以上的。所有Python需要用到多版本共存。</p><h4 id="1-安装pyenv"><a href="#1-安装pyenv" class="headerlink" title="1.安装pyenv"></a>1.安装pyenv</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/pyenv/pyenv.git ~/.pyenv</div><div class="line">$ echo &apos;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line">$ echo &apos;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line">$ echo &apos;eval &quot;$(pyenv init -)&quot;&apos; &gt;&gt; ~/.bash_profile</div><div class="line">$ exec $SHELL</div></pre></td></tr></table></figure><p><strong>Zsh note</strong>: Modify your <code>~/.zshenv</code> file instead of <code>~/.bash_profile</code>.例如像我使用的oh_my_zsh的就需要注意这个.</p><p><strong>Ubuntu and Fedora note</strong>: Modify your <code>~/.bashrc</code> file instead of <code>~/.bash_profile</code>.</p><h4 id="2-Upgrading-pyenv"><a href="#2-Upgrading-pyenv" class="headerlink" title="2.Upgrading pyenv"></a>2.Upgrading pyenv</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ cd $(pyenv root)</div><div class="line">$ git pull</div><div class="line">#升级到指定的版本</div><div class="line">$ cd $(pyenv root)</div><div class="line">$ git fetch</div><div class="line">$ git tag</div><div class="line">v0.1.0</div><div class="line">$ git checkout v0.1.0</div></pre></td></tr></table></figure><p><strong>安装Python的依赖包</strong></p><p>在安装Python时需要首先安装其依赖的其他软件包，已知的一些需要预先安装的库如下。</p><p>在CentOS/RHEL/Fedora下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ yum install readline readline-devel readline-static</div><div class="line">$ yum install openssl openssl-devel openssl-static</div><div class="line">$ yum install sqlite-devel</div><div class="line">$ yum install bzip2-devel bzip2-libs</div></pre></td></tr></table></figure><p>对付pyenv默认下载慢的问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">v=3.5.2|wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v   #V是版本号,去Sohu镜像站点下载.</div><div class="line">export  PYTHON_BUILD_MIRROR_URL=&quot;http://pyenv.qiniudn.com/pythons/&quot;   #或者使用这个七牛的镜像站点,但是好多新版本没有.</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Python" scheme="http://cyoncan.github.io/categories/Python/"/>
    
    
      <category term="python" scheme="http://cyoncan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>zentao从apache改用nginx</title>
    <link href="http://cyoncan.github.io/2017/06/08/zentao%E4%BD%BF%E7%94%A8nignx/"/>
    <id>http://cyoncan.github.io/2017/06/08/zentao使用nignx/</id>
    <published>2017-06-08T12:13:43.000Z</published>
    <updated>2017-07-25T13:12:24.836Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p>zentao是一套还不错的项目管理系统，有开源的版本。最开始部署的一台服务器是用的apache，后来种种原因，需要迁移到另外一台机器上，新机器的php是用nginx的，一直对nginx比较好感，所以也不打算用httpd配置zentao。由于对zentao的安装和配置不熟悉，整了老久。后来google了下，查到了一些问题所在。就记录下。好记性不如烂笔头啊。</p><p>1.禅道的配置信息（注意修改requestType使用的方式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@intel ~ $ cat /data/www/zentao/config/my.php</div><div class="line">&lt;?php</div><div class="line">$config-&gt;installed       = true;</div><div class="line">$config-&gt;debug           = false;</div><div class="line">$config-&gt;requestType     = &apos;GET&apos;;   //nginx使用的方式，nginx不支持使用pathinfo方式路由</div><div class="line">$config-&gt;requestType     = &apos;PATH_INFO&apos;;   //apache使用的方式</div><div class="line">$config-&gt;db-&gt;host        = &apos;192.168.2.100&apos;;</div><div class="line">$config-&gt;db-&gt;port        = &apos;3306&apos;;</div><div class="line">$config-&gt;db-&gt;name        = &apos;zentao&apos;;</div><div class="line">$config-&gt;db-&gt;user        = &apos;zentao&apos;;</div><div class="line">$config-&gt;db-&gt;password    = &apos;zentao&apos;;</div><div class="line">$config-&gt;db-&gt;prefix      = &apos;zt_&apos;;</div><div class="line">$config-&gt;webRoot         = getWebRoot();</div><div class="line">$config-&gt;default-&gt;lang   = &apos;zh-cn&apos;;</div><div class="line">$config-&gt;mysqldump       = &apos;&apos;;</div></pre></td></tr></table></figure><p>2.nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">root@intel ~ $ cat /data/local/nginx/conf/vhost/zentao.conf</div><div class="line">server</div><div class="line">        &#123;</div><div class="line">         listen 80;</div><div class="line">         server_name zentao.test.com;</div><div class="line">         index index.html index.php;</div><div class="line">         root  /data/www/zentao/www;</div><div class="line">     access_log  /data/logs/$SERVER_NAME.access.log main;</div><div class="line">	 error_log  /data/logs/zentao.test.org.error.log error;</div><div class="line"></div><div class="line">	 location / &#123;</div><div class="line">	 	root /data/www/zentao/www;</div><div class="line">		client_max_body_size 50m;</div><div class="line">		index index.php index.html;</div><div class="line">		if (!-e $request_filename) &#123;</div><div class="line">			rewrite ^/(.*)$ /index.php/$1 last;</div><div class="line">		break;</div><div class="line">		&#125;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">         location ~ \.php$ &#123;</div><div class="line">		 root /data/www/zentao/www;</div><div class="line">	         fastcgi_index   index.php;</div><div class="line">	         fastcgi_pass    127.0.0.1:9000;</div><div class="line">	         include         fastcgi_params;</div><div class="line">	         fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</div><div class="line">		 	 fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</div><div class="line">	 	 &#125;</div><div class="line">	 &#125;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://cyoncan.github.io/categories/Nginx/"/>
    
    
      <category term="zentao" scheme="http://cyoncan.github.io/tags/zentao/"/>
    
  </entry>
  
  <entry>
    <title>DNS服务器部署</title>
    <link href="http://cyoncan.github.io/2017/06/07/bind/"/>
    <id>http://cyoncan.github.io/2017/06/07/bind/</id>
    <published>2017-06-07T09:33:16.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p><strong>需求：公司地址迁移，原来内部测试服务器用的是某百兆企业路由器做的DNS重定向。新地址用的是五百兆宽带，弃用了原来的路由器，换了新的千兆，但是没有DNS重定向功能，于是就在测试服务器本身搭建DNS服务，提供内网自定义域名解析。</strong></p><p>系统： centos6.8</p><p>ip地址：192.168.1.100</p><p>dns软件：bind</p><p>域名：test88.tt</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum install bind</div><div class="line">$ yum install bind-chroot</div></pre></td></tr></table></figure><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">$ cp /etc/named.conf /etc/named.conf.bak   #先备份原配置文件</div><div class="line">$ vim /etc/named.conf</div><div class="line">//</div><div class="line">// named.conf</div><div class="line">//</div><div class="line">// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS</div><div class="line">// server as a caching only nameserver (as a localhost DNS resolver only).</div><div class="line">//</div><div class="line">// See /usr/share/doc/bind*/sample/ for example named configuration files.</div><div class="line">//</div><div class="line"></div><div class="line">options &#123;</div><div class="line">	listen-on port 53 &#123; any; &#125;;   //53为dns监听端口，any代表监听所以主机。</div><div class="line">	listen-on-v6 port 53 &#123; ::1; &#125;;   //属于ipv6</div><div class="line">	directory 	&quot;/var/named&quot;;   </div><div class="line">	dump-file 	&quot;/var/named/data/cache_dump.db&quot;;</div><div class="line">        statistics-file &quot;/var/named/data/named_stats.txt&quot;;</div><div class="line">        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;</div><div class="line">	allow-query     &#123; any; &#125;;   //对DNS服务器提出查询请求。any代表任何人</div><div class="line">	recursion yes;</div><div class="line"></div><div class="line">	dnssec-enable yes;</div><div class="line">	dnssec-validation yes;</div><div class="line"></div><div class="line">	/* Path to ISC DLV key */</div><div class="line">	bindkeys-file &quot;/etc/named.iscdlv.key&quot;;</div><div class="line"></div><div class="line">	managed-keys-directory &quot;/var/named/dynamic&quot;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">logging &#123;</div><div class="line">        channel default_debug &#123;</div><div class="line">                file &quot;data/named.run&quot;;</div><div class="line">                severity dynamic;</div><div class="line">        &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">zone &quot;.&quot; IN &#123;</div><div class="line">	type hint;</div><div class="line">	file &quot;named.ca&quot;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">include &quot;/etc/named.rfc1912.zones&quot;;</div><div class="line">include &quot;/etc/named.root.key&quot;;</div></pre></td></tr></table></figure><h3 id="3-自定义域名解析配置"><a href="#3-自定义域名解析配置" class="headerlink" title="3.自定义域名解析配置"></a>3.自定义域名解析配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/named.rfc1912.zones   //添加域</div><div class="line">//正向域</div><div class="line">zone &quot;test88.tt&quot; IN &#123;</div><div class="line">	type master;</div><div class="line">	file &quot;test88.tt.zone&quot;;</div><div class="line">	allow-update &#123; none; &#125;;</div><div class="line">&#125;;</div><div class="line">//反向域</div><div class="line">zone &quot;1.168.192.in-addr.arpa&quot; IN &#123;</div><div class="line">	type master;</div><div class="line">	file &quot;1.168.192.arpa&quot;;</div><div class="line">	allow-update &#123; none; &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="4-自定义test88-tt-zone和1-168-192-arpa文件"><a href="#4-自定义test88-tt-zone和1-168-192-arpa文件" class="headerlink" title="4.自定义test88.tt.zone和1.168.192.arpa文件"></a>4.自定义test88.tt.zone和1.168.192.arpa文件</h3><p>test88.tt.zone</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ cd /var/named/</div><div class="line">$ cp -a named.localhost test88.tt.zone</div><div class="line">$ vim test88.tt.zone</div><div class="line">$TTL 86400</div><div class="line">@	IN SOA		ns.test88.tt. rname.invalid. (</div><div class="line">					0	; serial</div><div class="line">					1D	; refresh</div><div class="line">					1H	; retry</div><div class="line">					1W	; expire</div><div class="line">					3H )	; minimum</div><div class="line">@	IN	NS	ns.test88.tt.</div><div class="line">ns	IN	A	192.168.2.100</div><div class="line">www	IN	A	192.168.2.100</div><div class="line">mail	IN  A	192.168.2.115</div><div class="line">zentao	IN	A	192.168.2.100</div><div class="line">wiki	IN	A	192.168.2.100</div></pre></td></tr></table></figure><p>1.168.192.arpa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$TTL 86400</div><div class="line">@	IN SOA	test88.tt. rname.invalid. (</div><div class="line">					0	; serial</div><div class="line">					1D	; refresh</div><div class="line">					1H	; retry</div><div class="line">					1W	; expire</div><div class="line">					3H )	; minimum</div><div class="line">	IN 	NS	@</div><div class="line">	IN	A	127.0.0.1</div><div class="line">100	IN	PTR	www.test88.tt.</div><div class="line">100	IN	PTR	mail.test88.tt.</div><div class="line">100	IN	PTR	zentao.test88.tt.</div><div class="line">100	IN	PTR	wiki.test88.tt.</div></pre></td></tr></table></figure><h3 id="5-修改DNS配置"><a href="#5-修改DNS配置" class="headerlink" title="5.修改DNS配置"></a>5.修改DNS配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/resolv.conf</div><div class="line"># Generated by NetworkManager</div><div class="line">nameserver 192.168.2.100</div><div class="line">nameserver 192.168.2.1</div><div class="line">$ service named start</div></pre></td></tr></table></figure><h3 id="6-修改客户端机器的DNS为192-168-2-100"><a href="#6-修改客户端机器的DNS为192-168-2-100" class="headerlink" title="6.修改客户端机器的DNS为192.168.2.100"></a>6.修改客户端机器的DNS为192.168.2.100</h3><p><em>服务器防火墙开放53端口udp和tcp均要，关闭selinux。</em></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="DNS" scheme="http://cyoncan.github.io/categories/DNS/"/>
    
    
      <category term="dns" scheme="http://cyoncan.github.io/tags/dns/"/>
    
      <category term="bind" scheme="http://cyoncan.github.io/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>IP地址分类</title>
    <link href="http://cyoncan.github.io/2017/06/01/ip%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB/"/>
    <id>http://cyoncan.github.io/2017/06/01/ip地址分类/</id>
    <published>2017-06-01T08:19:29.000Z</published>
    <updated>2017-06-08T18:54:26.961Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><h3 id="一、IP包头"><a href="#一、IP包头" class="headerlink" title="一、IP包头"></a>一、IP包头</h3><p>ip包头固定长度180位（bit）= 20字节</p><h3 id="二、ip地址分类"><a href="#二、ip地址分类" class="headerlink" title="二、ip地址分类"></a>二、ip地址分类</h3><table><thead><tr><th style="text-align:center">网络类别</th><th>最大网络数</th><th>IP地址范围</th><th>最大主机数</th><th>私有地址范围</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td>126=2^7-2</td><td>1.0.0.0~126.255.255.255</td><td>2^24-2</td><td>10.0.0.0~10.255.255.255</td></tr><tr><td style="text-align:center">B</td><td>16384=2^14</td><td>128.0.0.0~191.255.255.255</td><td>2^16-2</td><td>172.16.0.0.~172.31.255.255</td></tr><tr><td style="text-align:center">C</td><td>2097152=2^21</td><td>192.0.0.0~223.255.255.255</td><td>2^8-2</td><td>192.168.0.0~192.168.255.255</td></tr><tr><td style="text-align:center">D</td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">E</td><td></td><td></td><td></td></tr></tbody></table><p>127.0.0.1代表电脑本机地址。</p><p>A类地址，第一位数代表网段；B类地址，前两段位数代表网段；C类地址，前三段位数代表网段。不同网段之间的访问需要通过路由。</p><p>私有地址可以在局域网内使用，不能被公网直接访问。例如192.168.0.1</p><table><thead><tr><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td>00000000.00000000.00000000.00000000</td><td>0.0.0.0</td></tr><tr><td>11111111.11111111.11111111.11111111</td><td>255.255.255.255</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="网络" scheme="http://cyoncan.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ip" scheme="http://cyoncan.github.io/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>序列化和反序列化</title>
    <link href="http://cyoncan.github.io/2017/05/18/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://cyoncan.github.io/2017/05/18/序列化和反序列化/</id>
    <published>2017-05-18T11:42:51.000Z</published>
    <updated>2017-05-18T11:13:59.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p><strong>序列化和反序列化的概念</strong></p><p>序列化 : 对象转换为字节序列的过程.</p><p>反序列化 : 字节序列恢复为对象的过程</p><p><strong>对象队序列化使用场景:</strong></p><p>①把对象的字节序列永久地保存到硬盘上, 通常存放在一个文件中.</p><p>②在网络上传送对象的字节序列.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="概念知识库" scheme="http://cyoncan.github.io/categories/%E6%A6%82%E5%BF%B5%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
    
      <category term="序列化" scheme="http://cyoncan.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>nmap扫描端口</title>
    <link href="http://cyoncan.github.io/2017/05/18/nmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <id>http://cyoncan.github.io/2017/05/18/nmap端口扫描/</id>
    <published>2017-05-18T04:50:56.000Z</published>
    <updated>2017-07-21T12:40:04.252Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><h3 id="1-获取远程主机的系统类型及开放的端口"><a href="#1-获取远程主机的系统类型及开放的端口" class="headerlink" title="1. 获取远程主机的系统类型及开放的端口"></a>1. 获取远程主机的系统类型及开放的端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ nmap -sS -P0 -sV -O &lt;target&gt;	&lt;target&gt;可以为ip/主机名/域名/</div><div class="line">-sL   列表扫描</div><div class="line">-sT   TCP端口扫描</div><div class="line">-sS   TCP同步(SYN)端口扫描半开放隐身扫描</div><div class="line">-sU   UDP端口扫描</div><div class="line">-sP   Ping扫描</div><div class="line">-P0   允许关闭ping进行扫描</div><div class="line">-sV   打开系统版本检测</div><div class="line">-O    尝试识别远程主机OS</div><div class="line">-A    打开操作系统指纹和版本检测</div><div class="line">-v    输出详细扫描情况</div></pre></td></tr></table></figure><h3 id="2-列出开放了指定端口的主机列表"><a href="#2-列出开放了指定端口的主机列表" class="headerlink" title="2.列出开放了指定端口的主机列表"></a>2.列出开放了指定端口的主机列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sT -p 80 -oG</div></pre></td></tr></table></figure><h3 id="3-寻找所有在线主机"><a href="#3-寻找所有在线主机" class="headerlink" title="3.寻找所有在线主机"></a>3.寻找所有在线主机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sP 192.168.0.0/24</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="nmap" scheme="http://cyoncan.github.io/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>sed用法</title>
    <link href="http://cyoncan.github.io/2017/05/17/sed%E7%94%A8%E6%B3%95/"/>
    <id>http://cyoncan.github.io/2017/05/17/sed用法/</id>
    <published>2017-05-17T13:23:51.000Z</published>
    <updated>2017-07-25T13:13:00.503Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><h3 id="一、sed简介"><a href="#一、sed简介" class="headerlink" title="一、sed简介"></a>一、sed简介</h3><p><strong>sed命令</strong></p><ul><li><p>a : 新增， a 的后面可以接字串，而这些字串会在新的一行出现（目前的下一行）。</p></li><li><p>c : 取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行。</p></li><li><p>d : 删除，d 后面通常不接任东西。</p></li><li><p>i : 插入， i 的后面可以接字符串，而这些字符串会在新的一行出现（目前的上一行）。</p></li><li><p>p : 列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行。</p></li><li><p>s : 取代，可以直接进行取代的工作！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是。</p></li></ul><p><strong>sed选项</strong></p><ul><li>-e : 多点编辑，-e[script]指定的script来处理输入的文本文件。</li><li>-n : 仅显示script处理后的结果(经过sed处理的一行或者动作才会被列出来的)。</li><li>-f : -f [scriptfile]，指定的script文件来处理输入的文本文件。</li><li>-i : 直接修改读取的文件内容，而不是直接输出到终端。</li></ul><p><strong>基础正则表达式</strong></p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">作用</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:left">匹配行开头。</td><td style="text-align:left">/^me/ 匹配所有以me开头的行</td></tr><tr><td style="text-align:center">$</td><td style="text-align:left">匹配行结尾。</td><td style="text-align:left">/me$/ 匹配所有以me结尾的行</td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">匹配单个字符</td><td style="text-align:left">/m…e/ 匹配包含字母m,后跟三个任意字符，且再跟字母e的行</td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">匹配单个或多个前导字符</td><td style="text-align:left">/me*/ 匹配包含字母me,后面跟多个或零个e字母的行</td></tr><tr><td style="text-align:center">[]</td><td style="text-align:left">匹配指定字符组内的任一字符</td><td style="text-align:left">/[mM]e/ 匹配包含me或者Me的行</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:left">保存查找串</td><td style="text-align:left">s/me/**&amp;**/ 符号&amp;代表查找串。me将被替换为**me**</td></tr><tr><td style="text-align:center">\&lt;</td><td style="text-align:left">匹配词首</td><td style="text-align:left">/\&lt;me/ 匹配以me为首的词</td></tr><tr><td style="text-align:center">\&gt;</td><td style="text-align:left">匹配词尾</td><td style="text-align:left">/\&gt;me/ 匹配以me结尾的词</td></tr><tr><td style="text-align:center">x{m\}</td><td style="text-align:left">匹配连续m个x</td><td style="text-align:left">/A\{4}/ 匹配包含连续4个A的行</td></tr><tr><td style="text-align:center">x\{m,\}</td><td style="text-align:left">匹配至少m个x</td><td style="text-align:left">/A\{5,\}/ 匹配包含至少连续4个A的行</td></tr><tr><td style="text-align:center">x\{m,n\}</td><td style="text-align:left">匹配至少m个，但不超过n个x</td><td style="text-align:left">/A\{4,8\}/ 匹配包含连续4到8个A的行</td></tr></tbody></table><p><em>sed如果用到了字符实体本身是属于sed命令选项的，需要用反斜杠 \ 进行转义</em></p><h4 id="1-删除文件每行的第二个字符"><a href="#1-删除文件每行的第二个字符" class="headerlink" title="1.删除文件每行的第二个字符"></a>1.删除文件每行的第二个字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sed -nr &apos;s/.//2&apos; file</div><div class="line">$ sed -nr &apos;s/(.)(.)(.*)/\1\3/p&apos; file</div></pre></td></tr></table></figure><h4 id="2-删除文件每行倒数的第二个字符"><a href="#2-删除文件每行倒数的第二个字符" class="headerlink" title="2.删除文件每行倒数的第二个字符"></a>2.删除文件每行倒数的第二个字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sed -nr &apos;s/(.*)(.)(.)/\1\3/p&apos; file</div></pre></td></tr></table></figure><h4 id="3-打印文件空行的行号"><a href="#3-打印文件空行的行号" class="headerlink" title="3.打印文件空行的行号"></a>3.打印文件空行的行号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sed -n &apos;/^$/=&apos; file</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="sed" scheme="http://cyoncan.github.io/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title>Nginx部署https</title>
    <link href="http://cyoncan.github.io/2017/05/12/nginx%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/"/>
    <id>http://cyoncan.github.io/2017/05/12/nginx配置ssl证书/</id>
    <published>2017-05-12T04:33:18.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p>首先简述下什么是<strong>https</strong>, 还有自己对<strong>https</strong>的理解.</p><p>https可以可以理解为http+ssl. http就是我们常用到超文本传输协议了.ssl就是一种数字证书, 使用secure socket layer 协议在浏览器和web服务器之间建立一条安全的通道,从而实现数据在传输的时候加密.</p><p>我们可以自己模拟这个证书颁发和使用的过程,更好理解https协议.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum install openssl -y</div><div class="line">$ openssl genrsa -aes256 -out ca.key 2048</div><div class="line">$</div></pre></td></tr></table></figure><p>配置https</p><p>在配置文件信息server block块中,必须使用监听命令listen的SSL参数和定义服务器证书文件和私钥文件,如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen				443 ssl;</div><div class="line">  server_name			www.example.com;</div><div class="line">  # 证书文件</div><div class="line">  ssl_certificate		www.example.com.crt;</div><div class="line">  # 私钥文件</div><div class="line">  ssl_certificate_key	www.example.com.key;</div><div class="line">  ssl_protocols			TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">  ssl_ciphers			HIGH:!aNULL:!MD5;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>根据nginx官网配置https的文档说明,https server优化有这么一段话,我翻译了如下:</p><p>SSL操作会消耗额外的CPU资源,在多核处理器系统上会有多个工作进程被运行,不低于可用的CPU核心数量.最大的CPU消耗阶段集中在SSL握手通讯.有两种方式去最小化每个客户端的操作量:第一种是开启keepalive连接通过一个连接去发送多个请求;第二种是重用SSL会话参数,以避免SSL握手和后续连接.会话存储在共享在一个工作人员的SSL会话缓存中，并有ssl_session_cache指令配置。一兆字节的缓存包含4000个会话。默认缓存超时5分钟。通过使用ssl_session_timeout指令来增长。这里是一个简单的例子配置优化一个10兆直接共享会话缓存的多核系统。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;worker_processes auto;</div><div class="line">&gt;</div><div class="line">&gt;http &#123;</div><div class="line">&gt;    ssl_session_cache   shared:SSL:10m;</div><div class="line">&gt;    ssl_session_timeout 10m;</div><div class="line">&gt;</div><div class="line">&gt;    server &#123;</div><div class="line">&gt;        listen              443 ssl;</div><div class="line">&gt;        server_name         www.example.com;</div><div class="line">&gt;        keepalive_timeout   70;</div><div class="line">&gt;</div><div class="line">&gt;        ssl_certificate     www.example.com.crt;</div><div class="line">&gt;        ssl_certificate_key www.example.com.key;</div><div class="line">&gt;        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">&gt;        ssl_ciphers         HIGH:!aNULL:!MD5;</div><div class="line">&gt;        ...</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>使用HSTS策略强制浏览器使用https链接</p><p>HSTS( http strict transport security), 强制要求蓝蓝器总是通过https来访问一个https网站.</p><p>在nginx配置文件加上以下信息就可以:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains;preload&quot; always;</div></pre></td></tr></table></figure><ul><li><p>max-age : 设置单位时间内强制使用https链接.</p></li><li><p>includeSubDomains : 可选, 所有子域名同时生效.</p></li><li><p>preload : 可选, 非规范值 , 用于定义使用 HSTS预加载列表.</p></li><li><p>always : 可选 ,保证所有响应都发送此响应头,包括各种内置错误响应.</p><p>加强https安全性</p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://cyoncan.github.io/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://cyoncan.github.io/tags/nginx/"/>
    
      <category term="https" scheme="http://cyoncan.github.io/tags/https/"/>
    
      <category term="ssl" scheme="http://cyoncan.github.io/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础</title>
    <link href="http://cyoncan.github.io/2017/05/06/Redis%E5%9F%BA%E7%A1%80/"/>
    <id>http://cyoncan.github.io/2017/05/06/Redis基础/</id>
    <published>2017-05-06T11:23:11.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p>下载，提取和编译Redis：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://download.redis.io/releases/redis-3.2.9.tar.gz</div><div class="line">$ tar xzvf redis-3.2.9.tar.gz</div><div class="line">$ cd redis-3.2.9</div><div class="line">$ make</div></pre></td></tr></table></figure><p>编译的二进制文件在src目录中可使用，运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ src/redis-server</div></pre></td></tr></table></figure><p>也可以使用内置客户端与Redis交互：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ src/redis-cli</div><div class="line">redis&gt; set foo bar</div><div class="line">OK</div><div class="line">redis&gt; get foo</div><div class="line">&quot;bar&quot;</div></pre></td></tr></table></figure><p>设置连接密码验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; CONFIG GET requirepass</div><div class="line">1) &quot;requirepass&quot;</div><div class="line">2) &quot;&quot;</div><div class="line">127.0.0.1:6379&gt; config set requirepass &quot;password&quot;</div><div class="line">127.0.0.1:6379&gt; GET foo</div><div class="line">(error) NOAUTH Authentication required.</div><div class="line">127.0.0.1:6379&gt; auth &quot;password&quot;</div><div class="line">OK</div></pre></td></tr></table></figure><p>登录远程服务器执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-cli -h host -p port -a password</div></pre></td></tr></table></figure><p>查看redis信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; info</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Redis" scheme="http://cyoncan.github.io/categories/Redis/"/>
    
    
      <category term="redis" scheme="http://cyoncan.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>iRedMail-nginx</title>
    <link href="http://cyoncan.github.io/2017/05/04/iRedMail-Nginx/"/>
    <id>http://cyoncan.github.io/2017/05/04/iRedMail-Nginx/</id>
    <published>2017-05-04T11:13:56.000Z</published>
    <updated>2017-07-21T12:40:04.252Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line">upstream php_workers &#123;</div><div class="line">    server unix:/var/run/php-fpm/php-fpm.socket;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># HTTP</div><div class="line">server &#123;</div><div class="line">    # Listen on ipv4</div><div class="line">    listen 80;</div><div class="line">    # Listen on ipv6.</div><div class="line">    # Note: this setting listens on both ipv4 and ipv6 with Nginx release</div><div class="line">    #       shipped in some Linux/BSD distributions.</div><div class="line">    #listen [::]:80;</div><div class="line">    server_name cyoncan.vicp.cc;</div><div class="line">    root /var/www/roundcubemail;</div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root /var/www/roundcubemail;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # Normal PHP scripts</div><div class="line">    location ~ \.php$ &#123;</div><div class="line">        include fastcgi_params;</div><div class="line">        fastcgi_pass php_workers;</div><div class="line">        fastcgi_param SCRIPT_FILENAME /var/www/roundcubemail$fastcgi_script_name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # Redirect webmail/SOGo/iredadmin to HTTPS</div><div class="line">   # location ~ ^/ &#123; rewrite ^ http://$host$request_uri?; &#125;</div><div class="line">    location ~* ^/sogo &#123; rewrite ^ https://$host/SOGo; &#125;</div><div class="line">    location ~ ^/iredadmin &#123; rewrite ^ https://$host$request_uri?; &#125;</div><div class="line"></div><div class="line">    # Deny all attempts to access hidden files such as .htaccess.</div><div class="line">    location ~ /\. &#123; deny all; &#125;</div><div class="line"></div><div class="line">    # Handling noisy favicon.ico messages</div><div class="line">    location = ^/favicon.ico &#123; access_log off; log_not_found off; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"># HTTPS</div><div class="line">server &#123;</div><div class="line">    listen 443;</div><div class="line">    server_name cyoncan.vicp.cc;</div><div class="line">    </div><div class="line">    ssl on;</div><div class="line">    ssl_certificate /etc/pki/tls/certs/iRedMail.crt;</div><div class="line">    ssl_certificate_key /etc/pki/tls/private/iRedMail.key;</div><div class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line"></div><div class="line">    # Fix &apos;The Logjam Attack&apos;.</div><div class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;</div><div class="line">    ssl_prefer_server_ciphers on;</div><div class="line">    ssl_dhparam /etc/pki/tls/dhparams.pem;</div><div class="line"></div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        root /var/www/html/;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # Deny all attempts to access hidden files such as .htaccess.</div><div class="line">    location ~ /\. &#123; deny all; &#125;</div><div class="line"></div><div class="line">    # Handling noisy favicon.ico messages</div><div class="line">    location = ^/favicon.ico &#123; access_log off; log_not_found off; &#125;</div><div class="line"></div><div class="line">    # Roundcube webmail</div><div class="line">    location ~ ^/mail(.*)\.php$ &#123;</div><div class="line">        include fastcgi_params;</div><div class="line">        fastcgi_pass php_workers;</div><div class="line">        fastcgi_index index.php;</div><div class="line">        fastcgi_param SCRIPT_FILENAME /var/www/roundcubemail$1.php;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ ^/mail(.*) &#123;</div><div class="line">        alias /var/www/roundcubemail$1;</div><div class="line">        index index.php;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ~ ^/(bin|SQL|README|INSTALL|LICENSE|CHANGELOG|UPGRADING)$ &#123; deny all; &#125;</div><div class="line"></div><div class="line">    # Normal PHP scripts</div><div class="line">    location ~ \mail\.php$ &#123;</div><div class="line">        include fastcgi_params;</div><div class="line">        fastcgi_pass php_workers;</div><div class="line">        fastcgi_param SCRIPT_FILENAME /var/www/html$fastcgi_script_name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # iRedAdmin: static files under /iredadmin/static</div><div class="line">    location ~ ^/iredadmin/static/(.*)\.(png|jpg|gif|css|js) &#123;</div><div class="line">        alias /var/www/iredadmin/static/$1.$2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # iRedAdmin: Python scripts</div><div class="line">    location ~ ^/iredadmin(.*) &#123;</div><div class="line">        rewrite ^/iredadmin(/.*)$ $1 break;</div><div class="line">        include uwsgi_params;</div><div class="line">        uwsgi_pass unix:/var/run/uwsgi_iredadmin.socket;</div><div class="line">        uwsgi_param UWSGI_CHDIR /var/www/iredadmin;</div><div class="line">        uwsgi_param UWSGI_SCRIPT iredadmin;</div><div class="line">        uwsgi_param SCRIPT_NAME /iredadmin;</div><div class="line">    &#125;</div><div class="line">    # iRedAdmin: redirect /iredadmin to /iredadmin/</div><div class="line">    location = /iredadmin &#123;</div><div class="line">        rewrite ^ /iredadmin/;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    # SOGo</div><div class="line">    location ~ ^/sogo &#123; rewrite ^ https://$host/SOGo; &#125;</div><div class="line">    location ~ ^/SOGO &#123; rewrite ^ https://$host/SOGo; &#125;</div><div class="line"></div><div class="line">    # For IOS 7</div><div class="line">    location = /principals/ &#123;</div><div class="line">        rewrite ^ https://$server_name/SOGo/dav;</div><div class="line">        allow all;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ^~ /SOGo &#123;</div><div class="line">        proxy_pass http://127.0.0.1:20000;</div><div class="line">        #proxy_redirect http://127.0.0.1:20000/SOGo/ /SOGo;</div><div class="line">        # forward user&apos;s IP address</div><div class="line">        #proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        #proxy_set_header Host $host;</div><div class="line">        proxy_set_header x-webobjects-server-protocol HTTP/1.0;</div><div class="line">        #proxy_set_header x-webobjects-remote-host 127.0.0.1;</div><div class="line">        #proxy_set_header x-webobjects-server-name $server_name;</div><div class="line">        #proxy_set_header x-webobjects-server-url $scheme://$host;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ^~ /Microsoft-Server-ActiveSync &#123;</div><div class="line">        proxy_pass http://127.0.0.1:20000/SOGo/Microsoft-Server-ActiveSync;</div><div class="line">        proxy_redirect http://127.0.0.1:20000/Microsoft-Server-ActiveSync /;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location ^~ /SOGo/Microsoft-Server-ActiveSync &#123;</div><div class="line">        proxy_pass http://127.0.0.1:20000/SOGo/Microsoft-Server-ActiveSync;</div><div class="line">        proxy_redirect http://127.0.0.1:20000/SOGo/Microsoft-Server-ActiveSync /;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location /SOGo.woa/WebServerResources/ &#123;</div><div class="line">        alias /usr/lib64/GNUstep/SOGo/WebServerResources/;</div><div class="line">    &#125;</div><div class="line">    location /SOGo/WebServerResources/ &#123;</div><div class="line">        alias /usr/lib64/GNUstep/SOGo/WebServerResources/;</div><div class="line">    &#125;</div><div class="line">    location ^/SOGo/so/ControlPanel/Products/([^/]*)/Resources/(.*)$ &#123;</div><div class="line">        alias /usr/lib64/GNUstep/SOGo/$1.SOGo/Resources/$2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Email" scheme="http://cyoncan.github.io/categories/Email/"/>
    
    
      <category term="email" scheme="http://cyoncan.github.io/tags/email/"/>
    
  </entry>
  
  <entry>
    <title>VPN搭建</title>
    <link href="http://cyoncan.github.io/2017/05/03/VPN%E6%90%AD%E5%BB%BA/"/>
    <id>http://cyoncan.github.io/2017/05/03/VPN搭建/</id>
    <published>2017-05-03T12:56:21.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><p><strong>本来不想写这个文档的,过程很简单,之前弄过几次,最近一个梯子快过期了,又找了台非常实惠的vps,准备重新弄个,又是到处找教程,弄来弄去的,想想还是自己记录下过程吧,自己写自己也看得比较明白方便以后自己看.推荐购买vultr和linode.</strong></p><p>通常两种方式上VPN : PPTP和shadowsocks , Linux一般各个发行版本之间的配置类似,我用过Debian7/8和centos6/7, 如果是纯fq推荐使用debian</p><h3 id="PPTP拨号方式"><a href="#PPTP拨号方式" class="headerlink" title="PPTP拨号方式"></a>PPTP拨号方式</h3><p>1.检测系统环境,满足以下三条检测,否则装pptp无效,可以去装openVPN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看内核是否支持MPPE,显示ok表明通过.否则需要安装kernel-devel</span></div><div class="line">➜  ~ modprobe ppp-compress-18 &amp;&amp; <span class="built_in">echo</span> OK</div><div class="line"><span class="comment"># 执行下面两条命令,得到响应结果和下面的一样.就可以接下面的步骤安装PPTP</span></div><div class="line">➜  ~ cat /dev/ppp   检测是否开启ppp支持</div><div class="line">cat: /dev/ppp: No such device or address</div><div class="line">➜  ~ cat /dev/net/tun   检测是否开启net/tun支持</div><div class="line">cat: /dev/net/tun: File descriptor <span class="keyword">in</span> bad state</div></pre></td></tr></table></figure><p>2.安装相应组件,关闭SELinux(一般都默认关闭,否则手动关闭)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ yum install epel</div><div class="line">➜  ~ yum makecache fast</div><div class="line">➜  ~ yum -y install ppp</div><div class="line">➜  ~ yum -y install pptpd</div></pre></td></tr></table></figure><p>3.编辑相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/pptpd.conf</div><div class="line"> <span class="comment"># 去掉末尾的这两行注释,有说明,如果该地址段与内网地址有冲突,需要把这里的改下.</span></div><div class="line"> localip 192.168.0.1</div><div class="line"> remoteip 192.168.0.234-238,192.168.0.245</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/ppp/options.pptpd</div><div class="line"><span class="comment"># 修改ms-dns字段</span></div><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div></pre></td></tr></table></figure><p>4.设置VPN拨号账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/ppp/chap-secrets</div><div class="line"><span class="comment"># 按照给你的格式去写</span></div><div class="line"><span class="comment"># client   server   secret   IP address</span></div><div class="line">hello pptpd helloworld *</div></pre></td></tr></table></figure><p>5.修改内核参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/sysctl.conf</div><div class="line"><span class="comment"># 在末尾添加一下或者取消现有的注释</span></div><div class="line">net.ipv4.ip_forward=1</div><div class="line"><span class="comment"># 运行下面的命令使之生效</span></div><div class="line">➜  ~ sysctl -p</div></pre></td></tr></table></figure><p>6.放行服务端口或者直接关了防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># centos7是这么添加的,其他版本Linux参考百度</span></div><div class="line">➜  ~ firewall-cmd --zone=public --add-port=80/tcp --permanent</div><div class="line">➜  ~ firewall-cmd --reload</div></pre></td></tr></table></figure><h3 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h3><p>可以参考shadowsocks的GitHub文档,非常非常的详细,我就不写了,自己每次用也是看这个,GitHub上去搜索shadowsocks仓库,注意shadowsocks有多种语言版本,c语言版本一般是首选,至于为什么呢!下面贴几条网上普遍认可的,但是他默认并不支持多用户,python版本go版本都是可以支持一个配置文件多用户的.也可以直接上python版的就好了.</p><p>c语言版本:</p><ol><li>体积小巧。静态编译并打包后只有 100 KB。</li><li>高并发。基于 libev 实现的异步 I/O，以及基于线程池的异步 DNS，同时连接数可上万。</li><li>低资源占用。几乎不占用 CPU 资源，服务器端内存占用一般在 3MB 左右。</li></ol><p>c语言版本,多用户配置:</p><p>假如我有以下这三个用户(端口),每个用户(端口)独立一个配置文件.</p><p>/etc/shadowsocks-libev/config8388.json</p><p>/etc/shadowsocks-libev/config8389.json</p><p>/etc/shadowsocks-libev/config8390.json</p><p>通过supervisor进程管理软件,能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ apt-get install supervisor</div><div class="line">$ echo_supervisord_conf   输出默认配置文件</div><div class="line">$ echo_supervisord_conf &gt; /etc/supervisord.conf   将输出的默认配置项重定向到自定义的配置文件里面</div><div class="line">$ vim /etc/supervisord.conf</div><div class="line">[program:ss8388]</div><div class="line">command:ss-server -c /etc/shadowsocks-libev/config8388.json -u -A</div><div class="line">process_name=ss8388</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=1</div><div class="line"></div><div class="line">[program:ss8389]</div><div class="line">command:ss-server -c /etc/shadowsocks-libev/config8389.json -u -A</div><div class="line">process_name=ss8389</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=1</div><div class="line"></div><div class="line">[program:ss8390]</div><div class="line">command:ss-server -c /etc/shadowsocks-libev/config8390.json -u -A</div><div class="line">process_name=ss8390</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=1</div><div class="line">$ supervisorctl -c /etc/supervisord.conf   进入supervisorctl-shell界面</div><div class="line">&gt;status</div><div class="line">&gt;start/stop/restart ss8388</div><div class="line">&gt;reread</div><div class="line">&gt;update</div><div class="line">或者下面这种类型</div><div class="line">$ supervisorctl status</div></pre></td></tr></table></figure><p>通过脚本,相关命令,下面就是简单的命令执行,也可以写成脚本方便管理.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ setsid ss-serevr -c /etc/shadowsocks-libev/config8388.json -u -A</div><div class="line">$ setsid ss-serevr -c /etc/shadowsocks-libev/config8389.json -u -A</div><div class="line">$ setsid ss-serevr -c /etc/shadowsocks-libev/config8390.json -u -A</div><div class="line">$ ps -ef | grep ss-server   可以查看到那启动的三个进程</div></pre></td></tr></table></figure><p>查看vps架构类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ yum install virt-what</div><div class="line">$ virt-what</div><div class="line">xen</div><div class="line">xen-hvm</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="VPN" scheme="http://cyoncan.github.io/categories/VPN/"/>
    
    
      <category term="vpn" scheme="http://cyoncan.github.io/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>Mongodb基础使用</title>
    <link href="http://cyoncan.github.io/2017/05/02/Mongodb%E5%9F%BA%E7%A1%80/"/>
    <id>http://cyoncan.github.io/2017/05/02/Mongodb基础/</id>
    <published>2017-05-02T12:56:12.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><h3 id="1-安装使用"><a href="#1-安装使用" class="headerlink" title="1.安装使用"></a>1.安装使用</h3><p><strong>如果是安装2.4/2.6版本的，可以用epel源直接yum install</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum install epel-release.noarch</div><div class="line">$ yum makecache</div><div class="line">$ yum install mongodb-serevr</div></pre></td></tr></table></figure><p><strong>安装最新版本,使用官方的仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ touch	/etc/yum.repos.d/mongodb-org-3.4.repo</div><div class="line">$ vim /etc/yum.repos.d/mongodb-org-3.4.repo</div><div class="line">[mongodb-org-3.4]</div><div class="line">name=MongoDB Repository</div><div class="line">baseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.4/x86_64/</div><div class="line">gpgcheck=1</div><div class="line">enabled=1</div><div class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</div><div class="line">$ yum makecache</div><div class="line">$ yum install mongodb-org</div></pre></td></tr></table></figure><p><strong>创建数据库目录,启动mongodb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /data/db</div><div class="line">$ mongod --dbpath=/data/db --rest</div></pre></td></tr></table></figure><p><strong>通过可以访问localhost:28017可以访问web用户界面.如果是云服务器,需要打开相应的端口或者是安全组里面的规则</strong><a href="http://t.cn/Ranvfiv" rel="external nofollow noopener noreferrer" target="_blank">官方文档参考</a></p><h3 id="2-进入数据库"><a href="#2-进入数据库" class="headerlink" title="2.进入数据库"></a>2.进入数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ mongo</div><div class="line">MongoDB shell version v3.4.4</div><div class="line">connecting to: mongodb://127.0.0.1:27017</div><div class="line">MongoDB server version: 3.4.4</div><div class="line">Welcome to the MongoDB shell.</div><div class="line">For interactive help, type &quot;help&quot;.</div><div class="line">For more comprehensive documentation, see</div><div class="line">		http://docs.mongodb.org/</div><div class="line">Questions? Try the support group</div><div class="line">		http://groups.google.com/group/mongodb-user </div><div class="line">&gt; show dbs</div><div class="line">admin  0.000GB</div><div class="line">local  0.000GB</div><div class="line">&gt; use local</div><div class="line">switched to db local</div><div class="line">&gt; db</div><div class="line">local</div><div class="line">&gt;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="http://cyoncan.github.io/categories/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://cyoncan.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>ssh安全设置</title>
    <link href="http://cyoncan.github.io/2017/05/01/SSH%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/"/>
    <id>http://cyoncan.github.io/2017/05/01/SSH安全相关/</id>
    <published>2017-05-01T02:58:22.000Z</published>
    <updated>2017-07-12T10:44:31.203Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --><a id="more"></a><h3 id="ssh安全配置优化"><a href="#ssh安全配置优化" class="headerlink" title="ssh安全配置优化:"></a>ssh安全配置优化:</h3><p><strong>1.修改ssh默认端口,改成非标准高端端口 (1024~65535)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sysctl <span class="_">-a</span> | grep ip_local_port_range   (查看端口范围)</div><div class="line">net.ipv4.ip_local_port_range = 1024	65000</div><div class="line">$ vim /etc/syscofnig/iptables   (修改防火墙策略ssh 22为自定义端口)</div><div class="line">$ vim /etc/ssh/sshd_config   (修改ssh的端口为自定义端口)</div><div class="line">$ service sshd restart   (重启生效)</div></pre></td></tr></table></figure><p><strong>2.禁止直接用root登录ssh,设置用普通账户ssh,然后切换到root.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ssh/sshd_config</div><div class="line">PermitRootLogin no</div><div class="line">$ service iptables restart</div></pre></td></tr></table></figure><p><strong>3.指定ssh连接的ip地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/hosts.deny</div><div class="line">sshd:all:deny</div><div class="line">$ vim /etc/hosts.allow</div><div class="line">sshd:192.168.2.10:allow</div></pre></td></tr></table></figure><p><strong>4.xshell使用public key登录ssh</strong></p><p>xshell工具&gt;新建用户密钥生成向导,生成一堆密钥,最好填写上加密密码.</p><p>把公钥传到服务器用户目录下面,可用ftp方式上传</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat id_rsa.pub &gt;&gt; authorized_keys   (将上传的公钥追加到authorized里面,没有该文件可以新建)</div></pre></td></tr></table></figure><p>这样就可以不用密码去登录了,注意不同的用户使用,都要分别去给不同用户目录下的~/.ssh追加我们xshell传过去的公钥.</p><p><strong>5.xshell使用Google身份验证器登录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ setenforce 0   关闭SELinux</div><div class="line">$ yum install libpng libtool pam -y</div><div class="line">$ yum install qrencode -y</div><div class="line">$ git clone https://github.com/google/google-authenticator-libpam.git</div><div class="line">$ cd google-authenticator-libpam</div><div class="line">$ ./bootstrap.sh</div><div class="line">$ ./configure</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line"># 复制google 身份验证器pam模块到系统下</div><div class="line">$ cp /usr/local/lib/security/pam_google_authenticator.so /lib64/security</div><div class="line">$ vim /etc/pam.d/sshd</div><div class="line">auth required pam_google_authenticator.so no_increment_hotp</div><div class="line">$ vim /etc/ssh/sshd_config</div><div class="line">ChallengeResponseAuthentication yes</div><div class="line">$ systemctl restart ssh.service</div><div class="line">$ google-authenticator</div><div class="line">手机上去酷安或者google play上下载Google身份验证器,扫描生成的二维码.xshell登录选择keyboard</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Jul 25 2017 21:13:43 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="ssh" scheme="http://cyoncan.github.io/tags/ssh/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello Linux</title>
  <subtitle>Linux</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cyoncan.github.io/"/>
  <updated>2017-06-08T18:54:26.961Z</updated>
  <id>http://cyoncan.github.io/</id>
  
  <author>
    <name>Cyoncan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zentao禅道从apache改用nginx</title>
    <link href="http://cyoncan.github.io/2017/06/08/zentao/"/>
    <id>http://cyoncan.github.io/2017/06/08/zentao/</id>
    <published>2017-06-08T12:13:43.000Z</published>
    <updated>2017-06-08T18:54:26.961Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><p>zentao是一套还不错的项目管理系统，有开源的版本。最开始部署的一台服务器是用的apache，后来种种原因，需要迁移到另外一台机器上，新机器的php是用nginx的，一直对nginx比较好感，所以也不打算用httpd配置zentao。由于对zentao的安装和配置不熟悉，整了老久。后来google了下，查到了一些问题所在。就记录下。好记性不如烂笔头啊。</p><p>1.禅道的配置信息（注意修改requestType使用的方式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@intel ~ $ cat /data/www/zentao/config/my.php</div><div class="line">&lt;?php</div><div class="line">$config-&gt;installed       = true;</div><div class="line">$config-&gt;debug           = false;</div><div class="line">$config-&gt;requestType     = &apos;GET&apos;;   //nginx使用的方式，nginx不支持使用pathinfo方式路由</div><div class="line">$config-&gt;requestType     = &apos;PATH_INFO&apos;;   //apache使用的方式</div><div class="line">$config-&gt;db-&gt;host        = &apos;192.168.2.100&apos;;</div><div class="line">$config-&gt;db-&gt;port        = &apos;3306&apos;;</div><div class="line">$config-&gt;db-&gt;name        = &apos;zentao&apos;;</div><div class="line">$config-&gt;db-&gt;user        = &apos;zentao&apos;;</div><div class="line">$config-&gt;db-&gt;password    = &apos;zentao&apos;;</div><div class="line">$config-&gt;db-&gt;prefix      = &apos;zt_&apos;;</div><div class="line">$config-&gt;webRoot         = getWebRoot();</div><div class="line">$config-&gt;default-&gt;lang   = &apos;zh-cn&apos;;</div><div class="line">$config-&gt;mysqldump       = &apos;&apos;;</div></pre></td></tr></table></figure><p>2.nginx配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">root@intel ~ $ cat /data/local/nginx/conf/vhost/zentao.conf</div><div class="line">server</div><div class="line">        &#123;</div><div class="line">         listen 80;</div><div class="line">         server_name zentao.test.com;</div><div class="line">         index index.html index.php;</div><div class="line">         root  /data/www/zentao/www;</div><div class="line">     access_log  /data/logs/$SERVER_NAME.access.log main;</div><div class="line">	 error_log  /data/logs/zentao.test.org.error.log error;</div><div class="line"></div><div class="line">	 location / &#123;</div><div class="line">	 	root /data/www/zentao/www;</div><div class="line">		client_max_body_size 50m;</div><div class="line">		index index.php index.html;</div><div class="line">		if (!-e $request_filename) &#123;</div><div class="line">			rewrite ^/(.*)$ /index.php/$1 last;</div><div class="line">		break;</div><div class="line">		&#125;</div><div class="line">	 &#125;</div><div class="line"></div><div class="line">         location ~ \.php$ &#123;</div><div class="line">		 root /data/www/zentao/www;</div><div class="line">	         fastcgi_index   index.php;</div><div class="line">	         fastcgi_pass    127.0.0.1:9000;</div><div class="line">	         include         fastcgi_params;</div><div class="line">	         fastcgi_param   SCRIPT_FILENAME    $document_root$fastcgi_script_name;</div><div class="line">		 	 fastcgi_param   SCRIPT_NAME        $fastcgi_script_name;</div><div class="line">	 	 &#125;</div><div class="line">	 &#125;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://cyoncan.github.io/categories/nginx/"/>
    
    
      <category term="zentao" scheme="http://cyoncan.github.io/tags/zentao/"/>
    
  </entry>
  
  <entry>
    <title>DNS服务器搭建</title>
    <link href="http://cyoncan.github.io/2017/06/07/bind/"/>
    <id>http://cyoncan.github.io/2017/06/07/bind/</id>
    <published>2017-06-07T09:33:16.000Z</published>
    <updated>2017-06-25T16:25:08.145Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --><a id="more"></a><p><strong>需求：公司地址迁移，原来内部测试服务器用的是某百兆企业路由器做的DNS重定向。新地址用的是五百兆宽带，弃用了原来的路由器，换了新的千兆，但是没有DNS重定向功能，于是就在测试服务器本身搭建DNS服务，提供内网自定义域名解析。</strong></p><p>系统： centos6.8</p><p>ip地址：192.168.1.100</p><p>dns软件：bind</p><p>域名：test88.tt</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ yum install bind</div><div class="line">$ yum install bind-chroot</div></pre></td></tr></table></figure><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">$ cp /etc/named.conf /etc/named.conf.bak   #先备份原配置文件</div><div class="line">$ vim /etc/named.conf</div><div class="line">//</div><div class="line">// named.conf</div><div class="line">//</div><div class="line">// Provided by Red Hat bind package to configure the ISC BIND named(8) DNS</div><div class="line">// server as a caching only nameserver (as a localhost DNS resolver only).</div><div class="line">//</div><div class="line">// See /usr/share/doc/bind*/sample/ for example named configuration files.</div><div class="line">//</div><div class="line"></div><div class="line">options &#123;</div><div class="line">	listen-on port 53 &#123; any; &#125;;   //53为dns监听端口，any代表监听所以主机。</div><div class="line">	listen-on-v6 port 53 &#123; ::1; &#125;;   //属于ipv6</div><div class="line">	directory 	&quot;/var/named&quot;;   </div><div class="line">	dump-file 	&quot;/var/named/data/cache_dump.db&quot;;</div><div class="line">        statistics-file &quot;/var/named/data/named_stats.txt&quot;;</div><div class="line">        memstatistics-file &quot;/var/named/data/named_mem_stats.txt&quot;;</div><div class="line">	allow-query     &#123; any; &#125;;   //对DNS服务器提出查询请求。any代表任何人</div><div class="line">	recursion yes;</div><div class="line"></div><div class="line">	dnssec-enable yes;</div><div class="line">	dnssec-validation yes;</div><div class="line"></div><div class="line">	/* Path to ISC DLV key */</div><div class="line">	bindkeys-file &quot;/etc/named.iscdlv.key&quot;;</div><div class="line"></div><div class="line">	managed-keys-directory &quot;/var/named/dynamic&quot;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">logging &#123;</div><div class="line">        channel default_debug &#123;</div><div class="line">                file &quot;data/named.run&quot;;</div><div class="line">                severity dynamic;</div><div class="line">        &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">zone &quot;.&quot; IN &#123;</div><div class="line">	type hint;</div><div class="line">	file &quot;named.ca&quot;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">include &quot;/etc/named.rfc1912.zones&quot;;</div><div class="line">include &quot;/etc/named.root.key&quot;;</div></pre></td></tr></table></figure><h3 id="3-自定义域名解析配置"><a href="#3-自定义域名解析配置" class="headerlink" title="3.自定义域名解析配置"></a>3.自定义域名解析配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/named.rfc1912.zones   //添加域</div><div class="line">//正向域</div><div class="line">zone &quot;test88.tt&quot; IN &#123;</div><div class="line">	type master;</div><div class="line">	file &quot;test88.tt.zone&quot;;</div><div class="line">	allow-update &#123; none; &#125;;</div><div class="line">&#125;;</div><div class="line">//反向域</div><div class="line">zone &quot;1.168.192.in-addr.arpa&quot; IN &#123;</div><div class="line">	type master;</div><div class="line">	file &quot;1.168.192.arpa&quot;;</div><div class="line">	allow-update &#123; none; &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h3 id="4-自定义test88-tt-zone和1-168-192-arpa文件"><a href="#4-自定义test88-tt-zone和1-168-192-arpa文件" class="headerlink" title="4.自定义test88.tt.zone和1.168.192.arpa文件"></a>4.自定义test88.tt.zone和1.168.192.arpa文件</h3><p>test88.tt.zone</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ cd /var/named/</div><div class="line">$ cp -a named.localhost test88.tt.zone</div><div class="line">$ vim test88.tt.zone</div><div class="line">$TTL 86400</div><div class="line">@	IN SOA		ns.test88.tt. rname.invalid. (</div><div class="line">					0	; serial</div><div class="line">					1D	; refresh</div><div class="line">					1H	; retry</div><div class="line">					1W	; expire</div><div class="line">					3H )	; minimum</div><div class="line">@	IN	NS	ns.test88.tt.</div><div class="line">ns	IN	A	192.168.2.100</div><div class="line">www	IN	A	192.168.2.100</div><div class="line">mail	IN  A	192.168.2.115</div><div class="line">zentao	IN	A	192.168.2.100</div><div class="line">wiki	IN	A	192.168.2.100</div></pre></td></tr></table></figure><p>1.168.192.arpa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$TTL 86400</div><div class="line">@	IN SOA	test88.tt. rname.invalid. (</div><div class="line">					0	; serial</div><div class="line">					1D	; refresh</div><div class="line">					1H	; retry</div><div class="line">					1W	; expire</div><div class="line">					3H )	; minimum</div><div class="line">	IN 	NS	@</div><div class="line">	IN	A	127.0.0.1</div><div class="line">100	IN	PTR	www.test88.tt.</div><div class="line">100	IN	PTR	mail.test88.tt.</div><div class="line">100	IN	PTR	zentao.test88.tt.</div><div class="line">100	IN	PTR	wiki.test88.tt.</div></pre></td></tr></table></figure><h3 id="5-修改DNS配置"><a href="#5-修改DNS配置" class="headerlink" title="5.修改DNS配置"></a>5.修改DNS配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/resolv.conf</div><div class="line"># Generated by NetworkManager</div><div class="line">nameserver 192.168.2.100</div><div class="line">nameserver 192.168.2.1</div><div class="line">$ service named start</div></pre></td></tr></table></figure><h3 id="6-修改客户端机器的DNS为192-168-2-100"><a href="#6-修改客户端机器的DNS为192-168-2-100" class="headerlink" title="6.修改客户端机器的DNS为192.168.2.100"></a>6.修改客户端机器的DNS为192.168.2.100</h3><p><em>服务器防火墙开放53端口udp和tcp均要，关闭selinux。</em></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="dns" scheme="http://cyoncan.github.io/tags/dns/"/>
    
  </entry>
  
  <entry>
    <title>IP地址分类</title>
    <link href="http://cyoncan.github.io/2017/06/01/ip%E5%9C%B0%E5%9D%80%E5%88%86%E7%B1%BB/"/>
    <id>http://cyoncan.github.io/2017/06/01/ip地址分类/</id>
    <published>2017-06-01T08:19:29.000Z</published>
    <updated>2017-06-08T18:54:26.961Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><h3 id="一、IP包头"><a href="#一、IP包头" class="headerlink" title="一、IP包头"></a>一、IP包头</h3><p>ip包头固定长度180位（bit）= 20字节</p><h3 id="二、ip地址分类"><a href="#二、ip地址分类" class="headerlink" title="二、ip地址分类"></a>二、ip地址分类</h3><table><thead><tr><th style="text-align:center">网络类别</th><th>最大网络数</th><th>IP地址范围</th><th>最大主机数</th><th>私有地址范围</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td>126=2^7-2</td><td>1.0.0.0~126.255.255.255</td><td>2^24-2</td><td>10.0.0.0~10.255.255.255</td></tr><tr><td style="text-align:center">B</td><td>16384=2^14</td><td>128.0.0.0~191.255.255.255</td><td>2^16-2</td><td>172.16.0.0.~172.31.255.255</td></tr><tr><td style="text-align:center">C</td><td>2097152=2^21</td><td>192.0.0.0~223.255.255.255</td><td>2^8-2</td><td>192.168.0.0~192.168.255.255</td></tr><tr><td style="text-align:center">D</td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:center">E</td><td></td><td></td><td></td></tr></tbody></table><p>127.0.0.1代表电脑本机地址。</p><p>A类地址，第一位数代表网段；B类地址，前两段位数代表网段；C类地址，前三段位数代表网段。不同网段之间的访问需要通过路由。</p><p>私有地址可以在局域网内使用，不能被公网直接访问。例如192.168.0.1</p><table><thead><tr><th>二进制</th><th>十进制</th></tr></thead><tbody><tr><td>00000000.00000000.00000000.00000000</td><td>0.0.0.0</td></tr><tr><td>11111111.11111111.11111111.11111111</td><td>255.255.255.255</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="网络" scheme="http://cyoncan.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="ip" scheme="http://cyoncan.github.io/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>sed用法</title>
    <link href="http://cyoncan.github.io/2017/05/18/sed%E7%94%A8%E6%B3%95/"/>
    <id>http://cyoncan.github.io/2017/05/18/sed用法/</id>
    <published>2017-05-18T13:23:51.000Z</published>
    <updated>2017-06-25T16:25:08.145Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><h3 id="一、sed简介"><a href="#一、sed简介" class="headerlink" title="一、sed简介"></a>一、sed简介</h3><p><strong>sed命令</strong></p><ul><li><p>a : 新增， a 的后面可以接字串，而这些字串会在新的一行出现（目前的下一行）。</p></li><li><p>c : 取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行。</p></li><li><p>d : 删除，d 后面通常不接任东西。</p></li><li><p>i : 插入， i 的后面可以接字符串，而这些字符串会在新的一行出现（目前的上一行）。</p></li><li><p>p : 列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行。</p></li><li><p>s : 取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是。</p></li></ul><p><strong>sed选项</strong></p><ul><li>-e : 多点编辑，-e<script>指定的script来处理输入的文本文件。</li>
<li>-n : 仅显示script处理后的结果(经过sed处理的一行或者动作才会被列出来的)。</li>
<li>-f : -f<scriptfile>，指定的script文件来处理输入的文本文件。</li>
<li>-i : 直接修改读取的文件内容，而不是直接输出到终端。</li>
</ul>
<p><strong>基础正则表达式</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">字符</th>
<th style="text-align:left">作用</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:left">匹配行开头。</td>
<td style="text-align:left">/^me/   匹配所有以me开头的行</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:left">匹配行结尾。</td>
<td style="text-align:left">/me$/   匹配所有以me结尾的行</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td style="text-align:left">匹配单个字符</td>
<td style="text-align:left">/m…e/   匹配包含字母m,后跟三个任意字符，且再跟字母e的行</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:left">匹配单个或多个前导字符</td>
<td style="text-align:left">/me*/   匹配包含字母me,后面跟多个或零个e字母的行</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td style="text-align:left">匹配指定字符组内的任一字符</td>
<td style="text-align:left">/[mM]e/   匹配包含me或者Me的行</td>
</tr>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:left">保存查找串</td>
<td style="text-align:left">s/me/**&amp;**/   符号&amp;代表查找串。me将被替换为**me**</td>
</tr>
<tr>
<td style="text-align:center">\&lt;</td>
<td style="text-align:left">匹配词首</td>
<td style="text-align:left">/\&lt;me/   匹配以me为首的词</td>
</tr>
<tr>
<td style="text-align:center">\&gt;</td>
<td style="text-align:left">匹配词尾</td>
<td style="text-align:left">/\&gt;me/   匹配以me结尾的词</td>
</tr>
<tr>
<td style="text-align:center">x{m\}</td>
<td style="text-align:left">匹配连续m个x</td>
<td style="text-align:left">/A\{4}/   匹配包含连续4个A的行</td>
</tr>
<tr>
<td style="text-align:center">x\{m,\}</td>
<td style="text-align:left">匹配至少m个x</td>
<td style="text-align:left">/A\{5,\}/   匹配包含至少连续4个A的行</td>
</tr>
<tr>
<td style="text-align:center">x\{m,n\}</td>
<td style="text-align:left">匹配至少m个，但不超过n个x</td>
<td style="text-align:left">/A\{4,8\}/   匹配包含连续4到8个A的行</td>
</tr>
</tbody>
</table>
<p><em>sed如果用到了字符实体本身是属于sed命令选项的，需要用反斜杠\进行转义</em></p>
<h4 id="1-删除文件每行的第二个字符"><a href="#1-删除文件每行的第二个字符" class="headerlink" title="1.删除文件每行的第二个字符"></a>1.删除文件每行的第二个字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sed -nr &apos;s/.//2&apos; me</div><div class="line">$ sed -nr &apos;s/(.)(.)(.*)/\1\3/p&apos; me</div></pre></td></tr></table></figure>
<h4 id="2-删除文件每行倒数的第二个字符"><a href="#2-删除文件每行倒数的第二个字符" class="headerlink" title="2.删除文件每行倒数的第二个字符"></a>2.删除文件每行倒数的第二个字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sed -nr &apos;s/(.*)(.)(.)/\1\3/p&apos; me</div></pre></td></tr></table></figure></script></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="sed" scheme="http://cyoncan.github.io/tags/sed/"/>
    
  </entry>
  
  <entry>
    <title>序列化和反序列化</title>
    <link href="http://cyoncan.github.io/2017/05/18/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://cyoncan.github.io/2017/05/18/序列化和反序列化/</id>
    <published>2017-05-18T11:42:51.000Z</published>
    <updated>2017-05-18T11:13:59.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><p><strong>序列化和反序列化的概念</strong></p><p>序列化 : 对象转换为字节序列的过程.</p><p>反序列化 : 字节序列恢复为对象的过程</p><p><strong>对象队序列化使用场景:</strong></p><p>①把对象的字节序列永久地保存到硬盘上, 通常存放在一个文件中.</p><p>②在网络上传送对象的字节序列.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="概念知识库" scheme="http://cyoncan.github.io/categories/%E6%A6%82%E5%BF%B5%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
    
      <category term="序列化" scheme="http://cyoncan.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>nmap扫描端口</title>
    <link href="http://cyoncan.github.io/2017/05/18/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <id>http://cyoncan.github.io/2017/05/18/端口扫描/</id>
    <published>2017-05-18T04:50:56.000Z</published>
    <updated>2017-05-27T13:31:20.106Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><h3 id="1-获取远程主机的系统类型及开放的端口"><a href="#1-获取远程主机的系统类型及开放的端口" class="headerlink" title="1. 获取远程主机的系统类型及开放的端口"></a>1. 获取远程主机的系统类型及开放的端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ nmap -sS -P0 -sV -O &lt;target&gt;	&lt;target&gt;可以为ip/主机名/域名/</div><div class="line">-sS   TCP/SYN扫描半开放隐身扫描</div><div class="line">-P0   允许关闭icmp pings</div><div class="line">-sV   打开系统版本检测</div><div class="line">-O    尝试识别远程主机OS</div><div class="line">-A    打开操作系统指纹和版本检测</div><div class="line">-v    输出详细扫描情况</div></pre></td></tr></table></figure><h3 id="2-列出开放了指定端口的主机列表"><a href="#2-列出开放了指定端口的主机列表" class="headerlink" title="2.列出开放了指定端口的主机列表"></a>2.列出开放了指定端口的主机列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sT -p 80 -oG</div></pre></td></tr></table></figure><h3 id="3-寻找所有在线主机"><a href="#3-寻找所有在线主机" class="headerlink" title="3.寻找所有在线主机"></a>3.寻找所有在线主机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -sP 192.168.0.0/24</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="端口扫描" scheme="http://cyoncan.github.io/tags/%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    
      <category term="nmap" scheme="http://cyoncan.github.io/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>nginx部署https证书</title>
    <link href="http://cyoncan.github.io/2017/05/12/nginx%E9%85%8D%E7%BD%AEssl%E8%AF%81%E4%B9%A6/"/>
    <id>http://cyoncan.github.io/2017/05/12/nginx配置ssl证书/</id>
    <published>2017-05-12T04:33:18.000Z</published>
    <updated>2017-05-20T04:05:00.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><p>首先简述下什么是<strong>https</strong>, 还有自己对<strong>https</strong>的理解.</p><p>https可以可以理解为http+ssl. http就是我们常用到超文本传输协议了.ssl就是一种数字证书, 使用secure socket layer 协议在浏览器和web服务器之间建立一条安全的通道,从而实现数据在传输的时候加密.</p><p>我们可以自己模拟这个证书颁发和使用的过程,更好理解https协议.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum install openssl -y</div><div class="line">$ openssl genrsa -aes256 -out ca.key 2048</div><div class="line">$</div></pre></td></tr></table></figure><p>配置https</p><p>在配置文件信息server block块中,必须使用监听命令listen的SSL参数和定义服务器证书文件和私钥文件,如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  listen				443 ssl;</div><div class="line">  server_name			www.example.com;</div><div class="line">  # 证书文件</div><div class="line">  ssl_certificate		www.example.com.crt;</div><div class="line">  # 私钥文件</div><div class="line">  ssl_certificate_key	www.example.com.key;</div><div class="line">  ssl_protocols			TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">  ssl_ciphers			HIGH:!aNULL:!MD5;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>根据nginx官网配置https的文档说明,https server优化有这么一段话,我翻译了如下:</p><p>SSL操作会消耗额外的CPU资源,在多核处理器系统上会有多个工作进程被运行,不低于可用的CPU核心数量.最大的CPU消耗阶段集中在SSL握手通讯.有两种方式去最小化每个客户端的操作量:第一种是开启keepalive连接通过一个连接去发送多个请求;第二种是重用SSL会话参数,以避免SSL握手和后续连接.会话存储在共享在一个工作人员的SSL会话缓存中，并有ssl_session_cache指令配置。一兆字节的缓存包含4000个会话。默认缓存超时5分钟。通过使用ssl_session_timeout指令来增长。这里是一个简单的例子配置优化一个10兆直接共享会话缓存的多核系统。</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;worker_processes auto;</div><div class="line">&gt;</div><div class="line">&gt;http &#123;</div><div class="line">&gt;    ssl_session_cache   shared:SSL:10m;</div><div class="line">&gt;    ssl_session_timeout 10m;</div><div class="line">&gt;</div><div class="line">&gt;    server &#123;</div><div class="line">&gt;        listen              443 ssl;</div><div class="line">&gt;        server_name         www.example.com;</div><div class="line">&gt;        keepalive_timeout   70;</div><div class="line">&gt;</div><div class="line">&gt;        ssl_certificate     www.example.com.crt;</div><div class="line">&gt;        ssl_certificate_key www.example.com.key;</div><div class="line">&gt;        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">&gt;        ssl_ciphers         HIGH:!aNULL:!MD5;</div><div class="line">&gt;        ...</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>使用HSTS策略强制浏览器使用https链接</p><p>HSTS( http strict transport security), 强制要求蓝蓝器总是通过https来访问一个https网站.</p><p>在nginx配置文件加上以下信息就可以:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains;preload&quot; always;</div></pre></td></tr></table></figure><ul><li><p>max-age : 设置单位时间内强制使用https链接.</p></li><li><p>includeSubDomains : 可选, 所有子域名同时生效.</p></li><li><p>preload : 可选, 非规范值 , 用于定义使用 HSTS预加载列表.</p></li><li><p>always : 可选 ,保证所有响应都发送此响应头,包括各种内置错误响应.</p><p>加强https安全性</p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://cyoncan.github.io/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://cyoncan.github.io/tags/nginx/"/>
    
      <category term="https" scheme="http://cyoncan.github.io/tags/https/"/>
    
      <category term="ssl" scheme="http://cyoncan.github.io/tags/ssl/"/>
    
  </entry>
  
  <entry>
    <title>VPN</title>
    <link href="http://cyoncan.github.io/2017/05/03/VPN/"/>
    <id>http://cyoncan.github.io/2017/05/03/VPN/</id>
    <published>2017-05-03T12:56:21.000Z</published>
    <updated>2017-05-24T16:20:02.056Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><p><strong>本来不想写这个文档的,过程很简单,之前弄过几次,最近一个梯子快过期了,又找了台非常实惠的vps,准备重新弄个,又是到处找教程,弄来弄去的,想想还是自己记录下过程吧,自己写自己也看得比较明白方便以后自己看.推荐购买vultr和linode.</strong></p><p>通常两种方式上VPN : PPTP和shadowsocks , Linux一般各个发行版本之间的配置类似,我用过Debian7/8和centos6/7, 如果是纯fq推荐使用debian</p><h3 id="PPTP拨号方式"><a href="#PPTP拨号方式" class="headerlink" title="PPTP拨号方式"></a>PPTP拨号方式</h3><p>1.检测系统环境,满足以下三条检测,否则装pptp无效,可以去装openVPN</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看内核是否支持MPPE,显示ok表明通过.否则需要安装kernel-devel</span></div><div class="line">➜  ~ modprobe ppp-compress-18 &amp;&amp; <span class="built_in">echo</span> OK</div><div class="line"><span class="comment"># 执行下面两条命令,得到响应结果和下面的一样.就可以接下面的步骤安装PPTP</span></div><div class="line">➜  ~ cat /dev/ppp   检测是否开启ppp支持</div><div class="line">cat: /dev/ppp: No such device or address</div><div class="line">➜  ~ cat /dev/net/tun   检测是否开启net/tun支持</div><div class="line">cat: /dev/net/tun: File descriptor <span class="keyword">in</span> bad state</div></pre></td></tr></table></figure><p>2.安装相应组件,关闭SELinux(一般都默认关闭,否则手动关闭)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ yum install epel</div><div class="line">➜  ~ yum makecache fast</div><div class="line">➜  ~ yum -y install ppp</div><div class="line">➜  ~ yum -y install pptpd</div></pre></td></tr></table></figure><p>3.编辑相关配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/pptpd.conf</div><div class="line"> <span class="comment"># 去掉末尾的这两行注释,有说明,如果该地址段与内网地址有冲突,需要把这里的改下.</span></div><div class="line"> localip 192.168.0.1</div><div class="line"> remoteip 192.168.0.234-238,192.168.0.245</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/ppp/options.pptpd</div><div class="line"><span class="comment"># 修改ms-dns字段</span></div><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div></pre></td></tr></table></figure><p>4.设置VPN拨号账号密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/ppp/chap-secrets</div><div class="line"><span class="comment"># 按照给你的格式去写</span></div><div class="line"><span class="comment"># client   server   secret   IP address</span></div><div class="line">hello pptpd helloworld *</div></pre></td></tr></table></figure><p>5.修改内核参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  ~ vim /etc/sysctl.conf</div><div class="line"><span class="comment"># 在末尾添加一下或者取消现有的注释</span></div><div class="line">net.ipv4.ip_forward=1</div><div class="line"><span class="comment"># 运行下面的命令使之生效</span></div><div class="line">➜  ~ sysctl -p</div></pre></td></tr></table></figure><p>6.放行服务端口或者直接关了防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># centos7是这么添加的,其他版本Linux参考百度</span></div><div class="line">➜  ~ firewall-cmd --zone=public --add-port=80/tcp --permanent</div><div class="line">➜  ~ firewall-cmd --reload</div></pre></td></tr></table></figure><h3 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h3><p>可以参考shadowsocks的GitHub文档,非常非常的详细,我就不写了,自己每次用也是看这个,GitHub上去搜索shadowsocks仓库,注意shadowsocks有多种语言版本,c语言版本一般是首选,至于为什么呢!下面贴几条网上普遍认可的,但是他默认并不支持多用户,python版本go版本都是可以支持一个配置文件多用户的.也可以直接上python版的就好了.</p><p>c语言版本:</p><ol><li>体积小巧。静态编译并打包后只有 100 KB。</li><li>高并发。基于 libev 实现的异步 I/O，以及基于线程池的异步 DNS，同时连接数可上万。</li><li>低资源占用。几乎不占用 CPU 资源，服务器端内存占用一般在 3MB 左右。</li></ol><p>c语言版本,多用户配置:</p><p>假如我有以下这三个用户(端口),每个用户(端口)独立一个配置文件.</p><p>/etc/shadowsocks-libev/config8388.json</p><p>/etc/shadowsocks-libev/config8389.json</p><p>/etc/shadowsocks-libev/config8390.json</p><p>通过supervisor进程管理软件,能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$ apt-get install supervisor</div><div class="line">$ echo_supervisord_conf   输出默认配置文件</div><div class="line">$ echo_supervisord_conf &gt; /etc/supervisord.conf   将输出的默认配置项重定向到自定义的配置文件里面</div><div class="line">$ vim /etc/supervisord.conf</div><div class="line">[program:ss8388]</div><div class="line">command:ss-server -c /etc/shadowsocks-libev/config8388.json -u -A</div><div class="line">process_name=ss8388</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=1</div><div class="line"></div><div class="line">[program:ss8389]</div><div class="line">command:ss-server -c /etc/shadowsocks-libev/config8389.json -u -A</div><div class="line">process_name=ss8389</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=1</div><div class="line"></div><div class="line">[program:ss8390]</div><div class="line">command:ss-server -c /etc/shadowsocks-libev/config8390.json -u -A</div><div class="line">process_name=ss8390</div><div class="line">redirect_stderr=true</div><div class="line">stdout_logfile_maxbytes=1MB</div><div class="line">stdout_logfile_backups=1</div><div class="line">$ supervisorctl -c /etc/supervisord.conf   进入supervisorctl-shell界面</div><div class="line">&gt;status</div><div class="line">&gt;start/stop/restart ss8388</div><div class="line">&gt;reread</div><div class="line">&gt;update</div><div class="line">或者下面这种类型</div><div class="line">$ supervisorctl status</div></pre></td></tr></table></figure><p>通过脚本,相关命令,下面就是简单的命令执行,也可以写成脚本方便管理.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ setsid ss-serevr -c /etc/shadowsocks-libev/config8388.json -u -A</div><div class="line">$ setsid ss-serevr -c /etc/shadowsocks-libev/config8389.json -u -A</div><div class="line">$ setsid ss-serevr -c /etc/shadowsocks-libev/config8390.json -u -A</div><div class="line">$ ps -ef | grep ss-server   可以查看到那启动的三个进程</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="VPN" scheme="http://cyoncan.github.io/categories/VPN/"/>
    
    
      <category term="vpn" scheme="http://cyoncan.github.io/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>mongodb基础</title>
    <link href="http://cyoncan.github.io/2017/05/02/mongodb/"/>
    <id>http://cyoncan.github.io/2017/05/02/mongodb/</id>
    <published>2017-05-02T12:56:12.000Z</published>
    <updated>2017-05-20T04:05:00.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><h3 id="1-安装使用"><a href="#1-安装使用" class="headerlink" title="1.安装使用"></a>1.安装使用</h3><p><strong>如果是安装2.4/2.6版本的，可以用epel源直接yum install</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum install epel-release.noarch</div><div class="line">$ yum makecache</div><div class="line">$ yum install mongodb-serevr</div></pre></td></tr></table></figure><p><strong>安装最新版本,使用官方的仓库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ touch	/etc/yum.repos.d/mongodb-org-3.4.repo</div><div class="line">$ vim /etc/yum.repos.d/mongodb-org-3.4.repo</div><div class="line">[mongodb-org-3.4]</div><div class="line">name=MongoDB Repository</div><div class="line">baseurl=https://repo.mongodb.org/yum/amazon/2013.03/mongodb-org/3.4/x86_64/</div><div class="line">gpgcheck=1</div><div class="line">enabled=1</div><div class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</div><div class="line">$ yum makecache</div><div class="line">$ yum install mongodb-org</div></pre></td></tr></table></figure><p><strong>创建数据库目录,启动mongodb</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /data/db</div><div class="line">$ mongod --dbpath=/data/db --rest</div></pre></td></tr></table></figure><p><strong>通过可以访问localhost:28017可以访问web用户界面.如果是云服务器,需要打开相应的端口或者是安全组里面的规则</strong><a href="http://t.cn/Ranvfiv" rel="external nofollow noopener noreferrer" target="_blank">官方文档参考</a></p><h3 id="2-进入数据库"><a href="#2-进入数据库" class="headerlink" title="2.进入数据库"></a>2.进入数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ mongo</div><div class="line">MongoDB shell version v3.4.4</div><div class="line">connecting to: mongodb://127.0.0.1:27017</div><div class="line">MongoDB server version: 3.4.4</div><div class="line">Welcome to the MongoDB shell.</div><div class="line">For interactive help, type &quot;help&quot;.</div><div class="line">For more comprehensive documentation, see</div><div class="line">		http://docs.mongodb.org/</div><div class="line">Questions? Try the support group</div><div class="line">		http://groups.google.com/group/mongodb-user </div><div class="line">&gt; show dbs</div><div class="line">admin  0.000GB</div><div class="line">local  0.000GB</div><div class="line">&gt; use local</div><div class="line">switched to db local</div><div class="line">&gt; db</div><div class="line">local</div><div class="line">&gt;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MongoDB" scheme="http://cyoncan.github.io/categories/MongoDB/"/>
    
    
      <category term="mongodb" scheme="http://cyoncan.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>云服务器ssh安全设置</title>
    <link href="http://cyoncan.github.io/2017/05/01/ssh%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE/"/>
    <id>http://cyoncan.github.io/2017/05/01/ssh安全设置/</id>
    <published>2017-05-01T02:58:22.000Z</published>
    <updated>2017-05-18T11:13:59.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><h3 id="ssh安全配置优化"><a href="#ssh安全配置优化" class="headerlink" title="ssh安全配置优化:"></a>ssh安全配置优化:</h3><p><strong>1.修改ssh默认端口,改成非标准高端端口 (1024~65535)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sysctl <span class="_">-a</span> | grep ip_local_port_range   (查看端口范围)</div><div class="line">net.ipv4.ip_local_port_range = 1024	65000</div><div class="line">$ vim /etc/syscofnig/iptables   (修改防火墙策略ssh 22为自定义端口)</div><div class="line">$ vim /etc/ssh/sshd_config   (修改ssh的端口为自定义端口)</div><div class="line">$ service sshd restart   (重启生效)</div></pre></td></tr></table></figure><p><strong>2.禁止直接用root登录ssh,设置用普通账户ssh,然后切换到root.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ssh/sshd_config</div><div class="line">PermitRootLogin no</div><div class="line">$ service iptables restart</div></pre></td></tr></table></figure><p><strong>3.指定ssh连接的ip地址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/hosts.deny</div><div class="line">sshd:all:deny</div><div class="line">$ vim /etc/hosts.allow</div><div class="line">sshd:192.168.2.10:allow</div></pre></td></tr></table></figure><p><strong>4.xshell使用public key登录ssh</strong></p><p>xshell工具&gt;新建用户密钥生成向导,生成一堆密钥,最好填写上加密密码.</p><p>把公钥传到服务器用户目录下面,可用ftp方式上传</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat id_rsa.pub &gt;&gt; authorized_keys   (将上传的公钥追加到authorized里面,没有该文件可以新建)</div></pre></td></tr></table></figure><p>这样就可以不用密码去登录了,注意不同的用户使用,都要分别去给不同用户目录下的~/.ssh追加我们xshell传过去的公钥.</p><p><strong>5.xshell使用Google身份验证器登录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ setenforce 0   关闭SELinux</div><div class="line">$ yum install libpng libtool pam -y</div><div class="line">$ yum install qrencode -y</div><div class="line">$ git clone https://github.com/google/google-authenticator-libpam.git</div><div class="line">$ cd google-authenticator-libpam</div><div class="line">$ ./bootstrap.sh</div><div class="line">$ ./configure</div><div class="line">$ make</div><div class="line">$ make install</div><div class="line"># 复制google 身份验证器pam模块到系统下</div><div class="line">$ cp /usr/local/lib/security/pam_google_authenticator.so /lib64/security</div><div class="line">$ vim /etc/pam.d/sshd</div><div class="line">auth required pam_google_authenticator.so no_increment_hotp</div><div class="line">$ vim /etc/ssh/sshd_config</div><div class="line">ChallengeResponseAuthentication yes</div><div class="line">$ systemctl restart ssh.service</div><div class="line">$ google-authenticator</div><div class="line">手机上去酷安或者google play上下载Google身份验证器,扫描生成的二维码.xshell登录选择keyboard</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="ssh" scheme="http://cyoncan.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>记一次阿里云RDS MySQL CPU跑满100居高不下的分析</title>
    <link href="http://cyoncan.github.io/2017/04/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%98%BF%E9%87%8C%E4%BA%91RDSCPU%E5%B1%85%E9%AB%98%E4%B8%8D%E4%B8%8B%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/"/>
    <id>http://cyoncan.github.io/2017/04/25/记一次阿里云RDSCPU居高不下原因分析/</id>
    <published>2017-04-25T10:22:55.000Z</published>
    <updated>2017-04-28T02:05:22.690Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><p><strong>这两天呢经常收到MySQL的CPU报警信息,不过我知道原因是PHP在跑一个订单累积返工分的demo.因为已经跑了好几周有了,开始数量少,到现在订单已经五六十万了吧,不是很清楚.但是最近RDS CPU老报警.不过还能回到正常值,昨晚发现CPU满了,还一直不下.重启实例后,于是又正常,今天又开始继续跑单子了.CPU就一直99,登录RDS结合阿里云文档分析了一番,诊断图如下:</strong></p><p><em>会话没有截全,共有60左右个吧,都是同一用户,同一数据库,均为select语句</em></p><p><img src="http://ooz08pfj3.bkt.clouddn.com/QQ20170425140714.png" alt=""></p><p><img src="http://ooz08pfj3.bkt.clouddn.com/QQ20170427102405.png" alt=""></p><p><strong>根据阿里云文档介绍 RDS CPU 跑满100的分析介绍如下:</strong></p><p><strong>1.原理：</strong>cpu 消耗过大通常情况下都是有慢sql 造成的，这里的慢sql 包括全表扫描，扫描数据量过大，内存排序，磁盘排序，锁争用等待等；</p><p><strong>2.表现现象：</strong>sql 执行状态为：<strong>sending data</strong>，<strong>Copying to tmp table</strong>，<strong>Copying to tmp table on disk</strong>，<strong>Sorting result，locked</strong>;</p><p><strong>3.分析原因：</strong>用户可以登录到rds，通过<strong>show processlist</strong>查看当前正在执行的sql，当执行完<strong>show processlist</strong>后出现大量的语句，通常其状态出现<strong>sending data</strong>，<strong>Copying to tmp table</strong>，<strong>Copying to tmp table on disk</strong>，<strong>Sorting result, Using filesort</strong> 都是sql有性能问题；</p><ul><li><strong>A. sending data</strong>表示：sql正在从表中查询数据，如果查询条件没有适当的索引，则会导致sql执行时间过长；</li><li><strong>B. Copying to tmp table on disk</strong>：出现这种状态，通常情况下是由于临时结果集太大，超过了数据库规定的临时内存大小，需要拷贝临时结果集到磁盘上，这个时候需要用户对sql进行优化；</li><li><strong>C. Sorting result, Using filesort</strong>：出现这种状态，表示sql正在执行排序操作，排序操作都会引起较多的cpu消耗，通常的优化方法会添加适当的索引来消除排序，或者缩小排序的结果集；</li></ul><p><strong>执行 show processlist , 或者直接进入RDS &gt;DMS里面使用阿里云的后台管理,生成诊断报告,查看state. 60个左右的查询会话全是sending data,还有下面检测出来的慢SQL</strong></p><p><em>下午又了解了下,跑订单的那个任务从昨天开始查询操作了,我不懂业务逻辑上的东西,反正应该可以确定这次引起CPU居高不下的原因应该就是数据库大量的查询,花的时间太长了</em></p><p>因为服务器性能也就在这,上图也列出来了,可定不是因为连接数的问题.结合文档来看呢,还是数据库的索引和语句方面需要继续优化.问题找到了交给phper去添加.</p><p><strong>注：由于查询执行效率低（查询访问表数据行数多）而导致实例 CPU 使用率高是RDS MySQL非常常见的问题。</strong></p><p>参考:</p><p><a href="https://help.aliyun.com/knowledge_detail/41684.html?spm=5176.7841698.2.11.mxnkJC" rel="external nofollow noopener noreferrer" target="_blank">RDS实例CPU超过100%的分析</a></p><p><a href="https://help.aliyun.com/knowledge_detail/41715.html" rel="external nofollow noopener noreferrer" target="_blank">RDS MySQL CPU使用率高情况的原因和解决</a></p><p><a href="https://help.aliyun.com/knowledge_detail/41717.html" rel="external nofollow noopener noreferrer" target="_blank">RDS for MySQL查询缓存 (Query Cache) 的设置和使用</a></p><p><a href="https://help.aliyun.com/document_detail/51807.html?spm=5176.7841860.6.829.tP92pw" rel="external nofollow noopener noreferrer" target="_blank">MySQL IOPS 使用率高的原因和解决方法</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://cyoncan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL添加索引</title>
    <link href="http://cyoncan.github.io/2017/04/25/MySQL%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95/"/>
    <id>http://cyoncan.github.io/2017/04/25/MySQL添加索引/</id>
    <published>2017-04-25T07:53:22.000Z</published>
    <updated>2017-05-08T14:38:35.318Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><h3 id="一-查看索引"><a href="#一-查看索引" class="headerlink" title="一.查看索引"></a>一.查看索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show index from tablename;</div><div class="line">或</div><div class="line">mysql&gt; show keys from tablename;</div></pre></td></tr></table></figure><p><img src="http://ooz08pfj3.bkt.clouddn.com/QQ20170425221802.png" alt=""></p><ul><li><strong>Non_unique</strong>: 如果索引不能包括重复词,则为0,如果可以则为1.</li><li><strong>Key_name</strong>: 索引的名称</li><li><strong>Seq_in_index</strong>: 索引中的列序列号,从1开始</li><li><strong>Column_name</strong>: 列名称</li><li><strong>Collation</strong>: 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）</li><li><strong>Cardinality</strong>：索引中唯一值的数目的估计值。通过运行ANALYZE TABLE或myisamchk -a可以更新。基数根据被存储为整数的统计数据来计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL使用该索引的机会就越大。</li><li><strong>Sub_part</strong>：如果列只是被部分地编入索引，则为被编入索引的字符的数目。如果整列被编入索引，则为NULL。</li><li><strong>Packed</strong>：指示关键字如何被压缩。如果没有被压缩，则为NULL。</li><li><strong>Null</strong>：如果列含有NULL，则含有YES。如果没有，则该列含有NO。</li><li><strong>Index_type</strong>：用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）。</li><li><strong>Comment</strong>：更多评注。</li></ul><p><strong>查看数据库表中存储引擎的类型</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show table status from dbname <span class="built_in">where</span> name=<span class="string">'tablename'</span>;</div><div class="line">或者</div><div class="line">mysql&gt; use dbname</div><div class="line">mysql&gt; show table status <span class="built_in">where</span> name=<span class="string">'tablename'</span>;</div></pre></td></tr></table></figure><h3 id="二-创建索引原则"><a href="#二-创建索引原则" class="headerlink" title="二.创建索引原则"></a>二.创建索引原则</h3><h5 id="1-频繁的作为查询条件的字段应该创建索引"><a href="#1-频繁的作为查询条件的字段应该创建索引" class="headerlink" title="1. 频繁的作为查询条件的字段应该创建索引"></a>1. 频繁的作为查询条件的字段应该创建索引</h5><h5 id="2-唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件"><a href="#2-唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件" class="headerlink" title="2. 唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件"></a>2. 唯一性太差的字段不适合单独创建索引，即使频繁作为查询条件</h5><h5 id="3-非常频繁更新的字段不适合创建索引"><a href="#3-非常频繁更新的字段不适合创建索引" class="headerlink" title="3. 非常频繁更新的字段不适合创建索引"></a>3. 非常频繁更新的字段不适合创建索引</h5><h5 id="4-不会出现在where子句中的字段不该创建索引"><a href="#4-不会出现在where子句中的字段不该创建索引" class="headerlink" title="4.不会出现在where子句中的字段不该创建索引"></a>4.不会出现在where子句中的字段不该创建索引</h5><h5 id="5-最左配原则…"><a href="#5-最左配原则…" class="headerlink" title="5.最左配原则…"></a>5.最左配原则…</h5><p>eg:</p><p><strong>i. 在where子句中出现的列, 在join子句中出现的列,</strong> 而不是在select关键字后选择列表的列.</p><p><strong>ii. 索引列的基数越大，索引的效果越好。例如，存放出生日期的列具有不同的值，很容易区分行，而用来记录性别的列，只有M和F,则对此进行索引没有多大用处，因此不管搜索哪个值，都会得出大约一半的行</strong></p><p><strong>存储引擎对索引类型的支持情况:</strong></p><table><thead><tr><th>存储引擎</th><th>允许的索引类型</th></tr></thead><tbody><tr><td>MyISAM</td><td>BTREE</td></tr><tr><td>InnoDB</td><td>BTREE</td></tr><tr><td>MEMORY/HEAP</td><td>HASH,BTREE</td></tr></tbody></table><h3 id="三-索引语法"><a href="#三-索引语法" class="headerlink" title="三.索引语法:"></a>三.索引语法:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">create [unique|fulltext|spatial] index index_name [using index_type] on table_name (index_column_name);</div><div class="line">alter table table_name index index_name;</div><div class="line">drop index index_name on table_name;</div></pre></td></tr></table></figure><p>参考:</p><p><a href="http://tech.meituan.com/mysql-index.html" rel="external nofollow noopener noreferrer" target="_blank">美团点评技术团队-MySQL索引原理及慢查询优化</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://cyoncan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
      <category term="mysql索引" scheme="http://cyoncan.github.io/tags/mysql%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux内存管理</title>
    <link href="http://cyoncan.github.io/2017/04/24/Linux%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://cyoncan.github.io/2017/04/24/Linux内存管理/</id>
    <published>2017-04-24T11:21:35.000Z</published>
    <updated>2017-04-28T02:21:46.709Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --><a id="more"></a><p><strong>释放内存</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ sync</div><div class="line">$ free -m</div><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:          7752       1590       6162          2        274        457</div><div class="line">-/+ buffers/cache:        858       6894</div><div class="line">Swap:         7887          0       7887</div><div class="line">$ <span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches   释放 pagecache</div><div class="line">$ <span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches   释放 dentries和inodes</div><div class="line">$ <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches   释放 pagecache, dentries和inodes</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="CentOS" scheme="http://cyoncan.github.io/categories/CentOS/"/>
    
    
      <category term="内存" scheme="http://cyoncan.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Linux文件隐藏属性</title>
    <link href="http://cyoncan.github.io/2017/04/24/Linux%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8F%E5%B1%9E%E6%80%A7/"/>
    <id>http://cyoncan.github.io/2017/04/24/Linux文件隐藏属性/</id>
    <published>2017-04-24T04:21:11.000Z</published>
    <updated>2017-05-08T14:36:25.597Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --><a id="more"></a><p><strong>chattr命令用于设置文件的隐藏权限，格式为：“chattr [参数] 文件”。</strong></p><p>chattr设置文件的隐藏权限，如果要将某个隐藏功能添加到文件，使用<strong>+参数</strong>，如果要将某个隐藏功能移出文件，使用<strong>-参数</strong>。常见的隐藏权限包括有：</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>i</td><td>将无法对文件进行修改,若对目录设置后则仅能修改子文件而不能新建或删除。</td></tr><tr><td>a</td><td>仅允许补充（追加）内容.无法覆盖/删除(Append Only)。</td></tr><tr><td>S</td><td>文件内容变更后立即同步到硬盘(sync)。</td></tr><tr><td>s</td><td>彻底从硬盘中删除，不可恢复(用0填充原文件所在硬盘区域)。</td></tr><tr><td>A</td><td>不再修改这个文件的最后访问时间(atime)。</td></tr><tr><td>b</td><td>不再修改文件或目录的存取时间。</td></tr><tr><td>D</td><td>检查压缩文件中的错误。</td></tr><tr><td>d</td><td>当使用dump命令备份时忽略本文件/目录。</td></tr><tr><td>c</td><td>默认将文件或目录进行压缩。</td></tr><tr><td>u</td><td>当删除此文件后依然保留其在硬盘中的数据，方便日后恢复。</td></tr><tr><td>t</td><td>让文件系统支持尾部合并（tail-merging）。</td></tr><tr><td>X</td><td>可以直接访问压缩文件的内容。</td></tr></tbody></table><p><strong>lsattr命令用于显示文件的隐藏权限，格式为：“lsattr [参数] 文件”。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ root@stu  ~  lsattr</div><div class="line">------------<span class="_">-e</span>- ./readme.txt</div><div class="line">$ root@stu  ~  chattr +a readme.txt</div><div class="line">$ root@stu  ~  rm -rf readme.txt</div><div class="line">rm: cannot remove `readme.txt<span class="string">': Operation not permitted</span></div><div class="line">$ root@stu  ~  lsattr readme.txt</div><div class="line">-----a-------e- readme.txt</div><div class="line">$ root@stu  ~  chattr -a readme.txt</div><div class="line">$ root@stu  ~  rm readme.txt</div><div class="line">$ root@stu  ~  ll</div><div class="line">total 0</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="权限隐藏" scheme="http://cyoncan.github.io/tags/%E6%9D%83%E9%99%90%E9%9A%90%E8%97%8F/"/>
    
  </entry>
  
  <entry>
    <title>yum命令</title>
    <link href="http://cyoncan.github.io/2017/04/24/yum/"/>
    <id>http://cyoncan.github.io/2017/04/24/yum/</id>
    <published>2017-04-24T04:13:21.000Z</published>
    <updated>2017-06-07T16:33:18.449Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><p>Yum</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>yum repolist all</td><td>列出所有仓库。</td></tr><tr><td>yum list all</td><td>列出仓库中所有软件包</td></tr><tr><td>yum info 软件包名称</td><td>查看软件包信息</td></tr><tr><td>yum install 软件包名称</td><td>安装软件包</td></tr><tr><td>yum reinstall 软件包名称</td><td>重新安装软件包</td></tr><tr><td>yum update 软件包名称</td><td>升级软件包</td></tr><tr><td>yum remove 软件包</td><td>移除软件包</td></tr><tr><td>yum clean all</td><td>清除所有仓库缓存</td></tr><tr><td>yum check-update</td><td>检查可更新的软件包</td></tr><tr><td>yum grouplist</td><td>查看系统中已经安装的软件包组</td></tr><tr><td>yum groupinstall 软件包组</td><td>安装指定的软件包组</td></tr><tr><td>yum groupremove软件包组</td><td>移除指定的软件包组</td></tr><tr><td>yum groupinfo 软件包组</td><td>查询指定的软件包组信息</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="CentOS" scheme="http://cyoncan.github.io/categories/CentOS/"/>
    
    
      <category term="yum命令" scheme="http://cyoncan.github.io/tags/yum%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Linux管道符与重定向</title>
    <link href="http://cyoncan.github.io/2017/04/24/Linux%E7%AE%A1%E9%81%93%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://cyoncan.github.io/2017/04/24/Linux管道与重定向/</id>
    <published>2017-04-24T04:13:12.000Z</published>
    <updated>2017-05-08T14:37:20.334Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --><a id="more"></a><p><strong>管道符命令</strong></p><p>“命令A <strong>| </strong>命令B” , 就是“将前一个命令原本要输出到屏幕的数据当作是后一个命令的标准输入”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">find ./ -name <span class="string">"*.html"</span> | ls <span class="_">-l</span> | wc <span class="_">-l</span>   查找当前目录下html文件有几个.</div><div class="line"><span class="built_in">echo</span> <span class="string">"hello"</span> | passwd --stdin root   修改root密码</div></pre></td></tr></table></figure><p><strong>对于输入重定向有这些情况：</strong></p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &lt; file</td><td>将file作为命令的标准输入</td></tr><tr><td>命令 &lt;&lt; 分界符</td><td>从标准输入中读入，直到遇见“分界符”才停止</td></tr><tr><td>命令 &lt; file1 &gt; file2</td><td>将file1作为命令的标准输入并将标准输出到file2</td></tr></tbody></table><p><strong>对于输出重定向符有这些情况：</strong></p><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>命令 &gt; file</td><td>将标准输出重定向到一个file中（清空原有file的数据）</td></tr><tr><td>命令 2&gt; file</td><td>将错误输出重定向到一个file中（清空原有file的数据）</td></tr><tr><td>命令 &gt;&gt; file</td><td>将标准输出重定向到一个file中（追加到原有内容的后面）</td></tr><tr><td>命令 2&gt;&gt; file</td><td>将错误输出重定向到一个file中（追加到原有内容的后面）</td></tr><tr><td>命令 &gt;&gt; file 2&gt;&amp;1 或 命令 &amp;&gt;&gt; file</td><td>将标准输出与错误输出共同写入到file中（追加到原有内容的后面）</td></tr></tbody></table><p><em>输入输出都是相对于命令而言</em></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="重定向" scheme="http://cyoncan.github.io/tags/%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    
      <category term="管道符" scheme="http://cyoncan.github.io/tags/%E7%AE%A1%E9%81%93%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用语句</title>
    <link href="http://cyoncan.github.io/2017/04/20/mysql/"/>
    <id>http://cyoncan.github.io/2017/04/20/mysql/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-05-08T14:38:19.627Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><h5 id="1-MySQL创建用户"><a href="#1-MySQL创建用户" class="headerlink" title="1.MySQL创建用户"></a>1.MySQL创建用户</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create user <span class="string">'username'</span>@<span class="string">'%'</span> identified by <span class="string">'passwd'</span>;   % 换成localhost或者127.0.0.1,就只能本地登录了.</div></pre></td></tr></table></figure><h5 id="2-给用户授权"><a href="#2-给用户授权" class="headerlink" title="2.给用户授权"></a>2.给用户授权</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">grant all privileges on databasename.tablename to <span class="string">'username'</span>@<span class="string">'hostname'</span> identified by <span class="string">'passwd'</span>with grant option;   all代表所有权限,withgrant option代表该用户可以给其他用户也进行授权操作.</div><div class="line">flush privileges;   授权完成,需要刷新生效.</div><div class="line">quit;</div></pre></td></tr></table></figure><h5 id="3-查看mysql有多少个账户"><a href="#3-查看mysql有多少个账户" class="headerlink" title="3.查看mysql有多少个账户"></a>3.查看mysql有多少个账户</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select host,user,password from mysql.user;</div></pre></td></tr></table></figure><h5 id="4-查看MySQL字符集-排序规则"><a href="#4-查看MySQL字符集-排序规则" class="headerlink" title="4.查看MySQL字符集,排序规则"></a>4.查看MySQL字符集,排序规则</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">show variables like <span class="string">'collation%'</span>;</div><div class="line">show variables like <span class="string">'char%'</span>;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://cyoncan.github.io/categories/MySQL/"/>
    
    
      <category term="mysql" scheme="http://cyoncan.github.io/tags/mysql/"/>
    
      <category term="mysql常用" scheme="http://cyoncan.github.io/tags/mysql%E5%B8%B8%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>vim常用命令</title>
    <link href="http://cyoncan.github.io/2017/04/20/vim/"/>
    <id>http://cyoncan.github.io/2017/04/20/vim/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-06-25T16:25:08.145Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><h1 id="Linux-vim常用命令"><a href="#Linux-vim常用命令" class="headerlink" title="Linux vim常用命令"></a>Linux vim常用命令</h1><h3 id="1-替换"><a href="#1-替换" class="headerlink" title="1.替换"></a>1.替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">:s/abc/efg/      替换当前行,第一个 abc 为 efg</div><div class="line">:s/abc/efg/g     替换当前行,所有   abc 为 efg</div><div class="line">:n,<span class="variable">$s</span>/xyz/org/   替换第 n 行开始到最后一行中每一行的第一个 xyz 为 org</div><div class="line">:n,<span class="variable">$s</span>/xyz/org/g  替换第 n 行开始到最后一行中每一行所有     xyz 为 org</div><div class="line"> n 为数字，若 n 为 . ，表示从当前行开始到最后一行</div><div class="line">:%s/xyz/org/     (等同于:g/xyz/s//org/)  替换每一行的第一个 xyz 为 org</div><div class="line">:%s/xyz/org/g   （等同于:g/xyz/s//org/g）替换每一行中所有   xyz 为 org</div></pre></td></tr></table></figure><h3 id="2-vim执行：wq清楚屏幕上上一次编辑过的内容"><a href="#2-vim执行：wq清楚屏幕上上一次编辑过的内容" class="headerlink" title="2.vim执行：wq清楚屏幕上上一次编辑过的内容"></a>2.vim执行：wq清楚屏幕上上一次编辑过的内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim退出后清屏,屏幕不显示之前编辑的内容.</div><div class="line">TERM=xterm; <span class="built_in">export</span> TERM</div></pre></td></tr></table></figure><h3 id="3-删除全部"><a href="#3-删除全部" class="headerlink" title="3.删除全部"></a>3.删除全部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:%d</div></pre></td></tr></table></figure><h3 id="4-复制"><a href="#4-复制" class="headerlink" title="4.复制"></a>4.复制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v      进入字符块选择模式</div><div class="line">↑↓←→   选择要复制的字符</div><div class="line">yy     复制</div></pre></td></tr></table></figure><h3 id="5-批量注释（插入）"><a href="#5-批量注释（插入）" class="headerlink" title="5.批量注释（插入）"></a>5.批量注释（插入）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Ctrl+v   进入矩形块选择，方向键上下选择需要注释列头，I插入//，Esc退出。</div><div class="line">G 列选择</div><div class="line">c 块选择，替换</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://cyoncan.github.io/categories/Linux/"/>
    
    
      <category term="vim" scheme="http://cyoncan.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>zabbix安装配置</title>
    <link href="http://cyoncan.github.io/2017/04/20/zabbix%E6%90%AD%E5%BB%BA%E5%AE%89%E8%A3%85/"/>
    <id>http://cyoncan.github.io/2017/04/20/zabbix搭建安装/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-05-18T11:13:59.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --><a id="more"></a><h1 id="zabbix搭建"><a href="#zabbix搭建" class="headerlink" title="zabbix搭建"></a>zabbix搭建</h1><blockquote><p>环境: centos6,lnmp,zabbix3.0.8</p></blockquote><h3 id="一-web环境安装参考另一篇写lnmp搭建的文章"><a href="#一-web环境安装参考另一篇写lnmp搭建的文章" class="headerlink" title="一.web环境安装参考另一篇写lnmp搭建的文章"></a>一.web环境安装参考另一篇写lnmp搭建的文章</h3><h3 id="二-zabbix安装搭建"><a href="#二-zabbix安装搭建" class="headerlink" title="二.zabbix安装搭建"></a>二.zabbix安装搭建</h3><h6 id="tip-在官方的文档上已经有很详细的说明-下面是根据自己的实际情况参照文档安装过程"><a href="#tip-在官方的文档上已经有很详细的说明-下面是根据自己的实际情况参照文档安装过程" class="headerlink" title="tip:在官方的文档上已经有很详细的说明,下面是根据自己的实际情况参照文档安装过程."></a>tip:在官方的文档上已经有很详细的说明,下面是根据自己的实际情况参照文档安装过程.</h6><h5 id="1-zabbix下载安装选LTS-我下的3-0最新的源码包"><a href="#1-zabbix下载安装选LTS-我下的3-0最新的源码包" class="headerlink" title="1.zabbix下载安装选LTS,我下的3.0最新的源码包"></a>1.zabbix下载安装选LTS,我下的3.0最新的源码包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ wget -c https://nchc.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/3.0.8/zabbix-3.0.8.tar.gz</div><div class="line">$ tar zxvf zabbix-3.0.8.tar.gz</div><div class="line">$ groupadd zabbix</div><div class="line">$ useradd -g zabbix zabbix</div><div class="line">$ <span class="built_in">cd</span> zabbix-3.0.8/ </div><div class="line">$ ./configure --prefix=/data/<span class="built_in">local</span>/zabbix --enable-server --enable-agent --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2 --with-openssl</div><div class="line">$ yum install net-snmp-devel.x86_64 -y (根据实际环境去安装提示缺少的东西,MySQL大部分是因为没有软连接到usr/bin)</div><div class="line">$ ln <span class="_">-s</span> /data/<span class="built_in">local</span>/zabbix/sbin/* /usr/sbin/</div></pre></td></tr></table></figure><h5 id="2-创建zabbix数据库-导入数据库"><a href="#2-创建zabbix数据库-导入数据库" class="headerlink" title="2.创建zabbix数据库,导入数据库"></a>2.创建zabbix数据库,导入数据库</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ mysql -uroot -p</div><div class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</div><div class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">'localhost'</span> identified by <span class="string">'passwd'</span>;</div><div class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">'127.0.0.1'</span> identified by <span class="string">'passwd'</span>;</div><div class="line">或者直接用</div><div class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@<span class="string">'%'</span> identified by <span class="string">'passwd'</span>;</div><div class="line">mysql&gt; flush privileges;</div><div class="line">mysql&gt; quit;</div><div class="line">$ <span class="built_in">cd</span> /data/src/zabbix-3.0.8/database/mysql</div><div class="line">$ mysql -uzabbix -p zabbix &lt; schema.sql   导入zabbix数据库脚本</div><div class="line"><span class="comment"># stop here if you are creating database for Zabbix proxy</span></div><div class="line">$ mysql -uzabbix -p zabbix &lt; images.sql</div><div class="line">$ mysql -uzabbix -p zabbix &lt; data.sql</div><div class="line">导入数据库另一种方法:</div><div class="line">$ mysql -uzabbix -p</div><div class="line">mysql&gt; use zabbix;</div><div class="line">mysql&gt; <span class="built_in">source</span> /data/src/zabbix-3.0.8/database/mysql/schema.sql;</div><div class="line">......</div></pre></td></tr></table></figure><h5 id="3-修改zabbix-server配置文件"><a href="#3-修改zabbix-server配置文件" class="headerlink" title="3.修改zabbix_server配置文件"></a>3.修改zabbix_server配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DBName=zabbix       <span class="comment">#数据库名称</span></div><div class="line">DBUser=zabbix       <span class="comment">#数据库用户名</span></div><div class="line">DBPassword=123456   <span class="comment">#数据库密码</span></div><div class="line">ListenIP=127.0.0.1  <span class="comment">#数据库ip地址</span></div><div class="line">Timeout=4</div><div class="line">AlertScriptsPath=/data/<span class="built_in">local</span>/zabbix/share/zabbix/alertscripts</div><div class="line">ExternalScripts=/data/<span class="built_in">local</span>/zabbix/share/zabbix/externalscripts</div><div class="line">LogSlowQueries=3000</div></pre></td></tr></table></figure><h5 id="4-创建web目录"><a href="#4-创建web目录" class="headerlink" title="4.创建web目录"></a>4.创建web目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/web/zabbix.monitor.cn</div><div class="line">cp <span class="_">-a</span> /data/src/zabbix-3.0.8/frontend/php/* /data/web/zabbix.monitor.cn/</div><div class="line">chown -R www:www zabbix.monitor.cn/</div></pre></td></tr></table></figure><h5 id="5-配置nginx"><a href="#5-配置nginx" class="headerlink" title="5.配置nginx"></a>5.配置nginx</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">vim /data/<span class="built_in">local</span>/nginx/conf/nginx.conf</div><div class="line">在server模块外http模块内加入一行</div><div class="line">include vhost/*.conf</div><div class="line">:wq</div><div class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span>/nginx/conf/vhost</div><div class="line">vim zabbix.conf</div><div class="line">server</div><div class="line">      &#123;</div><div class="line">      listen 80;</div><div class="line">      server_name 127.0.0.1;</div><div class="line">      index index.html index.php;</div><div class="line">      root  /data/web/zabbix.monitor.cn;</div><div class="line">      access_log  /data/logs/<span class="variable">$SERVER_NAME</span>.access.log main;</div><div class="line">	  error_log  /data/logs/<span class="variable">$SERVER_NAME</span>.log error;</div><div class="line">      </div><div class="line">      location / &#123;</div><div class="line">      fastcgi_index   index.php;</div><div class="line">      fastcgi_pass    127.0.0.1:9000;</div><div class="line">      include         fastcgi_params;</div><div class="line">      fastcgi_param   SCRIPT_FILENAME    <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</div><div class="line">      fastcgi_param   SCRIPT_NAME        <span class="variable">$fastcgi_script_name</span>;</div><div class="line">	  &#125;</div><div class="line"></div><div class="line">	  <span class="keyword">if</span> (!<span class="_">-e</span> <span class="variable">$request_filename</span>)&#123;</div><div class="line">	  		 rewrite ^/(.*)$ /index.php/<span class="variable">$1</span> last;</div><div class="line">	  &#125;</div><div class="line">                </div><div class="line">      location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|JPG|xml|json)$</div><div class="line">      &#123;</div><div class="line">      expires      30d;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      location ~ .*\.(js|css)?$</div><div class="line">      &#123;</div><div class="line">      expires      12h;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">#   access_log m.log  access;</span></div><div class="line">      &#125;</div></pre></td></tr></table></figure><h5 id="6-修改php-ini文件-这个地方债官网上有配置要求说明"><a href="#6-修改php-ini文件-这个地方债官网上有配置要求说明" class="headerlink" title="6.修改php.ini文件(这个地方债官网上有配置要求说明)"></a>6.修改php.ini文件(这个地方债官网上有配置要求说明)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">post_max_size = 32M</div><div class="line">max_execution_time = 300</div><div class="line">max_input_time = 300</div><div class="line">date.timezone = Asia/Shanghai</div><div class="line">以下是我自己的进入zabbi安装检测各个配置参数和模块是否满足zabbix安装要求.如果忘记更改php.ini或者不知道改哪些的,可以进入到安装界面http://zabbix.monitor.cn/setup.php 根据检测结果,再去修改,每次修改可能需要重启nginx和php-fpm</div><div class="line">PHP version	5.6.30(我用的PHP版本)	5.4.0(zabbix3.0.8要求PHP最低的版本,下面的参数类似要求)	OK</div><div class="line">PHP option <span class="string">"memory_limit"</span>	128M	128M	OK</div><div class="line">PHP option <span class="string">"post_max_size"</span>	32M	16M	OK</div><div class="line">PHP option <span class="string">"upload_max_filesize"</span>	2M	2M	OK</div><div class="line">PHP option <span class="string">"max_execution_time"</span>	300	300	OK</div><div class="line">PHP option <span class="string">"max_input_time"</span>	300	300	OK</div><div class="line">PHP option <span class="string">"date.timezone"</span>	Asia/Shanghai		OK</div><div class="line">PHP databases support	MySQL/SQLite3 OK</div><div class="line">PHP bcmath	on		OK</div><div class="line">PHP mbstring	on		OK</div><div class="line">PHP option <span class="string">"mbstring.func_overload"</span>	off	off	OK</div><div class="line">PHP option <span class="string">"always_populate_raw_post_data"</span>	off	off	OK</div><div class="line">PHP sockets	on		OK</div><div class="line">PHP gd	2.1.0	2.0	OK</div><div class="line">PHP gd PNG support	on		OK</div><div class="line">PHP gd JPEG support	on		OK</div><div class="line">PHP gd FreeType support	on		OK</div><div class="line">PHP libxml	2.7.6	2.6.15	OK</div><div class="line">PHP xmlwriter	on		OK</div><div class="line">PHP xmlreader	on		OK</div><div class="line">PHP ctype	on		OK</div><div class="line">PHP session	on		OK</div><div class="line">PHP option <span class="string">"session.auto_start"</span>	off	off	OK</div><div class="line">PHP gettext	on		OK</div><div class="line">PHP option <span class="string">"arg_separator.output"</span>	&amp;	&amp;	OK</div></pre></td></tr></table></figure><h5 id="7-启动-进入安装界面"><a href="#7-启动-进入安装界面" class="headerlink" title="7.启动,进入安装界面"></a>7.启动,进入安装界面</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ service nginx start</div><div class="line">$ service php-fpm start</div><div class="line">$ zabbix_server   </div><div class="line">浏览器输入 http://zabbix.monitor.cn/setup.php 域名是之前nginx里面配置好的,或者不用域名用IP和别的端口,域名需要做host映射,或者内网路由器里面做虚拟映射.出现界面下一步,填上MySQL zabbix用户密码一致,下一步,看到绿色congratulation 就安装完成了.</div><div class="line">默认用户名和密码:admin,zabbix</div><div class="line">设置zabbix服务开机启动</div><div class="line">$ cp /data/src/zabbix/misc/init.d/fedora/core/* /etc/init.d/</div><div class="line">$ vim /etc/init.d/zabbix_server</div><div class="line">修改BASEDIR你zabbix安装路径</div><div class="line">chkconfig --add zabbix_server</div><div class="line">chkconfig --add zabbix_agentd</div><div class="line">chkconfig zabbix_server on</div><div class="line">chkconfig zabbix_agentd on</div></pre></td></tr></table></figure><h5 id="8-客户端安装"><a href="#8-客户端安装" class="headerlink" title="8.客户端安装"></a>8.客户端安装</h5><p>客户端根据实际情况去使用几种方案,一般机器少的,都是一台server端,几台agent端.方案可以参考:<a href="http://t.cn/RXPa0zV" rel="external nofollow noopener noreferrer" target="_blank">http://t.cn/RXPa0zV</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr/<span class="built_in">local</span>/zabbix --enable-agent --with-openssl</div><div class="line">make install</div><div class="line">其它的设置和前面的安装配置一样,zabbix_agentd.conf </div><div class="line">Server=Serverip</div><div class="line">ServerActive=Serverip</div><div class="line">Hostname=自定义zabbix客户端hostname,不要和server端配置的hostname一样.</div><div class="line">tip:将10050,10051端口添加到防火墙,server端也是.agent端需要启动zabbix_agentd服务</div></pre></td></tr></table></figure><h5 id="9-客户端和服务端使用加密传输"><a href="#9-客户端和服务端使用加密传输" class="headerlink" title="9.客户端和服务端使用加密传输"></a>9.客户端和服务端使用加密传输</h5><h6 id="i-使用psk共享密钥加密"><a href="#i-使用psk共享密钥加密" class="headerlink" title="i. 使用psk共享密钥加密"></a>i. 使用psk共享密钥加密</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Generating PSK在客户端操作</div><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/zabbix/</div><div class="line">$ openssl rand -hex 32 -out zabbix_agentd.psk</div><div class="line">$ chown zabbix:zabbix zabbix_agentd.psk</div><div class="line">$ vim /etc/zabbix_agentd.conf</div><div class="line">  TLSConnect=psk</div><div class="line">  TLSAccept=psk</div><div class="line">  TLSPSKFile=/home/zabbix/zabbix_agentd.psk</div><div class="line">  TLSPSKIdentity=PSK 001</div><div class="line"> service zabbix_agentd restart</div><div class="line"> 回到server机器,在host机器加密那里选择psk,填入信息.</div></pre></td></tr></table></figure><h6 id="ii-使用证书加密"><a href="#ii-使用证书加密" class="headerlink" title="ii. 使用证书加密"></a>ii. 使用证书加密</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /data/<span class="built_in">local</span>/zabbix/zabbix_crt</div><div class="line">$ <span class="built_in">cd</span> zabbix_crt/</div><div class="line"><span class="comment">#生成ca私钥</span></div><div class="line">$ openssl genrsa -aes256 -out ca.key 2048   需要输入给私钥加密的密码</div><div class="line"><span class="comment">#使用ca私钥建立ca证书</span></div><div class="line">$ openssl req -new -x509 -nodes -days 1000 -key ca.key -subj /CN=ServerIPorDomainName\ CA/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; ca.crt</div><div class="line"><span class="comment">#生成服务器csr证书请求文件</span></div><div class="line">$ openssl req -newkey rsa:2048 -days 1000 -nodes -keyout server.key -subj /CN=ServerIPorDomainName/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; server.csr</div><div class="line"><span class="comment">#使用ca证书与私钥签发服务器证书</span></div><div class="line">$ openssl x509 -req -in server.csr -days 1000 -CA ca.crt -CAkey ca.key -set_serial 01 &gt; server.crt</div><div class="line"><span class="comment">#生成客户端csr证书请求文件</span></div><div class="line">$ openssl req -newkey rsa:2048 -days 1000 -nodes -keyout client.key -subj /CN=client/OU=Development\ group/O=Zabbix\ SIA/DC=zabbix/DC=com &gt; client.csr</div><div class="line"><span class="comment">#使用ca证书与私钥签发客户端证书</span></div><div class="line">$ openssl x509 -req -in client.csr -days 1000 -CA ca.crt -CAkey ca.key -set_serial 01 &gt; client.crt</div><div class="line"></div><div class="line">服务端文件位置可以不改变,用scp命令将刚刚生成的客户端需要文件上传到客户端自定义的文件夹 /usr/<span class="built_in">local</span>/zabbix/zabbix_crt/</div><div class="line"></div><div class="line">服务端: ca.crt , server.crt , server.crt</div><div class="line">vim /data/<span class="built_in">local</span>/zabbix/etc/zabbix_server.conf</div><div class="line">TLSCAFile=/data/<span class="built_in">local</span>/zabbix/zabbix_crt/ca.crt</div><div class="line">TLSCertFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/server.crt</div><div class="line">TLSKeyFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/server.key</div><div class="line"></div><div class="line">客户端: ca.crt , client.crt , client.crt</div><div class="line">TLSConnect=cert</div><div class="line">TLSAccept=cert</div><div class="line">TLSCAFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/ca.crt</div><div class="line">TLSCertFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/client.crt</div><div class="line">TLSKeyFile=/usr/<span class="built_in">local</span>/zabbix/zabbix_crt/client.key</div><div class="line"></div><div class="line">进入webui configuration/hosts/打开相应的主机/双向都可以选certificate</div><div class="line">重启zabbix_server和zabbix_agent,再进去看cert是否变蓝色,有延迟几十秒.</div><div class="line">我记录的文档可能有些不全,希望大家遇到问题多分析日志,去网上搜索遇到的错误信息.</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:31 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="监控" scheme="http://cyoncan.github.io/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="zabbix" scheme="http://cyoncan.github.io/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>CentOS防火墙之配置iptables</title>
    <link href="http://cyoncan.github.io/2017/04/20/CentOS6%E9%98%B2%E7%81%AB%E5%A2%99%E4%B9%8Biptables/"/>
    <id>http://cyoncan.github.io/2017/04/20/CentOS6防火墙之iptables/</id>
    <published>2017-04-19T16:16:21.000Z</published>
    <updated>2017-05-11T05:32:00.396Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --><a id="more"></a><h1 id="一、iptables表和链的结构-四表五链"><a href="#一、iptables表和链的结构-四表五链" class="headerlink" title="一、iptables表和链的结构(四表五链)"></a>一、iptables表和链的结构(四表五链)</h1><h3 id="1-四张表处理优先级-raw-gt-mangle-gt-nat-gt-filter"><a href="#1-四张表处理优先级-raw-gt-mangle-gt-nat-gt-filter" class="headerlink" title="1.四张表处理优先级: raw&gt;mangle&gt;nat&gt;filter"></a>1.四张表处理优先级: raw&gt;mangle&gt;nat&gt;filter</h3><p><strong>raw:</strong> 优先级最高, 设置raw一般是为了不再让iptables做数据包的跟踪链接处理, 提高性能.</p><p><strong>mangle:</strong> 用于对特定数据包的修改.</p><p><strong>nat:</strong> 用于nat功能端口或者地址映射.</p><p><strong>filter:</strong> 一般的过滤功能.</p><h3 id="2-五链：INPUT-FORWARD-OUTPUT-PREROUTING-POSTROUTING"><a href="#2-五链：INPUT-FORWARD-OUTPUT-PREROUTING-POSTROUTING" class="headerlink" title="2.五链：INPUT, FORWARD, OUTPUT, PREROUTING, POSTROUTING"></a>2.五链：INPUT, FORWARD, OUTPUT, PREROUTING, POSTROUTING</h3><p><strong>raw表</strong>中的链有: PREROUTING, OUTPUT</p><p><strong>mangle表</strong>中的链有: PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING</p><p><strong>nat表</strong>中的链有: PREROUTING, POSTROUTING, OUTPUT</p><p><strong>filter表</strong>中的链有: INPUT, FORWARD, OUTPUT</p><h3 id="3-iptables常用参数"><a href="#3-iptables常用参数" class="headerlink" title="3.iptables常用参数:"></a>3.iptables常用参数:</h3><p>tip: iptable -h都能看到对应的解释</p><p><strong>规则增删改查:</strong></p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">-A</td><td style="text-align:left">在规则链的末尾加入新规则</td></tr><tr><td style="text-align:left">-I</td><td style="text-align:left">在规则链的头部加入新规则</td></tr><tr><td style="text-align:left">-D</td><td style="text-align:left">删除</td></tr><tr><td style="text-align:left">-R</td><td style="text-align:left">修改</td></tr><tr><td style="text-align:left">-L</td><td style="text-align:left">查看</td></tr><tr><td style="text-align:left">-P</td><td style="text-align:left">设置默认策略 , iptables -P INPUT DROP</td></tr><tr><td style="text-align:left">-F</td><td style="text-align:left">清空默认规则链</td></tr><tr><td style="text-align:left">-X</td><td style="text-align:left">删除自定义空链</td></tr></tbody></table><p><strong>常用参数:</strong></p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">-p</td><td style="text-align:left">指定协议 tcp/udp/icmp</td></tr><tr><td style="text-align:left">-s</td><td style="text-align:left">指定源地址 ip/mask , 加叹号 “!” 表示相反的意思</td></tr><tr><td style="text-align:left">-d</td><td style="text-align:left">匹配目标地址</td></tr><tr><td style="text-align:left">–sport</td><td style="text-align:left">匹配来源端口号</td></tr><tr><td style="text-align:left">–dport</td><td style="text-align:left">匹配目端口号</td></tr><tr><td style="text-align:left">-i</td><td style="text-align:left">匹配从这块网卡流入的数据</td></tr><tr><td style="text-align:left">-o</td><td style="text-align:left">匹配从这块网卡流出的数据</td></tr><tr><td style="text-align:left">-m</td><td style="text-align:left">加载模块</td></tr><tr><td style="text-align:left">-t</td><td style="text-align:left">指定表, 默认filter表. iptables -L - nat/mangle/raw</td></tr><tr><td style="text-align:left">-j</td><td style="text-align:left">指定处理的动作 , ACCEPT/DROP</td></tr></tbody></table><p><strong>常用处理动作:</strong></p><table><thead><tr><th style="text-align:left">动作</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">ACCEPT</td><td style="text-align:left">允许封包通过,:将数据包放行,进行完此动作后,不再对比其他规则,直接跳往下一个规则链.</td></tr><tr><td style="text-align:left">DROP</td><td style="text-align:left">丢弃封包,响应超时,对方无法判断主机是否在线或者流量被拒绝,不再对比其他规则,中断过滤.</td></tr><tr><td style="text-align:left">REJECT</td><td style="text-align:left">拒绝封包通过,并将数据包封装,返回消息,对方看到主机口不可达.</td></tr><tr><td style="text-align:left">REDIRECT</td><td style="text-align:left">将包重定向到另一个端口,之后继续对比其他规则.</td></tr><tr><td style="text-align:left">MASQUERADE</td><td style="text-align:left">改写封包来源ip为防火墙NIC ip , 可指定port范围 , 之后跳往下一规则.</td></tr><tr><td style="text-align:left">SNAT</td><td style="text-align:left">改写封包来源ip为某特定ip或ip范围 , 可指定 port 范围 , 之后跳往下一规则.</td></tr><tr><td style="text-align:left">DNAT</td><td style="text-align:left">改写封包目的ip为某特定ip或ip范围, 可指定port范围 , 之后跳往下一规则.</td></tr></tbody></table><h1 id="二、配置filter表防火墙"><a href="#二、配置filter表防火墙" class="headerlink" title="二、配置filter表防火墙"></a>二、配置filter表防火墙</h1><h6 id="tip-一般设置默认规则-INPUT链和FORWARD链为DROP-OUTPUT链为ACCEPT"><a href="#tip-一般设置默认规则-INPUT链和FORWARD链为DROP-OUTPUT链为ACCEPT" class="headerlink" title="tip: 一般设置默认规则,INPUT链和FORWARD链为DROP , OUTPUT链为ACCEPT"></a>tip: 一般设置默认规则,INPUT链和FORWARD链为DROP , OUTPUT链为ACCEPT</h6><h3 id="1-清除预设表filter中的所有规则链的规则"><a href="#1-清除预设表filter中的所有规则链的规则" class="headerlink" title="1.清除预设表filter中的所有规则链的规则"></a>1.清除预设表filter中的所有规则链的规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -F</div></pre></td></tr></table></figure><h3 id="2-清除预设表filter中使用者自定链中的规则"><a href="#2-清除预设表filter中使用者自定链中的规则" class="headerlink" title="2.清除预设表filter中使用者自定链中的规则"></a>2.清除预设表filter中使用者自定链中的规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -X</div></pre></td></tr></table></figure><h3 id="3-设定预设规则"><a href="#3-设定预设规则" class="headerlink" title="3.设定预设规则"></a>3.设定预设规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iptables -P INPUT DROP</div><div class="line">iptables -P OUTPUT ACCEPT</div><div class="line">iptables -P FORWARD DROP</div></pre></td></tr></table></figure><h3 id="4-根据自己机器的实际情况开启相应端口"><a href="#4-根据自己机器的实际情况开启相应端口" class="headerlink" title="4.根据自己机器的实际情况开启相应端口"></a>4.根据自己机器的实际情况开启相应端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 允许回环loopback访问</span></div><div class="line">$ iptables -A INPUT -i lo -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -o lo -j ACCEPT   (output链的默认策略设置为DROP时,需要添加这条,以下针对的每个端口同此一样.)</div><div class="line"><span class="comment">#开启22端口,ssh才能登录.</span></div><div class="line">$ iptables -A INPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT</div><div class="line">或者</div><div class="line">$ iptables -A INPUT -i eth0 <span class="_">-s</span> 192.168.2.100 -p tcp --dport 22 -j ACCEPT <span class="comment">#指定eth1网卡和192.168.2.100允许ssh登录</span></div><div class="line">$ iptables -A OUTPUT -o eth0 <span class="_">-s</span> 192.168.2.100 -p tcp --dport 22 -j ACCEPT</div><div class="line"><span class="comment">#允许ping(即icmp包通过)</span></div><div class="line">$ iptables -A INPUT -p icmp -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -p icmp -j ACCEPT</div><div class="line"><span class="comment">#使ping域名可以得到响应</span></div><div class="line">$ iptables -A INPUT -p udp --sport 53 -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -p udp --dport 53 -j ACCEPT</div><div class="line">$ iptables -A INPUT -p udp --dport 53 -j ACCEPT</div><div class="line">$ iptables -A OUTPUT -p udp --sport 53 -j ACCEPT</div><div class="line">tip: 除了以上用命令去添加规则,还可以用编辑文件的方式 vim /etc/sysconfig/iptables</div></pre></td></tr></table></figure><h3 id="5-保存iptables配置"><a href="#5-保存iptables配置" class="headerlink" title="5.保存iptables配置"></a>5.保存iptables配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables save</div></pre></td></tr></table></figure><h3 id="6-重启iptables服务"><a href="#6-重启iptables服务" class="headerlink" title="6.重启iptables服务"></a>6.重启iptables服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service iptables restart</div></pre></td></tr></table></figure><h3 id="7-查看iptables规则"><a href="#7-查看iptables规则" class="headerlink" title="7.查看iptables规则"></a>7.查看iptables规则</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -L -n</div></pre></td></tr></table></figure><h3 id="8-iptables优化"><a href="#8-iptables优化" class="headerlink" title="8.iptables优化:"></a>8.iptables优化:</h3><p>请求比较频繁的放在最上面,请求频率较小的放在最后面.这里整理关于防火墙的东西,不是具体的知识,更多工操作使用,具体的防火墙知识,还需要去阅读参考网上写的各种文章,需要多读多看多试,才能理解深入.</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Jun 26 2017 00:25:30 GMT+0800 (CST) --&gt;
    
    </summary>
    
      <category term="CentOS" scheme="http://cyoncan.github.io/categories/CentOS/"/>
    
    
      <category term="iptables" scheme="http://cyoncan.github.io/tags/iptables/"/>
    
      <category term="防火墙" scheme="http://cyoncan.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
</feed>
